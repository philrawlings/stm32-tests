
Nucleo-F767ZI-I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c00  08004c00  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c08  08004c08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  2000000c  08004c1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08004c1c  00020544  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd9  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000233c  00000000  00000000  00031013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00033350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00034228  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d29  00000000  00000000  00034fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c615  00000000  00000000  0005cd01  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9146  00000000  00000000  00069316  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016245c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e08  00000000  00000000  001624d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004bd0 	.word	0x08004bd0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004bd0 	.word	0x08004bd0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	; 0x40
 800053c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fcd4 	bl	8000eea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f885 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f9f9 	bl	800093c <MX_GPIO_Init>
  MX_ETH_Init();
 800054a:	f000 f919 	bl	8000780 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800054e:	f000 f997 	bl	8000880 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000552:	f000 f9c5 	bl	80008e0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000556:	f000 f953 	bl	8000800 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint16_t eepromAddress = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t addressBytes[2];
  addressBytes[0]= eepromAddress >> 8; // High byte
 800055e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	b29b      	uxth	r3, r3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  addressBytes[1]= eepromAddress & 0xFF; // Low Byte
 800056a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800056c:	b2db      	uxtb	r3, r3
 800056e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  uint8_t writeBuf[6];
  writeBuf[0] = addressBytes[0];
 8000572:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000576:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  writeBuf[1] = addressBytes[1];
 800057a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800057e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  writeBuf[2] = 0x41;
 8000582:	2341      	movs	r3, #65	; 0x41
 8000584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  writeBuf[3] = 0x42;
 8000588:	2342      	movs	r3, #66	; 0x42
 800058a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeBuf[4] = 0x43;
 800058e:	2343      	movs	r3, #67	; 0x43
 8000590:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  writeBuf[5] = 0x44;
 8000594:	2344      	movs	r3, #68	; 0x44
 8000596:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

  ret = HAL_I2C_Master_Transmit(&hi2c1, EEPROM_WRITE_ADDR, writeBuf, 6, HAL_MAX_DELAY);
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	b299      	uxth	r1, r3
 800059e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2306      	movs	r3, #6
 80005aa:	4827      	ldr	r0, [pc, #156]	; (8000648 <main+0x110>)
 80005ac:	f001 fcdc 	bl	8001f68 <HAL_I2C_Master_Transmit>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  if (ret == HAL_ERROR)
 80005b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d103      	bne.n	80005c6 <main+0x8e>
	  i2cError = HAL_I2C_GetError(&hi2c1);
 80005be:	4822      	ldr	r0, [pc, #136]	; (8000648 <main+0x110>)
 80005c0:	f001 fed8 	bl	8002374 <HAL_I2C_GetError>
 80005c4:	6338      	str	r0, [r7, #48]	; 0x30

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_I2C_ModeTypeDef mode = HAL_I2C_GetMode(&hi2c1);
 80005c6:	4820      	ldr	r0, [pc, #128]	; (8000648 <main+0x110>)
 80005c8:	f001 fec6 	bl	8002358 <HAL_I2C_GetMode>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(&hi2c1);
 80005d2:	481d      	ldr	r0, [pc, #116]	; (8000648 <main+0x110>)
 80005d4:	f001 feb2 	bl	800233c <HAL_I2C_GetState>
 80005d8:	4603      	mov	r3, r0
 80005da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	  ret = HAL_I2C_Master_Transmit(&hi2c1, EEPROM_WRITE_ADDR, addressBytes, 2, HAL_MAX_DELAY);
 80005de:	23a0      	movs	r3, #160	; 0xa0
 80005e0:	b299      	uxth	r1, r3
 80005e2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2302      	movs	r3, #2
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <main+0x110>)
 80005f0:	f001 fcba 	bl	8001f68 <HAL_I2C_Master_Transmit>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  if (ret == HAL_ERROR)
 80005fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d103      	bne.n	800060a <main+0xd2>
		  i2cError = HAL_I2C_GetError(&hi2c1);
 8000602:	4811      	ldr	r0, [pc, #68]	; (8000648 <main+0x110>)
 8000604:	f001 feb6 	bl	8002374 <HAL_I2C_GetError>
 8000608:	6338      	str	r0, [r7, #48]	; 0x30

	  uint8_t buf[32];
	  ret = HAL_I2C_Master_Receive(&hi2c1, EEPROM_READ_ADDR, buf, 32, 1000);
 800060a:	23a1      	movs	r3, #161	; 0xa1
 800060c:	b299      	uxth	r1, r3
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	2320      	movs	r3, #32
 8000618:	480b      	ldr	r0, [pc, #44]	; (8000648 <main+0x110>)
 800061a:	f001 fd99 	bl	8002150 <HAL_I2C_Master_Receive>
 800061e:	4603      	mov	r3, r0
 8000620:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  if (ret == HAL_ERROR)
 8000624:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000628:	2b01      	cmp	r3, #1
 800062a:	d103      	bne.n	8000634 <main+0xfc>
		  i2cError = HAL_I2C_GetError(&hi2c1);
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x110>)
 800062e:	f001 fea1 	bl	8002374 <HAL_I2C_GetError>
 8000632:	6338      	str	r0, [r7, #48]	; 0x30

	  HAL_Delay(1000);
 8000634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000638:	f000 fcb4 	bl	8000fa4 <HAL_Delay>

	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <main+0x114>)
 8000640:	f001 fbe7 	bl	8001e12 <HAL_GPIO_TogglePin>
  {
 8000644:	e7bf      	b.n	80005c6 <main+0x8e>
 8000646:	bf00      	nop
 8000648:	200000a8 	.word	0x200000a8
 800064c:	40020400 	.word	0x40020400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0b8      	sub	sp, #224	; 0xe0
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 faae 	bl	8004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2290      	movs	r2, #144	; 0x90
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f004 fa9f 	bl	8004bc0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000682:	f002 fa43 	bl	8002b0c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	4b3b      	ldr	r3, [pc, #236]	; (8000774 <SystemClock_Config+0x124>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a3a      	ldr	r2, [pc, #232]	; (8000774 <SystemClock_Config+0x124>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b38      	ldr	r3, [pc, #224]	; (8000774 <SystemClock_Config+0x124>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069e:	4b36      	ldr	r3, [pc, #216]	; (8000778 <SystemClock_Config+0x128>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a6:	4a34      	ldr	r2, [pc, #208]	; (8000778 <SystemClock_Config+0x128>)
 80006a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <SystemClock_Config+0x128>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ba:	2301      	movs	r3, #1
 80006bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006dc:	2360      	movs	r3, #96	; 0x60
 80006de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fa6a 	bl	8002bcc <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006fe:	f000 f9bf 	bl	8000a80 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000702:	f002 fa13 	bl	8002b2c <HAL_PWREx_EnableOverDrive>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800070c:	f000 f9b8 	bl	8000a80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000730:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000734:	2103      	movs	r1, #3
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fcf6 	bl	8003128 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000742:	f000 f99d 	bl	8000a80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <SystemClock_Config+0x12c>)
 8000748:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800074a:	2300      	movs	r3, #0
 800074c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	4618      	mov	r0, r3
 800075e:	f002 fedb 	bl	8003518 <HAL_RCCEx_PeriphCLKConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000768:	f000 f98a 	bl	8000a80 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	37e0      	adds	r7, #224	; 0xe0
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000
 800077c:	00204100 	.word	0x00204100

08000780 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <MX_ETH_Init+0x78>)
 8000786:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <MX_ETH_Init+0x7c>)
 8000788:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_ETH_Init+0x78>)
 800078c:	2201      	movs	r2, #1
 800078e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <MX_ETH_Init+0x78>)
 8000792:	2200      	movs	r2, #0
 8000794:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_ETH_Init+0x78>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_ETH_Init+0x78>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_ETH_Init+0x78>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	3302      	adds	r3, #2
 80007ae:	22e1      	movs	r2, #225	; 0xe1
 80007b0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_ETH_Init+0x78>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	3303      	adds	r3, #3
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_ETH_Init+0x78>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_ETH_Init+0x78>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	3305      	adds	r3, #5
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_ETH_Init+0x78>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_ETH_Init+0x78>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_ETH_Init+0x78>)
 80007de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007e2:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_ETH_Init+0x78>)
 80007e6:	f000 fce5 	bl	80011b4 <HAL_ETH_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80007f0:	f000 f946 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200004f8 	.word	0x200004f8
 80007fc:	40028000 	.word	0x40028000

08000800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C1_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C1_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C1_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C1_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C1_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <MX_I2C1_Init+0x74>)
 800083c:	f001 fb04 	bl	8001e48 <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 f91b 	bl	8000a80 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C1_Init+0x74>)
 800084e:	f001 ff7d 	bl	800274c <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 f912 	bl	8000a80 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2C1_Init+0x74>)
 8000860:	f001 ffbf 	bl	80027e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f909 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000a8 	.word	0x200000a8
 8000878:	40005400 	.word	0x40005400
 800087c:	20303e5d 	.word	0x20303e5d

08000880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 8000886:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_USART3_UART_Init+0x5c>)
 8000888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USART3_UART_Init+0x58>)
 80008c4:	f003 fa4e 	bl	8003d64 <HAL_UART_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f8d7 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000028 	.word	0x20000028
 80008dc:	40004800 	.word	0x40004800

080008e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2206      	movs	r2, #6
 80008f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	2202      	movs	r2, #2
 8000902:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2201      	movs	r2, #1
 8000908:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2201      	movs	r2, #1
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	f001 ffa9 	bl	800287a <HAL_PCD_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f8a7 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000f4 	.word	0x200000f4

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a45      	ldr	r2, [pc, #276]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x130>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_GPIO_Init+0x130>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ca:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e8:	4821      	ldr	r0, [pc, #132]	; (8000a70 <MX_GPIO_Init+0x134>)
 80009ea:	f001 f9f9 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	; (8000a74 <MX_GPIO_Init+0x138>)
 80009f4:	f001 f9f4 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <MX_GPIO_Init+0x13c>)
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481b      	ldr	r0, [pc, #108]	; (8000a7c <MX_GPIO_Init+0x140>)
 8000a0e:	f001 f83d 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a12:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_GPIO_Init+0x134>)
 8000a2c:	f001 f82e 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_GPIO_Init+0x138>)
 8000a48:	f001 f820 	bl	8001a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0x138>)
 8000a60:	f001 f814 	bl	8001a8c <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	10110000 	.word	0x10110000
 8000a7c:	40020800 	.word	0x40020800

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08e      	sub	sp, #56	; 0x38
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a4e      	ldr	r2, [pc, #312]	; (8000c30 <HAL_ETH_MspInit+0x158>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	f040 8096 	bne.w	8000c28 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000afc:	4b4d      	ldr	r3, [pc, #308]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a4c      	ldr	r2, [pc, #304]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b4a      	ldr	r3, [pc, #296]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	4b47      	ldr	r3, [pc, #284]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	4a46      	ldr	r2, [pc, #280]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b20:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b36:	6313      	str	r3, [r2, #48]	; 0x30
 8000b38:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	4a3a      	ldr	r2, [pc, #232]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b50:	4b38      	ldr	r3, [pc, #224]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6313      	str	r3, [r2, #48]	; 0x30
 8000b68:	4b32      	ldr	r3, [pc, #200]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	4a2e      	ldr	r2, [pc, #184]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b80:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8c:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <HAL_ETH_MspInit+0x15c>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ba4:	2332      	movs	r3, #50	; 0x32
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb4:	230b      	movs	r3, #11
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	481e      	ldr	r0, [pc, #120]	; (8000c38 <HAL_ETH_MspInit+0x160>)
 8000bc0:	f000 ff64 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bc4:	2386      	movs	r3, #134	; 0x86
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4817      	ldr	r0, [pc, #92]	; (8000c3c <HAL_ETH_MspInit+0x164>)
 8000be0:	f000 ff54 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf6:	230b      	movs	r3, #11
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480f      	ldr	r0, [pc, #60]	; (8000c40 <HAL_ETH_MspInit+0x168>)
 8000c02:	f000 ff43 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c18:	230b      	movs	r3, #11
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4808      	ldr	r0, [pc, #32]	; (8000c44 <HAL_ETH_MspInit+0x16c>)
 8000c24:	f000 ff32 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40028000 	.word	0x40028000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020800 	.word	0x40020800
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40021800 	.word	0x40021800

08000c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_I2C_MspInit+0x7c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d128      	bne.n	8000cbc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c88:	2312      	movs	r3, #18
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c94:	2304      	movs	r3, #4
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480b      	ldr	r0, [pc, #44]	; (8000ccc <HAL_I2C_MspInit+0x84>)
 8000ca0:	f000 fef4 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <HAL_I2C_MspInit+0x80>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40005400 	.word	0x40005400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020400 	.word	0x40020400

08000cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a17      	ldr	r2, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0x7c>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d128      	bne.n	8000d44 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a10      	ldr	r2, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_UART_MspInit+0x80>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x84>)
 8000d40:	f000 fea4 	bl	8001a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d78:	d141      	bne.n	8000dfe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a22      	ldr	r2, [pc, #136]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d92:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da4:	230a      	movs	r3, #10
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4817      	ldr	r0, [pc, #92]	; (8000e0c <HAL_PCD_MspInit+0xb4>)
 8000db0:	f000 fe6c 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4810      	ldr	r0, [pc, #64]	; (8000e0c <HAL_PCD_MspInit+0xb4>)
 8000dca:	f000 fe5f 	bl	8001a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd2:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	6353      	str	r3, [r2, #52]	; 0x34
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_PCD_MspInit+0xb0>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f87e 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SystemInit+0x28>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <SystemInit+0x28>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SystemInit+0x28>)
 8000e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e86:	609a      	str	r2, [r3, #8]
#endif
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd3 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f003 fe57 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb35 	bl	8000538 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000ed4:	08004c10 	.word	0x08004c10
  ldr  r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000edc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ee4:	20000544 	.word	0x20000544

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>

08000eea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eee:	2003      	movs	r0, #3
 8000ef0:	f000 f92c 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f805 	bl	8000f04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000efa:	f7ff fdc9 	bl	8000a90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f939 	bl	800119a <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f90f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000540 	.word	0x20000540

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000540 	.word	0x20000540

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	4313      	orrs	r3, r2
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <__NVIC_SetPriorityGrouping+0x40>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	05fa0000 	.word	0x05fa0000

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	; (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff47 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff5c 	bl	8001030 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ffb0 	bl	8001108 <SysTick_Config>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80011c4:	4ba9      	ldr	r3, [pc, #676]	; (800146c <HAL_ETH_Init+0x2b8>)
 80011c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e183      	b.n	80014e2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fc72 	bl	8000ad8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f4:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <HAL_ETH_Init+0x2bc>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	4a9d      	ldr	r2, [pc, #628]	; (8001470 <HAL_ETH_Init+0x2bc>)
 80011fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001200:	4b9b      	ldr	r3, [pc, #620]	; (8001470 <HAL_ETH_Init+0x2bc>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800120c:	4b99      	ldr	r3, [pc, #612]	; (8001474 <HAL_ETH_Init+0x2c0>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a98      	ldr	r2, [pc, #608]	; (8001474 <HAL_ETH_Init+0x2c0>)
 8001212:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001216:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001218:	4b96      	ldr	r3, [pc, #600]	; (8001474 <HAL_ETH_Init+0x2c0>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4994      	ldr	r1, [pc, #592]	; (8001474 <HAL_ETH_Init+0x2c0>)
 8001222:	4313      	orrs	r3, r2
 8001224:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800123c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800123e:	f7ff fea5 	bl	8000f8c <HAL_GetTick>
 8001242:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001244:	e011      	b.n	800126a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001246:	f7ff fea1 	bl	8000f8c <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001254:	d909      	bls.n	800126a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2203      	movs	r2, #3
 800125a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e13b      	b.n	80014e2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e4      	bne.n	8001246 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f023 031c 	bic.w	r3, r3, #28
 800128a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800128c:	f002 f910 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 8001290:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4a78      	ldr	r2, [pc, #480]	; (8001478 <HAL_ETH_Init+0x2c4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d908      	bls.n	80012ac <HAL_ETH_Init+0xf8>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4a77      	ldr	r2, [pc, #476]	; (800147c <HAL_ETH_Init+0x2c8>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d804      	bhi.n	80012ac <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	61fb      	str	r3, [r7, #28]
 80012aa:	e027      	b.n	80012fc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	4a73      	ldr	r2, [pc, #460]	; (800147c <HAL_ETH_Init+0x2c8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d908      	bls.n	80012c6 <HAL_ETH_Init+0x112>
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4a72      	ldr	r2, [pc, #456]	; (8001480 <HAL_ETH_Init+0x2cc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d804      	bhi.n	80012c6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f043 030c 	orr.w	r3, r3, #12
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	e01a      	b.n	80012fc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	4a6d      	ldr	r2, [pc, #436]	; (8001480 <HAL_ETH_Init+0x2cc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d903      	bls.n	80012d6 <HAL_ETH_Init+0x122>
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_ETH_Init+0x2d0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d911      	bls.n	80012fa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4a6a      	ldr	r2, [pc, #424]	; (8001484 <HAL_ETH_Init+0x2d0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d908      	bls.n	80012f0 <HAL_ETH_Init+0x13c>
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_ETH_Init+0x2d4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d804      	bhi.n	80012f0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e005      	b.n	80012fc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	e000      	b.n	80012fc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012fa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	69fa      	ldr	r2, [r7, #28]
 8001302:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001304:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001308:	2100      	movs	r1, #0
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f956 	bl	80015bc <HAL_ETH_WritePHYRegister>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f9b3 	bl	8001688 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0d9      	b.n	80014e2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800132e:	20ff      	movs	r0, #255	; 0xff
 8001330:	f7ff fe38 	bl	8000fa4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f000 80a7 	beq.w	800148c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800133e:	f7ff fe25 	bl	8000f8c <HAL_GetTick>
 8001342:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	461a      	mov	r2, r3
 800134a:	2101      	movs	r1, #1
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f8cd 	bl	80014ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001352:	f7ff fe1b 	bl	8000f8c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001360:	4293      	cmp	r3, r2
 8001362:	d90f      	bls.n	8001384 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001368:	6939      	ldr	r1, [r7, #16]
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f98c 	bl	8001688 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0ae      	b.n	80014e2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0da      	beq.n	8001344 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800138e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001392:	2100      	movs	r1, #0
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f911 	bl	80015bc <HAL_ETH_WritePHYRegister>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013a4:	6939      	ldr	r1, [r7, #16]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f96e 	bl	8001688 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013b4:	2301      	movs	r3, #1
 80013b6:	e094      	b.n	80014e2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013b8:	f7ff fde8 	bl	8000f8c <HAL_GetTick>
 80013bc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	461a      	mov	r2, r3
 80013c4:	2101      	movs	r1, #1
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f890 	bl	80014ec <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013cc:	f7ff fdde 	bl	8000f8c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d90f      	bls.n	80013fe <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f94f 	bl	8001688 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e071      	b.n	80014e2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 0320 	and.w	r3, r3, #32
 8001404:	2b00      	cmp	r3, #0
 8001406:	d0da      	beq.n	80013be <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	461a      	mov	r2, r3
 800140e:	211f      	movs	r1, #31
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f86b 	bl	80014ec <HAL_ETH_ReadPHYRegister>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f930 	bl	8001688 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001430:	2301      	movs	r3, #1
 8001432:	e056      	b.n	80014e2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	e002      	b.n	800144e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	e037      	b.n	80014d0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	e032      	b.n	80014d0 <HAL_ETH_Init+0x31c>
 800146a:	bf00      	nop
 800146c:	03938700 	.word	0x03938700
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	01312cff 	.word	0x01312cff
 800147c:	02160ebf 	.word	0x02160ebf
 8001480:	039386ff 	.word	0x039386ff
 8001484:	05f5e0ff 	.word	0x05f5e0ff
 8001488:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800149c:	4313      	orrs	r3, r2
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f889 	bl	80015bc <HAL_ETH_WritePHYRegister>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00b      	beq.n	80014c8 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8e6 	bl	8001688 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e00c      	b.n	80014e2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014c8:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014cc:	f7ff fd6a 	bl	8000fa4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014d0:	6939      	ldr	r1, [r7, #16]
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f8d8 	bl	8001688 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop

080014ec <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	460b      	mov	r3, r1
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b82      	cmp	r3, #130	; 0x82
 800150c:	d101      	bne.n	8001512 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800150e:	2302      	movs	r3, #2
 8001510:	e050      	b.n	80015b4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2282      	movs	r2, #130	; 0x82
 8001516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 031c 	and.w	r3, r3, #28
 8001528:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8a1b      	ldrh	r3, [r3, #16]
 800152e:	02db      	lsls	r3, r3, #11
 8001530:	b29b      	uxth	r3, r3
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001538:	897b      	ldrh	r3, [r7, #10]
 800153a:	019b      	lsls	r3, r3, #6
 800153c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	4313      	orrs	r3, r2
 8001544:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f023 0302 	bic.w	r3, r3, #2
 800154c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800155e:	f7ff fd15 	bl	8000f8c <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001564:	e015      	b.n	8001592 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001566:	f7ff fd11 	bl	8000f8c <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d309      	bcc.n	800158a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e014      	b.n	80015b4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1e4      	bne.n	8001566 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	460b      	mov	r3, r1
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b42      	cmp	r3, #66	; 0x42
 80015dc:	d101      	bne.n	80015e2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80015de:	2302      	movs	r3, #2
 80015e0:	e04e      	b.n	8001680 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2242      	movs	r2, #66	; 0x42
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	f003 031c 	and.w	r3, r3, #28
 80015f8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8a1b      	ldrh	r3, [r3, #16]
 80015fe:	02db      	lsls	r3, r3, #11
 8001600:	b29b      	uxth	r3, r3
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	4313      	orrs	r3, r2
 8001606:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	019b      	lsls	r3, r3, #6
 800160c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	4313      	orrs	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001638:	f7ff fca8 	bl	8000f8c <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800163e:	e015      	b.n	800166c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001640:	f7ff fca4 	bl	8000f8c <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164e:	d309      	bcc.n	8001664 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e00d      	b.n	8001680 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1e4      	bne.n	8001640 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0b0      	sub	sp, #192	; 0xc0
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016a4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d103      	bne.n	80016d6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d2:	663b      	str	r3, [r7, #96]	; 0x60
 80016d4:	e001      	b.n	80016da <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80016da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016de:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016e4:	2300      	movs	r3, #0
 80016e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800174c:	2300      	movs	r3, #0
 800174e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800175c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001760:	4bab      	ldr	r3, [pc, #684]	; (8001a10 <ETH_MACDMAConfig+0x388>)
 8001762:	4013      	ands	r3, r2
 8001764:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001768:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800176a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800176c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800176e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001770:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001774:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800177a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800177c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800177e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001782:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001788:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800178c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800178e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001790:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001794:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001798:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800179a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800179c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800179e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017a2:	4313      	orrs	r3, r2
 80017a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017b0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fbf1 	bl	8000fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017ca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80017ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017d0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80017d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80017d4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80017d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80017da:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80017dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80017e0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80017e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80017e6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80017e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80017f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80017f8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017fa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001806:	2001      	movs	r0, #1
 8001808:	f7ff fbcc 	bl	8000fa4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001814:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800181e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001828:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001838:	f64f 7341 	movw	r3, #65345	; 0xff41
 800183c:	4013      	ands	r3, r2
 800183e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001846:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800184c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800184e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001852:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001854:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001858:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800185a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800185e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001860:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001864:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800186a:	4313      	orrs	r3, r2
 800186c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001878:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff fb8d 	bl	8000fa4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001892:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001894:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001898:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fb78 	bl	8000fa4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018bc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80018c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80018cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018d0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80018e2:	2304      	movs	r3, #4
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80018e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80018ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001902:	2300      	movs	r3, #0
 8001904:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001906:	2300      	movs	r3, #0
 8001908:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001912:	4413      	add	r3, r2
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800191a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800191e:	4b3d      	ldr	r3, [pc, #244]	; (8001a14 <ETH_MACDMAConfig+0x38c>)
 8001920:	4013      	ands	r3, r2
 8001922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001926:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001928:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800192a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800192c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800192e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001930:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001932:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001934:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001936:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001938:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800193a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800193c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800193e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001942:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001946:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001948:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800194c:	4313      	orrs	r3, r2
 800194e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	f241 0318 	movw	r3, #4120	; 0x1018
 800195a:	4413      	add	r3, r2
 800195c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001960:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	f241 0318 	movw	r3, #4120	; 0x1018
 800196a:	4413      	add	r3, r2
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fb16 	bl	8000fa4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001980:	4413      	add	r3, r2
 8001982:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001986:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800198a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800198c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001990:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001994:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001998:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800199e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80019a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80019a2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff faef 	bl	8000fa4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019d2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d10d      	bne.n	80019f8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f241 031c 	movw	r3, #4124	; 0x101c
 80019e4:	4413      	add	r3, r2
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6811      	ldr	r1, [r2, #0]
 80019ec:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <ETH_MACDMAConfig+0x390>)
 80019ee:	431a      	orrs	r2, r3
 80019f0:	f241 031c 	movw	r3, #4124	; 0x101c
 80019f4:	440b      	add	r3, r1
 80019f6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2100      	movs	r1, #0
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f80b 	bl	8001a1c <ETH_MACAddressConfig>
}
 8001a06:	bf00      	nop
 8001a08:	37c0      	adds	r7, #192	; 0xc0
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	ff20810f 	.word	0xff20810f
 8001a14:	f8de3f23 	.word	0xf8de3f23
 8001a18:	00010040 	.word	0x00010040

08001a1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3305      	adds	r3, #5
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	3204      	adds	r2, #4
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <ETH_MACAddressConfig+0x68>)
 8001a3e:	4413      	add	r3, r2
 8001a40:	461a      	mov	r2, r3
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3303      	adds	r3, #3
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	061a      	lsls	r2, r3, #24
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3302      	adds	r3, #2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	021b      	lsls	r3, r3, #8
 8001a60:	4313      	orrs	r3, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <ETH_MACAddressConfig+0x6c>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	461a      	mov	r2, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40028040 	.word	0x40028040
 8001a88:	40028044 	.word	0x40028044

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e175      	b.n	8001d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f040 8164 	bne.w	8001d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d00b      	beq.n	8001aea <HAL_GPIO_Init+0x5e>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ade:	2b11      	cmp	r3, #17
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x100>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d123      	bne.n	8001bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	69b9      	ldr	r1, [r7, #24]
 8001bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	2203      	movs	r2, #3
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0203 	and.w	r2, r3, #3
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80be 	beq.w	8001d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b65      	ldr	r3, [pc, #404]	; (8001dac <HAL_GPIO_Init+0x320>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	4a64      	ldr	r2, [pc, #400]	; (8001dac <HAL_GPIO_Init+0x320>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	; 0x44
 8001c22:	4b62      	ldr	r3, [pc, #392]	; (8001dac <HAL_GPIO_Init+0x320>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c2e:	4a60      	ldr	r2, [pc, #384]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a57      	ldr	r2, [pc, #348]	; (8001db4 <HAL_GPIO_Init+0x328>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d037      	beq.n	8001cca <HAL_GPIO_Init+0x23e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a56      	ldr	r2, [pc, #344]	; (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d031      	beq.n	8001cc6 <HAL_GPIO_Init+0x23a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a55      	ldr	r2, [pc, #340]	; (8001dbc <HAL_GPIO_Init+0x330>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d02b      	beq.n	8001cc2 <HAL_GPIO_Init+0x236>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a54      	ldr	r2, [pc, #336]	; (8001dc0 <HAL_GPIO_Init+0x334>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d025      	beq.n	8001cbe <HAL_GPIO_Init+0x232>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a53      	ldr	r2, [pc, #332]	; (8001dc4 <HAL_GPIO_Init+0x338>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d01f      	beq.n	8001cba <HAL_GPIO_Init+0x22e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	; (8001dc8 <HAL_GPIO_Init+0x33c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d019      	beq.n	8001cb6 <HAL_GPIO_Init+0x22a>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a51      	ldr	r2, [pc, #324]	; (8001dcc <HAL_GPIO_Init+0x340>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a50      	ldr	r2, [pc, #320]	; (8001dd0 <HAL_GPIO_Init+0x344>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4f      	ldr	r2, [pc, #316]	; (8001dd4 <HAL_GPIO_Init+0x348>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d007      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_GPIO_Init+0x34c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d101      	bne.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001ca2:	2309      	movs	r3, #9
 8001ca4:	e012      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001ca6:	230a      	movs	r3, #10
 8001ca8:	e010      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001caa:	2308      	movs	r3, #8
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x240>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cdc:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_GPIO_Init+0x324>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cea:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d0e:	4a33      	ldr	r2, [pc, #204]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d38:	4a28      	ldr	r2, [pc, #160]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a1e      	ldr	r2, [pc, #120]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_GPIO_Init+0x350>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae86 	bls.w	8001aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	3724      	adds	r7, #36	; 0x24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40021c00 	.word	0x40021c00
 8001dd4:	40022000 	.word	0x40022000
 8001dd8:	40022400 	.word	0x40022400
 8001ddc:	40013c00 	.word	0x40013c00

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	619a      	str	r2, [r3, #24]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	041a      	lsls	r2, r3, #16
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e07f      	b.n	8001f5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe feea 	bl	8000c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2224      	movs	r2, #36	; 0x24
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	e006      	b.n	8001ed0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ece:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d104      	bne.n	8001ee2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6859      	ldr	r1, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_I2C_Init+0x11c>)
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	021a      	lsls	r2, r3, #8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69d9      	ldr	r1, [r3, #28]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	02008000 	.word	0x02008000

08001f68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	461a      	mov	r2, r3
 8001f74:	460b      	mov	r3, r1
 8001f76:	817b      	strh	r3, [r7, #10]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 80da 	bne.w	800213e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x30>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0d3      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fa0:	f7fe fff4 	bl	8000f8c <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2319      	movs	r3, #25
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa0e 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0be      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2221      	movs	r2, #33	; 0x21
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2210      	movs	r2, #16
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	893a      	ldrh	r2, [r7, #8]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d90e      	bls.n	8002012 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	4b51      	ldr	r3, [pc, #324]	; (8002148 <HAL_I2C_Master_Transmit+0x1e0>)
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 fb70 	bl	80026f0 <I2C_TransferConfig>
 8002010:	e06c      	b.n	80020ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8979      	ldrh	r1, [r7, #10]
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_I2C_Master_Transmit+0x1e0>)
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fb5f 	bl	80026f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002032:	e05b      	b.n	80020ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	6a39      	ldr	r1, [r7, #32]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fa0b 	bl	8002454 <I2C_WaitOnTXISFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e07b      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	781a      	ldrb	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d034      	beq.n	80020ec <HAL_I2C_Master_Transmit+0x184>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	2b00      	cmp	r3, #0
 8002088:	d130      	bne.n	80020ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	2200      	movs	r2, #0
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 f99d 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04d      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	2bff      	cmp	r3, #255	; 0xff
 80020ac:	d90e      	bls.n	80020cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	22ff      	movs	r2, #255	; 0xff
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	8979      	ldrh	r1, [r7, #10]
 80020bc:	2300      	movs	r3, #0
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fb13 	bl	80026f0 <I2C_TransferConfig>
 80020ca:	e00f      	b.n	80020ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	8979      	ldrh	r1, [r7, #10]
 80020de:	2300      	movs	r3, #0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 fb02 	bl	80026f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d19e      	bne.n	8002034 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	6a39      	ldr	r1, [r7, #32]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f9ea 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e01a      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2220      	movs	r2, #32
 8002110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_I2C_Master_Transmit+0x1e4>)
 800211e:	400b      	ands	r3, r1
 8002120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800213e:	2302      	movs	r3, #2
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	80002000 	.word	0x80002000
 800214c:	fe00e800 	.word	0xfe00e800

08002150 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
 8002160:	4613      	mov	r3, r2
 8002162:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	f040 80db 	bne.w	8002328 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_Master_Receive+0x30>
 800217c:	2302      	movs	r3, #2
 800217e:	e0d4      	b.n	800232a <HAL_I2C_Master_Receive+0x1da>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002188:	f7fe ff00 	bl	8000f8c <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2319      	movs	r3, #25
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f91a 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0bf      	b.n	800232a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2222      	movs	r2, #34	; 0x22
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2210      	movs	r2, #16
 80021b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	893a      	ldrh	r2, [r7, #8]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d90e      	bls.n	80021fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	4b52      	ldr	r3, [pc, #328]	; (8002334 <HAL_I2C_Master_Receive+0x1e4>)
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fa7c 	bl	80026f0 <I2C_TransferConfig>
 80021f8:	e06d      	b.n	80022d6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	b2da      	uxtb	r2, r3
 800220a:	8979      	ldrh	r1, [r7, #10]
 800220c:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_I2C_Master_Receive+0x1e4>)
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fa6b 	bl	80026f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800221a:	e05c      	b.n	80022d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6a39      	ldr	r1, [r7, #32]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f993 	bl	800254c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e07c      	b.n	800232a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d034      	beq.n	80022d6 <HAL_I2C_Master_Receive+0x186>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	d130      	bne.n	80022d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2200      	movs	r2, #0
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8a8 	bl	80023d4 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e04d      	b.n	800232a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	2bff      	cmp	r3, #255	; 0xff
 8002296:	d90e      	bls.n	80022b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	8979      	ldrh	r1, [r7, #10]
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa1e 	bl	80026f0 <I2C_TransferConfig>
 80022b4:	e00f      	b.n	80022d6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fa0d 	bl	80026f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d19d      	bne.n	800221c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	6a39      	ldr	r1, [r7, #32]
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f8f5 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e01a      	b.n	800232a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6859      	ldr	r1, [r3, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_I2C_Master_Receive+0x1e8>)
 8002308:	400b      	ands	r3, r1
 800230a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2220      	movs	r2, #32
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	e000      	b.n	800232a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002328:	2302      	movs	r3, #2
  }
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	80002400 	.word	0x80002400
 8002338:	fe00e800 	.word	0xfe00e800

0800233c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800234a:	b2db      	uxtb	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002366:	b2db      	uxtb	r3, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d103      	bne.n	80023aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d007      	beq.n	80023c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	619a      	str	r2, [r3, #24]
  }
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e4:	e022      	b.n	800242c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d01e      	beq.n	800242c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ee:	f7fe fdcd 	bl	8000f8c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d302      	bcc.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d113      	bne.n	800242c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e00f      	b.n	800244c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	429a      	cmp	r2, r3
 8002448:	d0cd      	beq.n	80023e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002460:	e02c      	b.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8dc 	bl	8002624 <I2C_IsAcknowledgeFailed>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e02a      	b.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d01e      	beq.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	f7fe fd85 	bl	8000f8c <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	d302      	bcc.n	8002494 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d113      	bne.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f043 0220 	orr.w	r2, r3, #32
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e007      	b.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d1cb      	bne.n	8002462 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	e028      	b.n	8002534 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f89c 	bl	8002624 <I2C_IsAcknowledgeFailed>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e026      	b.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7fe fd49 	bl	8000f8c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d113      	bne.n	8002534 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f043 0220 	orr.w	r2, r3, #32
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e007      	b.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b20      	cmp	r3, #32
 8002540:	d1cf      	bne.n	80024e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002558:	e055      	b.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f860 	bl	8002624 <I2C_IsAcknowledgeFailed>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e053      	b.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b20      	cmp	r3, #32
 800257a:	d129      	bne.n	80025d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b04      	cmp	r3, #4
 8002588:	d105      	bne.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e03f      	b.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2220      	movs	r2, #32
 800259c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80025aa:	400b      	ands	r3, r1
 80025ac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e022      	b.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d0:	f7fe fcdc 	bl	8000f8c <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d302      	bcc.n	80025e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e007      	b.n	8002616 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b04      	cmp	r3, #4
 8002612:	d1a2      	bne.n	800255a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	fe00e800 	.word	0xfe00e800

08002624 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	2b10      	cmp	r3, #16
 800263c:	d151      	bne.n	80026e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800263e:	e022      	b.n	8002686 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d01e      	beq.n	8002686 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002648:	f7fe fca0 	bl	8000f8c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	d302      	bcc.n	800265e <I2C_IsAcknowledgeFailed+0x3a>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d113      	bne.n	8002686 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f043 0220 	orr.w	r2, r3, #32
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e02e      	b.n	80026e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b20      	cmp	r3, #32
 8002692:	d1d5      	bne.n	8002640 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2210      	movs	r2, #16
 800269a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2220      	movs	r2, #32
 80026a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7ff fe71 	bl	800238c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <I2C_IsAcknowledgeFailed+0xc8>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fe00e800 	.word	0xfe00e800

080026f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	817b      	strh	r3, [r7, #10]
 80026fe:	4613      	mov	r3, r2
 8002700:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	0d5b      	lsrs	r3, r3, #21
 800270c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <I2C_TransferConfig+0x58>)
 8002712:	430b      	orrs	r3, r1
 8002714:	43db      	mvns	r3, r3
 8002716:	ea02 0103 	and.w	r1, r2, r3
 800271a:	897b      	ldrh	r3, [r7, #10]
 800271c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002720:	7a7b      	ldrb	r3, [r7, #9]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	431a      	orrs	r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	03ff63ff 	.word	0x03ff63ff

0800274c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b20      	cmp	r3, #32
 8002760:	d138      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800276c:	2302      	movs	r3, #2
 800276e:	e032      	b.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	; 0x24
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800279e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6819      	ldr	r1, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e000      	b.n	80027d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d139      	bne.n	800286c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002802:	2302      	movs	r3, #2
 8002804:	e033      	b.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2224      	movs	r2, #36	; 0x24
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	021b      	lsls	r3, r3, #8
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0201 	orr.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800287a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287c:	b08f      	sub	sp, #60	; 0x3c
 800287e:	af0a      	add	r7, sp, #40	; 0x28
 8002880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e116      	b.n	8002aba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fa56 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2203      	movs	r2, #3
 80028b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 fefc 	bl	80046c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	687e      	ldr	r6, [r7, #4]
 80028d8:	466d      	mov	r5, sp
 80028da:	f106 0410 	add.w	r4, r6, #16
 80028de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ee:	1d33      	adds	r3, r6, #4
 80028f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f2:	6838      	ldr	r0, [r7, #0]
 80028f4:	f001 fe90 	bl	8004618 <USB_CoreInit>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0d7      	b.n	8002aba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f001 feea 	bl	80046ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002916:	2300      	movs	r3, #0
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e04a      	b.n	80029b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	333d      	adds	r3, #61	; 0x3d
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	333c      	adds	r3, #60	; 0x3c
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	b298      	uxth	r0, r3
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3342      	adds	r3, #66	; 0x42
 8002958:	4602      	mov	r2, r0
 800295a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	333f      	adds	r3, #63	; 0x3f
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3344      	adds	r3, #68	; 0x44
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3348      	adds	r3, #72	; 0x48
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	3350      	adds	r3, #80	; 0x50
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	3301      	adds	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d3af      	bcc.n	800291c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029bc:	2300      	movs	r3, #0
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e044      	b.n	8002a4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a30:	7bfa      	ldrb	r2, [r7, #15]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d3b5      	bcc.n	80029c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	687e      	ldr	r6, [r7, #4]
 8002a5e:	466d      	mov	r5, sp
 8002a60:	f106 0410 	add.w	r4, r6, #16
 8002a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a74:	1d33      	adds	r3, r6, #4
 8002a76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a78:	6838      	ldr	r0, [r7, #0]
 8002a7a:	f001 fe61 	bl	8004740 <USB_DevInit>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e014      	b.n	8002aba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f80b 	bl	8002ac4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 f813 	bl	8004ade <USB_DevDisconnect>

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ac4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_PCDEx_ActivateLPM+0x44>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	10000003 	.word	0x10000003

08002b0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000

08002b2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	; 0x40
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5a:	f7fe fa17 	bl	8000f8c <HAL_GetTick>
 8002b5e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b60:	e009      	b.n	8002b76 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b62:	f7fe fa13 	bl	8000f8c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b70:	d901      	bls.n	8002b76 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e022      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b82:	d1ee      	bne.n	8002b62 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b90:	f7fe f9fc 	bl	8000f8c <HAL_GetTick>
 8002b94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b96:	e009      	b.n	8002bac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b98:	f7fe f9f8 	bl	8000f8c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba6:	d901      	bls.n	8002bac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e007      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb8:	d1ee      	bne.n	8002b98 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40007000 	.word	0x40007000

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e29b      	b.n	800311a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8087 	beq.w	8002cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf0:	4b96      	ldr	r3, [pc, #600]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d00c      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfc:	4b93      	ldr	r3, [pc, #588]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d112      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62>
 8002c08:	4b90      	ldr	r3, [pc, #576]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x130>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d168      	bne.n	8002cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e275      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x7a>
 8002c38:	4b84      	ldr	r3, [pc, #528]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a83      	ldr	r2, [pc, #524]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e02e      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd8>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x9c>
 8002c4e:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7e      	ldr	r2, [pc, #504]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7b      	ldr	r2, [pc, #492]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0xc0>
 8002c72:	4b76      	ldr	r3, [pc, #472]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a75      	ldr	r2, [pc, #468]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b73      	ldr	r3, [pc, #460]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a72      	ldr	r2, [pc, #456]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xd8>
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b6c      	ldr	r3, [pc, #432]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a6b      	ldr	r2, [pc, #428]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe f96e 	bl	8000f8c <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe f96a 	bl	8000f8c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e229      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe8>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f95a 	bl	8000f8c <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f956 	bl	8000f8c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e215      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x110>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d069      	beq.n	8002dde <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b4d      	ldr	r3, [pc, #308]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x190>
 8002d22:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1e9      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	493d      	ldr	r1, [pc, #244]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e040      	b.n	8002dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a38      	ldr	r2, [pc, #224]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe f90c 	bl	8000f8c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d78:	f7fe f908 	bl	8000f8c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e1c7      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4929      	ldr	r1, [pc, #164]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
 8002daa:	e018      	b.n	8002dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dac:	4b27      	ldr	r3, [pc, #156]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a26      	ldr	r2, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe f8e8 	bl	8000f8c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fe f8e4 	bl	8000f8c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1a3      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d038      	beq.n	8002e5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d019      	beq.n	8002e26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b16      	ldr	r3, [pc, #88]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df6:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f8c5 	bl	8000f8c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe f8c1 	bl	8000f8c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e180      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x23a>
 8002e24:	e01a      	b.n	8002e5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <HAL_RCC_OscConfig+0x280>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe f8ab 	bl	8000f8c <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3a:	f7fe f8a7 	bl	8000f8c <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d903      	bls.n	8002e50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e166      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
 8002e4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b92      	ldr	r3, [pc, #584]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ee      	bne.n	8002e3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80a4 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b8c      	ldr	r3, [pc, #560]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a88      	ldr	r2, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b86      	ldr	r3, [pc, #536]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	4b83      	ldr	r3, [pc, #524]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e9e:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a7f      	ldr	r2, [pc, #508]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe f86f 	bl	8000f8c <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7fe f86b 	bl	8000f8c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e12a      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec4:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x4d4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x31a>
 8002ed8:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a6f      	ldr	r2, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e02d      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x33c>
 8002eee:	4b6b      	ldr	r3, [pc, #428]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8002efa:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	e01c      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x35e>
 8002f10:	4b62      	ldr	r3, [pc, #392]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a61      	ldr	r2, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a5e      	ldr	r2, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x376>
 8002f2a:	4b5c      	ldr	r3, [pc, #368]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a5b      	ldr	r2, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f81f 	bl	8000f8c <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe f81b 	bl	8000f8c <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0d8      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCC_OscConfig+0x386>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f76:	f7fe f809 	bl	8000f8c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe f805 	bl	8000f8c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0c2      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a3c      	ldr	r2, [pc, #240]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80ae 	beq.w	8003118 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b37      	ldr	r3, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d06d      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d14b      	bne.n	8003068 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a31      	ldr	r2, [pc, #196]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fd ffd6 	bl	8000f8c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd ffd2 	bl	8000f8c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e091      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	3b01      	subs	r3, #1
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	071b      	lsls	r3, r3, #28
 800302e:	491b      	ldr	r1, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a18      	ldr	r2, [pc, #96]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 800303a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fd ffa4 	bl	8000f8c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7fd ffa0 	bl	8000f8c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e05f      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x47c>
 8003066:	e057      	b.n	8003118 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0b      	ldr	r2, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 800306e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fd ff8a 	bl	8000f8c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fd ff86 	bl	8000f8c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e045      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308e:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_RCC_OscConfig+0x4d0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x4b0>
 800309a:	e03d      	b.n	8003118 <HAL_RCC_OscConfig+0x54c>
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030a4:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_RCC_OscConfig+0x558>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d030      	beq.n	8003114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030bc:	429a      	cmp	r2, r3
 80030be:	d129      	bne.n	8003114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d122      	bne.n	8003114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d4:	4013      	ands	r3, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030dc:	4293      	cmp	r3, r2
 80030de:	d119      	bne.n	8003114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	3b01      	subs	r3, #1
 80030ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d10f      	bne.n	8003114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d107      	bne.n	8003114 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e000      	b.n	800311a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800

08003128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0d0      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b6a      	ldr	r3, [pc, #424]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d910      	bls.n	8003170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b67      	ldr	r3, [pc, #412]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	4965      	ldr	r1, [pc, #404]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b8      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003188:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003192:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ac:	4b50      	ldr	r3, [pc, #320]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	494d      	ldr	r1, [pc, #308]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d040      	beq.n	800324c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d107      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d115      	bne.n	800320a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e07f      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e073      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b3d      	ldr	r3, [pc, #244]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e06b      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f023 0203 	bic.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4936      	ldr	r1, [pc, #216]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800321c:	f7fd feb6 	bl	8000f8c <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003222:	e00a      	b.n	800323a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003224:	f7fd feb2 	bl	8000f8c <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e053      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 020c 	and.w	r2, r3, #12
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d1eb      	bne.n	8003224 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800324c:	4b27      	ldr	r3, [pc, #156]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d210      	bcs.n	800327c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b24      	ldr	r3, [pc, #144]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 020f 	bic.w	r2, r3, #15
 8003262:	4922      	ldr	r1, [pc, #136]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b20      	ldr	r3, [pc, #128]	; (80032ec <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e032      	b.n	80032e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d008      	beq.n	800329a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4916      	ldr	r1, [pc, #88]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032ba:	f000 f821 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80032be:	4601      	mov	r1, r0
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_ClockConfig+0x1c8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	091b      	lsrs	r3, r3, #4
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <HAL_RCC_ClockConfig+0x1cc>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	fa21 f303 	lsr.w	r3, r1, r3
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1d0>)
 80032d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1d4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fe12 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00
 80032f0:	40023800 	.word	0x40023800
 80032f4:	08004be8 	.word	0x08004be8
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000004 	.word	0x20000004

08003300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	2300      	movs	r3, #0
 8003310:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003316:	4b63      	ldr	r3, [pc, #396]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d007      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x32>
 8003322:	2b08      	cmp	r3, #8
 8003324:	d008      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x38>
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 80b4 	bne.w	8003494 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800332c:	4b5e      	ldr	r3, [pc, #376]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800332e:	60bb      	str	r3, [r7, #8]
      break;
 8003330:	e0b3      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003332:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003334:	60bb      	str	r3, [r7, #8]
      break;
 8003336:	e0b0      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003338:	4b5a      	ldr	r3, [pc, #360]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003342:	4b58      	ldr	r3, [pc, #352]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04a      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334e:	4b55      	ldr	r3, [pc, #340]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	f04f 0400 	mov.w	r4, #0
 8003358:	f240 11ff 	movw	r1, #511	; 0x1ff
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	ea03 0501 	and.w	r5, r3, r1
 8003364:	ea04 0602 	and.w	r6, r4, r2
 8003368:	4629      	mov	r1, r5
 800336a:	4632      	mov	r2, r6
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	0154      	lsls	r4, r2, #5
 8003376:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800337a:	014b      	lsls	r3, r1, #5
 800337c:	4619      	mov	r1, r3
 800337e:	4622      	mov	r2, r4
 8003380:	1b49      	subs	r1, r1, r5
 8003382:	eb62 0206 	sbc.w	r2, r2, r6
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	0194      	lsls	r4, r2, #6
 8003390:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003394:	018b      	lsls	r3, r1, #6
 8003396:	1a5b      	subs	r3, r3, r1
 8003398:	eb64 0402 	sbc.w	r4, r4, r2
 800339c:	f04f 0100 	mov.w	r1, #0
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	00e2      	lsls	r2, r4, #3
 80033a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033aa:	00d9      	lsls	r1, r3, #3
 80033ac:	460b      	mov	r3, r1
 80033ae:	4614      	mov	r4, r2
 80033b0:	195b      	adds	r3, r3, r5
 80033b2:	eb44 0406 	adc.w	r4, r4, r6
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	0262      	lsls	r2, r4, #9
 80033c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033c4:	0259      	lsls	r1, r3, #9
 80033c6:	460b      	mov	r3, r1
 80033c8:	4614      	mov	r4, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	4621      	mov	r1, r4
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f04f 0400 	mov.w	r4, #0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4623      	mov	r3, r4
 80033d8:	f7fc ff2e 	bl	8000238 <__aeabi_uldivmod>
 80033dc:	4603      	mov	r3, r0
 80033de:	460c      	mov	r4, r1
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e049      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e4:	4b2f      	ldr	r3, [pc, #188]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	099b      	lsrs	r3, r3, #6
 80033ea:	f04f 0400 	mov.w	r4, #0
 80033ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	ea03 0501 	and.w	r5, r3, r1
 80033fa:	ea04 0602 	and.w	r6, r4, r2
 80033fe:	4629      	mov	r1, r5
 8003400:	4632      	mov	r2, r6
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	f04f 0400 	mov.w	r4, #0
 800340a:	0154      	lsls	r4, r2, #5
 800340c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003410:	014b      	lsls	r3, r1, #5
 8003412:	4619      	mov	r1, r3
 8003414:	4622      	mov	r2, r4
 8003416:	1b49      	subs	r1, r1, r5
 8003418:	eb62 0206 	sbc.w	r2, r2, r6
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	f04f 0400 	mov.w	r4, #0
 8003424:	0194      	lsls	r4, r2, #6
 8003426:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800342a:	018b      	lsls	r3, r1, #6
 800342c:	1a5b      	subs	r3, r3, r1
 800342e:	eb64 0402 	sbc.w	r4, r4, r2
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003440:	00d9      	lsls	r1, r3, #3
 8003442:	460b      	mov	r3, r1
 8003444:	4614      	mov	r4, r2
 8003446:	195b      	adds	r3, r3, r5
 8003448:	eb44 0406 	adc.w	r4, r4, r6
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	02a2      	lsls	r2, r4, #10
 8003456:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800345a:	0299      	lsls	r1, r3, #10
 800345c:	460b      	mov	r3, r1
 800345e:	4614      	mov	r4, r2
 8003460:	4618      	mov	r0, r3
 8003462:	4621      	mov	r1, r4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f04f 0400 	mov.w	r4, #0
 800346a:	461a      	mov	r2, r3
 800346c:	4623      	mov	r3, r4
 800346e:	f7fc fee3 	bl	8000238 <__aeabi_uldivmod>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	0c1b      	lsrs	r3, r3, #16
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	60bb      	str	r3, [r7, #8]
      break;
 8003492:	e002      	b.n	800349a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003496:	60bb      	str	r3, [r7, #8]
      break;
 8003498:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349a:	68bb      	ldr	r3, [r7, #8]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	00f42400 	.word	0x00f42400
 80034ac:	007a1200 	.word	0x007a1200

080034b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034b6:	681b      	ldr	r3, [r3, #0]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034cc:	f7ff fff0 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034d0:	4601      	mov	r1, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0a9b      	lsrs	r3, r3, #10
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034de:	5cd3      	ldrb	r3, [r2, r3]
 80034e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08004bf8 	.word	0x08004bf8

080034f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f4:	f7ff ffdc 	bl	80034b0 <HAL_RCC_GetHCLKFreq>
 80034f8:	4601      	mov	r1, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0b5b      	lsrs	r3, r3, #13
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4a03      	ldr	r2, [pc, #12]	; (8003514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	fa21 f303 	lsr.w	r3, r1, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800
 8003514:	08004bf8 	.word	0x08004bf8

08003518 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d012      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003540:	4b69      	ldr	r3, [pc, #420]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a68      	ldr	r2, [pc, #416]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003546:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800354a:	6093      	str	r3, [r2, #8]
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003554:	4964      	ldr	r1, [pc, #400]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d017      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003572:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	4959      	ldr	r1, [pc, #356]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d017      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	494a      	ldr	r1, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035cc:	d101      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80035da:	2301      	movs	r3, #1
 80035dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 808b 	beq.w	8003712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a39      	ldr	r2, [pc, #228]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003614:	4b35      	ldr	r3, [pc, #212]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a34      	ldr	r2, [pc, #208]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800361a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fd fcb4 	bl	8000f8c <HAL_GetTick>
 8003624:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7fd fcb0 	bl	8000f8c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e38d      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003646:	4b28      	ldr	r3, [pc, #160]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d035      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	429a      	cmp	r2, r3
 8003662:	d02e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003664:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366e:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d114      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fc78 	bl	8000f8c <HAL_GetTick>
 800369c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fd fc74 	bl	8000f8c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e34f      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0ee      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	d111      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80036de:	400b      	ands	r3, r1
 80036e0:	4901      	ldr	r1, [pc, #4]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
 80036e6:	e00b      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40007000 	.word	0x40007000
 80036f0:	0ffffcff 	.word	0x0ffffcff
 80036f4:	4bb3      	ldr	r3, [pc, #716]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4ab2      	ldr	r2, [pc, #712]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036fa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	4bb0      	ldr	r3, [pc, #704]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	49ad      	ldr	r1, [pc, #692]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370e:	4313      	orrs	r3, r2
 8003710:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800371e:	4ba9      	ldr	r3, [pc, #676]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	4aa7      	ldr	r2, [pc, #668]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800372e:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003730:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	49a2      	ldr	r1, [pc, #648]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374c:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800375a:	499a      	ldr	r1, [pc, #616]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800376e:	4b95      	ldr	r3, [pc, #596]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800377c:	4991      	ldr	r1, [pc, #580]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003790:	4b8c      	ldr	r3, [pc, #560]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	4989      	ldr	r1, [pc, #548]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037b2:	4b84      	ldr	r3, [pc, #528]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4980      	ldr	r1, [pc, #512]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037d4:	4b7b      	ldr	r3, [pc, #492]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f023 0203 	bic.w	r2, r3, #3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e2:	4978      	ldr	r1, [pc, #480]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037f6:	4b73      	ldr	r3, [pc, #460]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f023 020c 	bic.w	r2, r3, #12
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	496f      	ldr	r1, [pc, #444]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003818:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	4967      	ldr	r1, [pc, #412]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800383a:	4b62      	ldr	r3, [pc, #392]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003848:	495e      	ldr	r1, [pc, #376]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	4956      	ldr	r1, [pc, #344]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800387e:	4b51      	ldr	r3, [pc, #324]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038a0:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	4945      	ldr	r1, [pc, #276]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038c2:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	493c      	ldr	r1, [pc, #240]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038e4:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038f2:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d011      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003906:	4b2f      	ldr	r3, [pc, #188]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003914:	492b      	ldr	r1, [pc, #172]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003924:	d101      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003926:	2301      	movs	r3, #1
 8003928:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003936:	2301      	movs	r3, #1
 8003938:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003946:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	491b      	ldr	r1, [pc, #108]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003968:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003978:	4912      	ldr	r1, [pc, #72]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399c:	4909      	ldr	r1, [pc, #36]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c0:	e002      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800
 80039c8:	4985      	ldr	r1, [pc, #532]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80039dc:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ec:	497c      	ldr	r1, [pc, #496]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d005      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a02:	f040 80d6 	bne.w	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a06:	4b76      	ldr	r3, [pc, #472]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a12:	f7fd fabb 	bl	8000f8c <HAL_GetTick>
 8003a16:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a18:	e008      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a1a:	f7fd fab7 	bl	8000f8c <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e194      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a2c:	4b6c      	ldr	r3, [pc, #432]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d021      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11d      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a4c:	4b64      	ldr	r3, [pc, #400]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a52:	0c1b      	lsrs	r3, r3, #16
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a5a:	4b61      	ldr	r3, [pc, #388]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a60:	0e1b      	lsrs	r3, r3, #24
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	019a      	lsls	r2, r3, #6
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	041b      	lsls	r3, r3, #16
 8003a72:	431a      	orrs	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	061b      	lsls	r3, r3, #24
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	071b      	lsls	r3, r3, #28
 8003a80:	4957      	ldr	r1, [pc, #348]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9c:	d00a      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ab4:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	0f1b      	lsrs	r3, r3, #28
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	019a      	lsls	r2, r3, #6
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	071b      	lsls	r3, r3, #28
 8003ae8:	493d      	ldr	r1, [pc, #244]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003af0:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003af6:	f023 021f 	bic.w	r2, r3, #31
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	3b01      	subs	r3, #1
 8003b00:	4937      	ldr	r1, [pc, #220]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01d      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b14:	4b32      	ldr	r3, [pc, #200]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b1a:	0e1b      	lsrs	r3, r3, #24
 8003b1c:	f003 030f 	and.w	r3, r3, #15
 8003b20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b22:	4b2f      	ldr	r3, [pc, #188]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b28:	0f1b      	lsrs	r3, r3, #28
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	019a      	lsls	r2, r3, #6
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	041b      	lsls	r3, r3, #16
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	061b      	lsls	r3, r3, #24
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	071b      	lsls	r3, r3, #28
 8003b48:	4925      	ldr	r1, [pc, #148]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d011      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	019a      	lsls	r2, r3, #6
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	4919      	ldr	r1, [pc, #100]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8c:	f7fd f9fe 	bl	8000f8c <HAL_GetTick>
 8003b90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b94:	f7fd f9fa 	bl	8000f8c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b64      	cmp	r3, #100	; 0x64
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0d7      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	f040 80cd 	bne.w	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc6:	f7fd f9e1 	bl	8000f8c <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bcc:	e00a      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bce:	f7fd f9dd 	bl	8000f8c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b64      	cmp	r3, #100	; 0x64
 8003bda:	d903      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e0ba      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003be0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003be4:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf0:	d0ed      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d02e      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d12a      	bne.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c28:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	0f1b      	lsrs	r3, r3, #28
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	019a      	lsls	r2, r3, #6
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	061b      	lsls	r3, r3, #24
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	071b      	lsls	r3, r3, #28
 8003c4e:	4944      	ldr	r1, [pc, #272]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c56:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	493d      	ldr	r1, [pc, #244]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d022      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c84:	d11d      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c86:	4b36      	ldr	r3, [pc, #216]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	0e1b      	lsrs	r3, r3, #24
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9a:	0f1b      	lsrs	r3, r3, #28
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	019a      	lsls	r2, r3, #6
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	041b      	lsls	r3, r3, #16
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	4929      	ldr	r1, [pc, #164]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d028      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cce:	4b24      	ldr	r3, [pc, #144]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	0e1b      	lsrs	r3, r3, #24
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003cdc:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce2:	0c1b      	lsrs	r3, r3, #16
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	019a      	lsls	r2, r3, #6
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	071b      	lsls	r3, r3, #28
 8003d02:	4917      	ldr	r1, [pc, #92]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	4911      	ldr	r1, [pc, #68]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2c:	f7fd f92e 	bl	8000f8c <HAL_GetTick>
 8003d30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d34:	f7fd f92a 	bl	8000f8c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e007      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d52:	d1ef      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3720      	adds	r7, #32
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40023800 	.word	0x40023800

08003d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e040      	b.n	8003df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fc ffa2 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0201 	bic.w	r2, r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f82c 	bl	8003e00 <UART_SetConfig>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e022      	b.n	8003df8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 faca 	bl	8004354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0201 	orr.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fb51 	bl	8004498 <UART_CheckIdleState>
 8003df6:	4603      	mov	r3, r0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4bb1      	ldr	r3, [pc, #708]	; (80040f4 <UART_SetConfig+0x2f4>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	6939      	ldr	r1, [r7, #16]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a9f      	ldr	r2, [pc, #636]	; (80040f8 <UART_SetConfig+0x2f8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d121      	bne.n	8003ec4 <UART_SetConfig+0xc4>
 8003e80:	4b9e      	ldr	r3, [pc, #632]	; (80040fc <UART_SetConfig+0x2fc>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f003 0303 	and.w	r3, r3, #3
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d816      	bhi.n	8003ebc <UART_SetConfig+0xbc>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x94>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ea5 	.word	0x08003ea5
 8003e98:	08003eb1 	.word	0x08003eb1
 8003e9c:	08003eab 	.word	0x08003eab
 8003ea0:	08003eb7 	.word	0x08003eb7
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e151      	b.n	800414e <UART_SetConfig+0x34e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e14e      	b.n	800414e <UART_SetConfig+0x34e>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e14b      	b.n	800414e <UART_SetConfig+0x34e>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e148      	b.n	800414e <UART_SetConfig+0x34e>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	bf00      	nop
 8003ec2:	e144      	b.n	800414e <UART_SetConfig+0x34e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a8d      	ldr	r2, [pc, #564]	; (8004100 <UART_SetConfig+0x300>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d134      	bne.n	8003f38 <UART_SetConfig+0x138>
 8003ece:	4b8b      	ldr	r3, [pc, #556]	; (80040fc <UART_SetConfig+0x2fc>)
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d829      	bhi.n	8003f30 <UART_SetConfig+0x130>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <UART_SetConfig+0xe4>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f31 	.word	0x08003f31
 8003eec:	08003f31 	.word	0x08003f31
 8003ef0:	08003f31 	.word	0x08003f31
 8003ef4:	08003f25 	.word	0x08003f25
 8003ef8:	08003f31 	.word	0x08003f31
 8003efc:	08003f31 	.word	0x08003f31
 8003f00:	08003f31 	.word	0x08003f31
 8003f04:	08003f1f 	.word	0x08003f1f
 8003f08:	08003f31 	.word	0x08003f31
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f31 	.word	0x08003f31
 8003f14:	08003f2b 	.word	0x08003f2b
 8003f18:	2300      	movs	r3, #0
 8003f1a:	77fb      	strb	r3, [r7, #31]
 8003f1c:	e117      	b.n	800414e <UART_SetConfig+0x34e>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	77fb      	strb	r3, [r7, #31]
 8003f22:	e114      	b.n	800414e <UART_SetConfig+0x34e>
 8003f24:	2304      	movs	r3, #4
 8003f26:	77fb      	strb	r3, [r7, #31]
 8003f28:	e111      	b.n	800414e <UART_SetConfig+0x34e>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e10e      	b.n	800414e <UART_SetConfig+0x34e>
 8003f30:	2310      	movs	r3, #16
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	bf00      	nop
 8003f36:	e10a      	b.n	800414e <UART_SetConfig+0x34e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a71      	ldr	r2, [pc, #452]	; (8004104 <UART_SetConfig+0x304>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d120      	bne.n	8003f84 <UART_SetConfig+0x184>
 8003f42:	4b6e      	ldr	r3, [pc, #440]	; (80040fc <UART_SetConfig+0x2fc>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f4c:	2b10      	cmp	r3, #16
 8003f4e:	d00f      	beq.n	8003f70 <UART_SetConfig+0x170>
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d802      	bhi.n	8003f5a <UART_SetConfig+0x15a>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <UART_SetConfig+0x164>
 8003f58:	e010      	b.n	8003f7c <UART_SetConfig+0x17c>
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d005      	beq.n	8003f6a <UART_SetConfig+0x16a>
 8003f5e:	2b30      	cmp	r3, #48	; 0x30
 8003f60:	d009      	beq.n	8003f76 <UART_SetConfig+0x176>
 8003f62:	e00b      	b.n	8003f7c <UART_SetConfig+0x17c>
 8003f64:	2300      	movs	r3, #0
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e0f1      	b.n	800414e <UART_SetConfig+0x34e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	77fb      	strb	r3, [r7, #31]
 8003f6e:	e0ee      	b.n	800414e <UART_SetConfig+0x34e>
 8003f70:	2304      	movs	r3, #4
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e0eb      	b.n	800414e <UART_SetConfig+0x34e>
 8003f76:	2308      	movs	r3, #8
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e0e8      	b.n	800414e <UART_SetConfig+0x34e>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	bf00      	nop
 8003f82:	e0e4      	b.n	800414e <UART_SetConfig+0x34e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a5f      	ldr	r2, [pc, #380]	; (8004108 <UART_SetConfig+0x308>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d120      	bne.n	8003fd0 <UART_SetConfig+0x1d0>
 8003f8e:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <UART_SetConfig+0x2fc>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d00f      	beq.n	8003fbc <UART_SetConfig+0x1bc>
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d802      	bhi.n	8003fa6 <UART_SetConfig+0x1a6>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <UART_SetConfig+0x1b0>
 8003fa4:	e010      	b.n	8003fc8 <UART_SetConfig+0x1c8>
 8003fa6:	2b80      	cmp	r3, #128	; 0x80
 8003fa8:	d005      	beq.n	8003fb6 <UART_SetConfig+0x1b6>
 8003faa:	2bc0      	cmp	r3, #192	; 0xc0
 8003fac:	d009      	beq.n	8003fc2 <UART_SetConfig+0x1c2>
 8003fae:	e00b      	b.n	8003fc8 <UART_SetConfig+0x1c8>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e0cb      	b.n	800414e <UART_SetConfig+0x34e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e0c8      	b.n	800414e <UART_SetConfig+0x34e>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e0c5      	b.n	800414e <UART_SetConfig+0x34e>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e0c2      	b.n	800414e <UART_SetConfig+0x34e>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	bf00      	nop
 8003fce:	e0be      	b.n	800414e <UART_SetConfig+0x34e>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a4d      	ldr	r2, [pc, #308]	; (800410c <UART_SetConfig+0x30c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d124      	bne.n	8004024 <UART_SetConfig+0x224>
 8003fda:	4b48      	ldr	r3, [pc, #288]	; (80040fc <UART_SetConfig+0x2fc>)
 8003fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe8:	d012      	beq.n	8004010 <UART_SetConfig+0x210>
 8003fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fee:	d802      	bhi.n	8003ff6 <UART_SetConfig+0x1f6>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <UART_SetConfig+0x204>
 8003ff4:	e012      	b.n	800401c <UART_SetConfig+0x21c>
 8003ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffa:	d006      	beq.n	800400a <UART_SetConfig+0x20a>
 8003ffc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004000:	d009      	beq.n	8004016 <UART_SetConfig+0x216>
 8004002:	e00b      	b.n	800401c <UART_SetConfig+0x21c>
 8004004:	2300      	movs	r3, #0
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e0a1      	b.n	800414e <UART_SetConfig+0x34e>
 800400a:	2302      	movs	r3, #2
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e09e      	b.n	800414e <UART_SetConfig+0x34e>
 8004010:	2304      	movs	r3, #4
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	e09b      	b.n	800414e <UART_SetConfig+0x34e>
 8004016:	2308      	movs	r3, #8
 8004018:	77fb      	strb	r3, [r7, #31]
 800401a:	e098      	b.n	800414e <UART_SetConfig+0x34e>
 800401c:	2310      	movs	r3, #16
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	bf00      	nop
 8004022:	e094      	b.n	800414e <UART_SetConfig+0x34e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a39      	ldr	r2, [pc, #228]	; (8004110 <UART_SetConfig+0x310>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d124      	bne.n	8004078 <UART_SetConfig+0x278>
 800402e:	4b33      	ldr	r3, [pc, #204]	; (80040fc <UART_SetConfig+0x2fc>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	d012      	beq.n	8004064 <UART_SetConfig+0x264>
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d802      	bhi.n	800404a <UART_SetConfig+0x24a>
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <UART_SetConfig+0x258>
 8004048:	e012      	b.n	8004070 <UART_SetConfig+0x270>
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404e:	d006      	beq.n	800405e <UART_SetConfig+0x25e>
 8004050:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004054:	d009      	beq.n	800406a <UART_SetConfig+0x26a>
 8004056:	e00b      	b.n	8004070 <UART_SetConfig+0x270>
 8004058:	2301      	movs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e077      	b.n	800414e <UART_SetConfig+0x34e>
 800405e:	2302      	movs	r3, #2
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	e074      	b.n	800414e <UART_SetConfig+0x34e>
 8004064:	2304      	movs	r3, #4
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e071      	b.n	800414e <UART_SetConfig+0x34e>
 800406a:	2308      	movs	r3, #8
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e06e      	b.n	800414e <UART_SetConfig+0x34e>
 8004070:	2310      	movs	r3, #16
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	bf00      	nop
 8004076:	e06a      	b.n	800414e <UART_SetConfig+0x34e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a25      	ldr	r2, [pc, #148]	; (8004114 <UART_SetConfig+0x314>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d124      	bne.n	80040cc <UART_SetConfig+0x2cc>
 8004082:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <UART_SetConfig+0x2fc>)
 8004084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004088:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004090:	d012      	beq.n	80040b8 <UART_SetConfig+0x2b8>
 8004092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004096:	d802      	bhi.n	800409e <UART_SetConfig+0x29e>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d007      	beq.n	80040ac <UART_SetConfig+0x2ac>
 800409c:	e012      	b.n	80040c4 <UART_SetConfig+0x2c4>
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	d006      	beq.n	80040b2 <UART_SetConfig+0x2b2>
 80040a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040a8:	d009      	beq.n	80040be <UART_SetConfig+0x2be>
 80040aa:	e00b      	b.n	80040c4 <UART_SetConfig+0x2c4>
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
 80040b0:	e04d      	b.n	800414e <UART_SetConfig+0x34e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	77fb      	strb	r3, [r7, #31]
 80040b6:	e04a      	b.n	800414e <UART_SetConfig+0x34e>
 80040b8:	2304      	movs	r3, #4
 80040ba:	77fb      	strb	r3, [r7, #31]
 80040bc:	e047      	b.n	800414e <UART_SetConfig+0x34e>
 80040be:	2308      	movs	r3, #8
 80040c0:	77fb      	strb	r3, [r7, #31]
 80040c2:	e044      	b.n	800414e <UART_SetConfig+0x34e>
 80040c4:	2310      	movs	r3, #16
 80040c6:	77fb      	strb	r3, [r7, #31]
 80040c8:	bf00      	nop
 80040ca:	e040      	b.n	800414e <UART_SetConfig+0x34e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a11      	ldr	r2, [pc, #68]	; (8004118 <UART_SetConfig+0x318>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d139      	bne.n	800414a <UART_SetConfig+0x34a>
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <UART_SetConfig+0x2fc>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e4:	d027      	beq.n	8004136 <UART_SetConfig+0x336>
 80040e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ea:	d817      	bhi.n	800411c <UART_SetConfig+0x31c>
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <UART_SetConfig+0x32a>
 80040f0:	e027      	b.n	8004142 <UART_SetConfig+0x342>
 80040f2:	bf00      	nop
 80040f4:	efff69f3 	.word	0xefff69f3
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40023800 	.word	0x40023800
 8004100:	40004400 	.word	0x40004400
 8004104:	40004800 	.word	0x40004800
 8004108:	40004c00 	.word	0x40004c00
 800410c:	40005000 	.word	0x40005000
 8004110:	40011400 	.word	0x40011400
 8004114:	40007800 	.word	0x40007800
 8004118:	40007c00 	.word	0x40007c00
 800411c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004120:	d006      	beq.n	8004130 <UART_SetConfig+0x330>
 8004122:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004126:	d009      	beq.n	800413c <UART_SetConfig+0x33c>
 8004128:	e00b      	b.n	8004142 <UART_SetConfig+0x342>
 800412a:	2300      	movs	r3, #0
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e00e      	b.n	800414e <UART_SetConfig+0x34e>
 8004130:	2302      	movs	r3, #2
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e00b      	b.n	800414e <UART_SetConfig+0x34e>
 8004136:	2304      	movs	r3, #4
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e008      	b.n	800414e <UART_SetConfig+0x34e>
 800413c:	2308      	movs	r3, #8
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e005      	b.n	800414e <UART_SetConfig+0x34e>
 8004142:	2310      	movs	r3, #16
 8004144:	77fb      	strb	r3, [r7, #31]
 8004146:	bf00      	nop
 8004148:	e001      	b.n	800414e <UART_SetConfig+0x34e>
 800414a:	2310      	movs	r3, #16
 800414c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004156:	d17f      	bne.n	8004258 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004158:	7ffb      	ldrb	r3, [r7, #31]
 800415a:	2b08      	cmp	r3, #8
 800415c:	d85c      	bhi.n	8004218 <UART_SetConfig+0x418>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0x364>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004189 	.word	0x08004189
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041c9 	.word	0x080041c9
 8004170:	08004219 	.word	0x08004219
 8004174:	080041e1 	.word	0x080041e1
 8004178:	08004219 	.word	0x08004219
 800417c:	08004219 	.word	0x08004219
 8004180:	08004219 	.word	0x08004219
 8004184:	08004201 	.word	0x08004201
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7ff f99e 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 800418c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	005a      	lsls	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	441a      	add	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	61bb      	str	r3, [r7, #24]
        break;
 80041a6:	e03a      	b.n	800421e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a8:	f7ff f9a2 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 80041ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	005a      	lsls	r2, r3, #1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	61bb      	str	r3, [r7, #24]
        break;
 80041c6:	e02a      	b.n	800421e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	085a      	lsrs	r2, r3, #1
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <UART_SetConfig+0x54c>)
 80041d0:	4413      	add	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6852      	ldr	r2, [r2, #4]
 80041d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	61bb      	str	r3, [r7, #24]
        break;
 80041de:	e01e      	b.n	800421e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e0:	f7ff f88e 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80041e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	005a      	lsls	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	441a      	add	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	61bb      	str	r3, [r7, #24]
        break;
 80041fe:	e00e      	b.n	800421e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	b29b      	uxth	r3, r3
 8004214:	61bb      	str	r3, [r7, #24]
        break;
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
        break;
 800421c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d916      	bls.n	8004252 <UART_SetConfig+0x452>
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422a:	d212      	bcs.n	8004252 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f023 030f 	bic.w	r3, r3, #15
 8004234:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	085b      	lsrs	r3, r3, #1
 800423a:	b29b      	uxth	r3, r3
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	b29a      	uxth	r2, r3
 8004242:	897b      	ldrh	r3, [r7, #10]
 8004244:	4313      	orrs	r3, r2
 8004246:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	897a      	ldrh	r2, [r7, #10]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	e070      	b.n	8004334 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
 8004256:	e06d      	b.n	8004334 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8004258:	7ffb      	ldrb	r3, [r7, #31]
 800425a:	2b08      	cmp	r3, #8
 800425c:	d859      	bhi.n	8004312 <UART_SetConfig+0x512>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0x464>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	08004289 	.word	0x08004289
 8004268:	080042a7 	.word	0x080042a7
 800426c:	080042c5 	.word	0x080042c5
 8004270:	08004313 	.word	0x08004313
 8004274:	080042dd 	.word	0x080042dd
 8004278:	08004313 	.word	0x08004313
 800427c:	08004313 	.word	0x08004313
 8004280:	08004313 	.word	0x08004313
 8004284:	080042fb 	.word	0x080042fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004288:	f7ff f91e 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 800428c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085a      	lsrs	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	441a      	add	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	61bb      	str	r3, [r7, #24]
        break;
 80042a4:	e038      	b.n	8004318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042a6:	f7ff f923 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 80042aa:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	085a      	lsrs	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	441a      	add	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80042be:	b29b      	uxth	r3, r3
 80042c0:	61bb      	str	r3, [r7, #24]
        break;
 80042c2:	e029      	b.n	8004318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	085a      	lsrs	r2, r3, #1
 80042ca:	4b21      	ldr	r3, [pc, #132]	; (8004350 <UART_SetConfig+0x550>)
 80042cc:	4413      	add	r3, r2
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6852      	ldr	r2, [r2, #4]
 80042d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	61bb      	str	r3, [r7, #24]
        break;
 80042da:	e01d      	b.n	8004318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042dc:	f7ff f810 	bl	8003300 <HAL_RCC_GetSysClockFreq>
 80042e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	085a      	lsrs	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	441a      	add	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	61bb      	str	r3, [r7, #24]
        break;
 80042f8:	e00e      	b.n	8004318 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	b29b      	uxth	r3, r3
 800430e:	61bb      	str	r3, [r7, #24]
        break;
 8004310:	e002      	b.n	8004318 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
        break;
 8004316:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d908      	bls.n	8004330 <UART_SetConfig+0x530>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004324:	d204      	bcs.n	8004330 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	e001      	b.n	8004334 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004340:	7dfb      	ldrb	r3, [r7, #23]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	01e84800 	.word	0x01e84800
 8004350:	00f42400 	.word	0x00f42400

08004354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01a      	beq.n	800446a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004452:	d10a      	bne.n	800446a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af02      	add	r7, sp, #8
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80044a6:	f7fc fd71 	bl	8000f8c <HAL_GetTick>
 80044aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d10e      	bne.n	80044d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f82a 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e020      	b.n	800451a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b04      	cmp	r3, #4
 80044e4:	d10e      	bne.n	8004504 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f814 	bl	8004522 <UART_WaitOnFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e00a      	b.n	800451a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	60b9      	str	r1, [r7, #8]
 800452c:	603b      	str	r3, [r7, #0]
 800452e:	4613      	mov	r3, r2
 8004530:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004532:	e05d      	b.n	80045f0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d059      	beq.n	80045f0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fc fd26 	bl	8000f8c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <UART_WaitOnFlagUntilTimeout+0x30>
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d11b      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004560:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2220      	movs	r2, #32
 8004576:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e042      	b.n	8004610 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d02b      	beq.n	80045f0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a6:	d123      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80045c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2220      	movs	r2, #32
 80045dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e00f      	b.n	8004610 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	429a      	cmp	r2, r3
 800460c:	d092      	beq.n	8004534 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004618:	b084      	sub	sp, #16
 800461a:	b580      	push	{r7, lr}
 800461c:	b084      	sub	sp, #16
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	f107 001c 	add.w	r0, r7, #28
 8004626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2b01      	cmp	r3, #1
 800462e:	d120      	bne.n	8004672 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <USB_CoreInit+0xac>)
 8004642:	4013      	ands	r3, r2
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d105      	bne.n	8004666 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fa52 	bl	8004b10 <USB_CoreReset>
 800466c:	4603      	mov	r3, r0
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e010      	b.n	8004694 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fa46 	bl	8004b10 <USB_CoreReset>
 8004684:	4603      	mov	r3, r0
 8004686:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10b      	bne.n	80046b2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f043 0206 	orr.w	r2, r3, #6
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046be:	b004      	add	sp, #16
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	ffbdffbf 	.word	0xffbdffbf

080046c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 0201 	bic.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004702:	78fb      	ldrb	r3, [r7, #3]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
 8004714:	e00b      	b.n	800472e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60da      	str	r2, [r3, #12]
 8004728:	e001      	b.n	800472e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e003      	b.n	8004736 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800472e:	2032      	movs	r0, #50	; 0x32
 8004730:	f7fc fc38 	bl	8000fa4 <HAL_Delay>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004740:	b084      	sub	sp, #16
 8004742:	b580      	push	{r7, lr}
 8004744:	b086      	sub	sp, #24
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800474e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	e009      	b.n	8004774 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3340      	adds	r3, #64	; 0x40
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b0e      	cmp	r3, #14
 8004778:	d9f2      	bls.n	8004760 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11c      	bne.n	80047ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478e:	f043 0302 	orr.w	r3, r3, #2
 8004792:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e005      	b.n	80047c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047cc:	461a      	mov	r2, r3
 80047ce:	2300      	movs	r3, #0
 80047d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	4619      	mov	r1, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	461a      	mov	r2, r3
 80047e2:	680b      	ldr	r3, [r1, #0]
 80047e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10c      	bne.n	8004806 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d104      	bne.n	80047fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047f2:	2100      	movs	r1, #0
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f959 	bl	8004aac <USB_SetDevSpeed>
 80047fa:	e018      	b.n	800482e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047fc:	2101      	movs	r1, #1
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f954 	bl	8004aac <USB_SetDevSpeed>
 8004804:	e013      	b.n	800482e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	2b03      	cmp	r3, #3
 800480a:	d10c      	bne.n	8004826 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004812:	2100      	movs	r1, #0
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f949 	bl	8004aac <USB_SetDevSpeed>
 800481a:	e008      	b.n	800482e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800481c:	2101      	movs	r1, #1
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f944 	bl	8004aac <USB_SetDevSpeed>
 8004824:	e003      	b.n	800482e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004826:	2103      	movs	r1, #3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f93f 	bl	8004aac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800482e:	2110      	movs	r1, #16
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8f3 	bl	8004a1c <USB_FlushTxFifo>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f911 	bl	8004a68 <USB_FlushRxFifo>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	461a      	mov	r2, r3
 8004858:	2300      	movs	r3, #0
 800485a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	461a      	mov	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004874:	2300      	movs	r3, #0
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	e043      	b.n	8004902 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800488c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004890:	d118      	bne.n	80048c4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a4:	461a      	mov	r2, r3
 80048a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e013      	b.n	80048d6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	461a      	mov	r2, r3
 80048bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e008      	b.n	80048d6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	461a      	mov	r2, r3
 80048d2:	2300      	movs	r3, #0
 80048d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e2:	461a      	mov	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	461a      	mov	r2, r3
 80048f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	3301      	adds	r3, #1
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	d3b7      	bcc.n	800487a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e043      	b.n	8004998 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004926:	d118      	bne.n	800495a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e013      	b.n	800496c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004950:	461a      	mov	r2, r3
 8004952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	e008      	b.n	800496c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	461a      	mov	r2, r3
 8004968:	2300      	movs	r3, #0
 800496a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004978:	461a      	mov	r2, r3
 800497a:	2300      	movs	r3, #0
 800497c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	015a      	lsls	r2, r3, #5
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4413      	add	r3, r2
 8004986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498a:	461a      	mov	r2, r3
 800498c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004990:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3301      	adds	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	429a      	cmp	r2, r3
 800499e:	d3b7      	bcc.n	8004910 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f043 0210 	orr.w	r2, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <USB_DevInit+0x2d4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f043 0208 	orr.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <USB_DevInit+0x2d8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a10:	b004      	add	sp, #16
 8004a12:	4770      	bx	lr
 8004a14:	803c3800 	.word	0x803c3800
 8004a18:	40000004 	.word	0x40000004

08004a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <USB_FlushTxFifo+0x48>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d0f0      	beq.n	8004a36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	00030d40 	.word	0x00030d40

08004a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2210      	movs	r2, #16
 8004a78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <USB_FlushRxFifo+0x40>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d901      	bls.n	8004a8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e006      	b.n	8004a9a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d0f0      	beq.n	8004a7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	00030d40 	.word	0x00030d40

08004aac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004acc:	4313      	orrs	r3, r2
 8004ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b084      	sub	sp, #16
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af8:	f043 0302 	orr.w	r3, r3, #2
 8004afc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004afe:	2003      	movs	r0, #3
 8004b00:	f7fc fa50 	bl	8000fa4 <HAL_Delay>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <USB_CoreReset+0x64>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e01b      	b.n	8004b66 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	daf2      	bge.n	8004b1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f043 0201 	orr.w	r2, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <USB_CoreReset+0x64>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e006      	b.n	8004b66 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d0f0      	beq.n	8004b46 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	00030d40 	.word	0x00030d40

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4e0d      	ldr	r6, [pc, #52]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7c:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b7e:	1ba4      	subs	r4, r4, r6
 8004b80:	10a4      	asrs	r4, r4, #2
 8004b82:	2500      	movs	r5, #0
 8004b84:	42a5      	cmp	r5, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	4e0b      	ldr	r6, [pc, #44]	; (8004bb8 <__libc_init_array+0x40>)
 8004b8a:	4c0c      	ldr	r4, [pc, #48]	; (8004bbc <__libc_init_array+0x44>)
 8004b8c:	f000 f820 	bl	8004bd0 <_init>
 8004b90:	1ba4      	subs	r4, r4, r6
 8004b92:	10a4      	asrs	r4, r4, #2
 8004b94:	2500      	movs	r5, #0
 8004b96:	42a5      	cmp	r5, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba0:	4798      	blx	r3
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004baa:	4798      	blx	r3
 8004bac:	3501      	adds	r5, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	08004c08 	.word	0x08004c08
 8004bb4:	08004c08 	.word	0x08004c08
 8004bb8:	08004c08 	.word	0x08004c08
 8004bbc:	08004c0c 	.word	0x08004c0c

08004bc0 <memset>:
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <_init>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	bf00      	nop
 8004bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd6:	bc08      	pop	{r3}
 8004bd8:	469e      	mov	lr, r3
 8004bda:	4770      	bx	lr

08004bdc <_fini>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr
