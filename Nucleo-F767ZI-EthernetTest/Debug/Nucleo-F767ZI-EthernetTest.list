
Nucleo-F767ZI-EthernetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000afec  08013150  08013150  00023150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e13c  0801e13c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e13c  0801e13c  0002e13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e144  0801e144  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e144  0801e144  0002e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e148  0801e148  0002e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801e14c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007140  2000007c  0801e1c8  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200071bc  0801e1c8  000371bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032f43  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000606a  00000000  00000000  00062fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  00069058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  0006a900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035317  00000000  00000000  0006c070  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022abd  00000000  00000000  000a1387  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e2c5  00000000  00000000  000c3e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d2109  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a78  00000000  00000000  001d2184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	08013138 	.word	0x08013138

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	08013138 	.word	0x08013138

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f000 fb7b 	bl	8000d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f80e 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 f900 	bl	8000820 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f8a0 	bl	8000764 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000624:	f000 f8ce 	bl	80007c4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000628:	f003 ff8c 	bl	8004544 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  httpd_init();
 800062c:	f005 f8d6 	bl	80057dc <httpd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000630:	f003 ffc8 	bl	80045c4 <MX_LWIP_Process>
 8000634:	e7fc      	b.n	8000630 <main+0x20>
	...

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b0b8      	sub	sp, #224	; 0xe0
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f011 fe2e 	bl	80122a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2290      	movs	r2, #144	; 0x90
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f011 fe1f 	bl	80122a8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800066a:	f001 ff35 	bl	80024d8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <SystemClock_Config+0x120>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a39      	ldr	r2, [pc, #228]	; (8000758 <SystemClock_Config+0x120>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <SystemClock_Config+0x120>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <SystemClock_Config+0x124>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a34      	ldr	r2, [pc, #208]	; (800075c <SystemClock_Config+0x124>)
 800068c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	4b32      	ldr	r3, [pc, #200]	; (800075c <SystemClock_Config+0x124>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006c0:	23d8      	movs	r3, #216	; 0xd8
 80006c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006cc:	2309      	movs	r3, #9
 80006ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 ff5e 	bl	8002598 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006e2:	f000 f93f 	bl	8000964 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e6:	f001 ff07 	bl	80024f8 <HAL_PWREx_EnableOverDrive>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006f0:	f000 f938 	bl	8000964 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000712:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000716:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800071a:	2107      	movs	r1, #7
 800071c:	4618      	mov	r0, r3
 800071e:	f002 f9e9 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000728:	f000 f91c 	bl	8000964 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <SystemClock_Config+0x128>)
 800072e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073a:	f107 0308 	add.w	r3, r7, #8
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fbd0 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800074a:	f000 f90b 	bl	8000964 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	37e0      	adds	r7, #224	; 0xe0
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000
 8000760:	00200100 	.word	0x00200100

08000764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART3_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a8:	f002 ffc2 	bl	8003730 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f8d7 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000660 	.word	0x20000660
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2206      	movs	r2, #6
 80007d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	f001 fd1d 	bl	8002246 <HAL_PCD_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8a7 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200006e0 	.word	0x200006e0

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <MX_GPIO_Init+0x130>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a45      	ldr	r2, [pc, #276]	; (8000950 <MX_GPIO_Init+0x130>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <MX_GPIO_Init+0x130>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <MX_GPIO_Init+0x130>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a3f      	ldr	r2, [pc, #252]	; (8000950 <MX_GPIO_Init+0x130>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <MX_GPIO_Init+0x130>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a39      	ldr	r2, [pc, #228]	; (8000950 <MX_GPIO_Init+0x130>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MX_GPIO_Init+0x130>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_GPIO_Init+0x130>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a33      	ldr	r2, [pc, #204]	; (8000950 <MX_GPIO_Init+0x130>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_GPIO_Init+0x130>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_GPIO_Init+0x130>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2d      	ldr	r2, [pc, #180]	; (8000950 <MX_GPIO_Init+0x130>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_GPIO_Init+0x130>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_GPIO_Init+0x130>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a27      	ldr	r2, [pc, #156]	; (8000950 <MX_GPIO_Init+0x130>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_GPIO_Init+0x130>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008cc:	4821      	ldr	r0, [pc, #132]	; (8000954 <MX_GPIO_Init+0x134>)
 80008ce:	f001 fca1 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <MX_GPIO_Init+0x138>)
 80008d8:	f001 fc9c 	bl	8002214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_GPIO_Init+0x13c>)
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x140>)
 80008f2:	f001 fae5 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f6:	f244 0381 	movw	r3, #16513	; 0x4081
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_GPIO_Init+0x134>)
 8000910:	f001 fad6 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000914:	2340      	movs	r3, #64	; 0x40
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <MX_GPIO_Init+0x138>)
 800092c:	f001 fac8 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <MX_GPIO_Init+0x138>)
 8000944:	f001 fabc 	bl	8001ec0 <HAL_GPIO_Init>

}
 8000948:	bf00      	nop
 800094a:	3730      	adds	r7, #48	; 0x30
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40023800 	.word	0x40023800
 8000954:	40020400 	.word	0x40020400
 8000958:	40021800 	.word	0x40021800
 800095c:	10110000 	.word	0x10110000
 8000960:	40020800 	.word	0x40020800

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_MspInit+0x44>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x44>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_MspInit+0x44>)
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	; 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x7c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d128      	bne.n	8000a30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_UART_MspInit+0x80>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_UART_MspInit+0x80>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0308 	and.w	r3, r3, #8
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a20:	2307      	movs	r3, #7
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_UART_MspInit+0x84>)
 8000a2c:	f001 fa48 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40004800 	.word	0x40004800
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020c00 	.word	0x40020c00

08000a44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a64:	d141      	bne.n	8000aea <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a90:	230a      	movs	r3, #10
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4817      	ldr	r0, [pc, #92]	; (8000af8 <HAL_PCD_MspInit+0xb4>)
 8000a9c:	f001 fa10 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <HAL_PCD_MspInit+0xb4>)
 8000ab6:	f001 fa03 	bl	8001ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_PCD_MspInit+0xb0>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <HardFault_Handler+0x4>

08000b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <MemManage_Handler+0x4>

08000b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b50:	f000 f91a 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00a      	b.n	8000b80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b6a:	f3af 8000 	nop.w
 8000b6e:	4601      	mov	r1, r0
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	b2ca      	uxtb	r2, r1
 8000b78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf0      	blt.n	8000b6a <_read+0x12>
	}

return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e009      	b.n	8000bb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf1      	blt.n	8000ba4 <_write+0x12>
	}
	return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_close>:

int _close(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
 8000bea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <_isatty>:

int _isatty(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x50>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x16>
		heap_end = &end;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <_sbrk+0x50>)
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <_sbrk+0x54>)
 8000c48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <_sbrk+0x50>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <_sbrk+0x50>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	466a      	mov	r2, sp
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d905      	bls.n	8000c6a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <_sbrk+0x58>)
 8000c60:	220c      	movs	r2, #12
 8000c62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	e006      	b.n	8000c78 <_sbrk+0x44>
	}

	heap_end += incr;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <_sbrk+0x50>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <_sbrk+0x50>)
 8000c74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000098 	.word	0x20000098
 8000c88:	200071c0 	.word	0x200071c0
 8000c8c:	200071b8 	.word	0x200071b8

08000c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SystemInit+0x28>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <SystemInit+0x28>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SystemInit+0x28>)
 8000ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000caa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cc2:	e003      	b.n	8000ccc <LoopCopyDataInit>

08000cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cca:	3104      	adds	r1, #4

08000ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cd4:	d3f6      	bcc.n	8000cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cd8:	e002      	b.n	8000ce0 <LoopFillZerobss>

08000cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cdc:	f842 3b04 	str.w	r3, [r2], #4

08000ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ce4:	d3f9      	bcc.n	8000cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd3 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f011 fa9f 	bl	801222c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc8f 	bl	8000610 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000cf8:	0801e14c 	.word	0x0801e14c
  ldr  r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d00:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000d04:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000d08:	200071bc 	.word	0x200071bc

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>

08000d0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f000 f92c 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 f805 	bl	8000d28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d1e:	f7ff fe29 	bl	8000974 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f939 	bl	8000fbe <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f90f 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000ae4 	.word	0x20000ae4

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000ae4 	.word	0x20000ae4

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_Delay+0x40>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000008 	.word	0x20000008

08000e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <__NVIC_SetPriorityGrouping+0x40>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x40>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	05fa0000 	.word	0x05fa0000

08000e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <__NVIC_GetPriorityGrouping+0x18>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	0a1b      	lsrs	r3, r3, #8
 8000e5e:	f003 0307 	and.w	r3, r3, #7
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff47 	bl	8000e0c <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff5c 	bl	8000e54 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ffb0 	bl	8000f2c <SysTick_Config>
 8000fcc:	4603      	mov	r3, r0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8000fe8:	4ba9      	ldr	r3, [pc, #676]	; (8001290 <HAL_ETH_Init+0x2b8>)
 8000fea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e183      	b.n	8001306 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d106      	bne.n	8001018 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f003 fae2 	bl	80045dc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b9e      	ldr	r3, [pc, #632]	; (8001294 <HAL_ETH_Init+0x2bc>)
 800101a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101c:	4a9d      	ldr	r2, [pc, #628]	; (8001294 <HAL_ETH_Init+0x2bc>)
 800101e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001022:	6453      	str	r3, [r2, #68]	; 0x44
 8001024:	4b9b      	ldr	r3, [pc, #620]	; (8001294 <HAL_ETH_Init+0x2bc>)
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001030:	4b99      	ldr	r3, [pc, #612]	; (8001298 <HAL_ETH_Init+0x2c0>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4a98      	ldr	r2, [pc, #608]	; (8001298 <HAL_ETH_Init+0x2c0>)
 8001036:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800103a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800103c:	4b96      	ldr	r3, [pc, #600]	; (8001298 <HAL_ETH_Init+0x2c0>)
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4994      	ldr	r1, [pc, #592]	; (8001298 <HAL_ETH_Init+0x2c0>)
 8001046:	4313      	orrs	r3, r2
 8001048:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0201 	orr.w	r2, r2, #1
 800105c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001060:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001062:	f7ff fea5 	bl	8000db0 <HAL_GetTick>
 8001066:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001068:	e011      	b.n	800108e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800106a:	f7ff fea1 	bl	8000db0 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001078:	d909      	bls.n	800108e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e13b      	b.n	8001306 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1e4      	bne.n	800106a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f023 031c 	bic.w	r3, r3, #28
 80010ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010b0:	f001 fee4 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 80010b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4a78      	ldr	r2, [pc, #480]	; (800129c <HAL_ETH_Init+0x2c4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d908      	bls.n	80010d0 <HAL_ETH_Init+0xf8>
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4a77      	ldr	r2, [pc, #476]	; (80012a0 <HAL_ETH_Init+0x2c8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d804      	bhi.n	80010d0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e027      	b.n	8001120 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	4a73      	ldr	r2, [pc, #460]	; (80012a0 <HAL_ETH_Init+0x2c8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d908      	bls.n	80010ea <HAL_ETH_Init+0x112>
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4a72      	ldr	r2, [pc, #456]	; (80012a4 <HAL_ETH_Init+0x2cc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d804      	bhi.n	80010ea <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f043 030c 	orr.w	r3, r3, #12
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	e01a      	b.n	8001120 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4a6d      	ldr	r2, [pc, #436]	; (80012a4 <HAL_ETH_Init+0x2cc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d903      	bls.n	80010fa <HAL_ETH_Init+0x122>
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4a6c      	ldr	r2, [pc, #432]	; (80012a8 <HAL_ETH_Init+0x2d0>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d911      	bls.n	800111e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	4a6a      	ldr	r2, [pc, #424]	; (80012a8 <HAL_ETH_Init+0x2d0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d908      	bls.n	8001114 <HAL_ETH_Init+0x13c>
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4a69      	ldr	r2, [pc, #420]	; (80012ac <HAL_ETH_Init+0x2d4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d804      	bhi.n	8001114 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e005      	b.n	8001120 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f043 0310 	orr.w	r3, r3, #16
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	e000      	b.n	8001120 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800111e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001128:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800112c:	2100      	movs	r1, #0
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fb9a 	bl	8001868 <HAL_ETH_WritePHYRegister>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800113e:	6939      	ldr	r1, [r7, #16]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fc27 	bl	8001994 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e0d9      	b.n	8001306 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001152:	20ff      	movs	r0, #255	; 0xff
 8001154:	f7ff fe38 	bl	8000dc8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80a7 	beq.w	80012b0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001162:	f7ff fe25 	bl	8000db0 <HAL_GetTick>
 8001166:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	461a      	mov	r2, r3
 800116e:	2101      	movs	r1, #1
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fb11 	bl	8001798 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001176:	f7ff fe1b 	bl	8000db0 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	f241 3288 	movw	r2, #5000	; 0x1388
 8001184:	4293      	cmp	r3, r2
 8001186:	d90f      	bls.n	80011a8 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800118c:	6939      	ldr	r1, [r7, #16]
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 fc00 	bl	8001994 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e0ae      	b.n	8001306 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0da      	beq.n	8001168 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b6:	2100      	movs	r1, #0
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fb55 	bl	8001868 <HAL_ETH_WritePHYRegister>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011c8:	6939      	ldr	r1, [r7, #16]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fbe2 	bl	8001994 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011d8:	2301      	movs	r3, #1
 80011da:	e094      	b.n	8001306 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80011dc:	f7ff fde8 	bl	8000db0 <HAL_GetTick>
 80011e0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	461a      	mov	r2, r3
 80011e8:	2101      	movs	r1, #1
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fad4 	bl	8001798 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80011f0:	f7ff fdde 	bl	8000db0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d90f      	bls.n	8001222 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fbc3 	bl	8001994 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e071      	b.n	8001306 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0da      	beq.n	80011e2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	461a      	mov	r2, r3
 8001232:	211f      	movs	r1, #31
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 faaf 	bl	8001798 <HAL_ETH_ReadPHYRegister>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00b      	beq.n	8001258 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001244:	6939      	ldr	r1, [r7, #16]
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 fba4 	bl	8001994 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001254:	2301      	movs	r3, #1
 8001256:	e056      	b.n	8001306 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	e002      	b.n	8001272 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	e037      	b.n	80012f4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	e032      	b.n	80012f4 <HAL_ETH_Init+0x31c>
 800128e:	bf00      	nop
 8001290:	03938700 	.word	0x03938700
 8001294:	40023800 	.word	0x40023800
 8001298:	40013800 	.word	0x40013800
 800129c:	01312cff 	.word	0x01312cff
 80012a0:	02160ebf 	.word	0x02160ebf
 80012a4:	039386ff 	.word	0x039386ff
 80012a8:	05f5e0ff 	.word	0x05f5e0ff
 80012ac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	085b      	lsrs	r3, r3, #1
 80012be:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 facd 	bl	8001868 <HAL_ETH_WritePHYRegister>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fb5a 	bl	8001994 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e00c      	b.n	8001306 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80012f0:	f7ff fd6a 	bl	8000dc8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80012f4:	6939      	ldr	r1, [r7, #16]
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fb4c 	bl	8001994 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3720      	adds	r7, #32
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop

08001310 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_ETH_DMATxDescListInit+0x20>
 800132c:	2302      	movs	r3, #2
 800132e:	e052      	b.n	80013d6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e030      	b.n	80013ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	4413      	add	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800135c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	461a      	mov	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3b01      	subs	r3, #1
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	d208      	bcs.n	80013a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	015b      	lsls	r3, r3, #5
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	461a      	mov	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	e002      	b.n	80013a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3ca      	bcc.n	800134c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6819      	ldr	r1, [r3, #0]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f241 0310 	movw	r3, #4112	; 0x1010
 80013c0:	440b      	add	r3, r1
 80013c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b087      	sub	sp, #28
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_ETH_DMARxDescListInit+0x20>
 80013fe:	2302      	movs	r3, #2
 8001400:	e056      	b.n	80014b0 <HAL_ETH_DMARxDescListInit+0xce>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2202      	movs	r2, #2
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
 800141c:	e034      	b.n	8001488 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	4413      	add	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800142e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001436:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	461a      	mov	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d105      	bne.n	8001460 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	429a      	cmp	r2, r3
 8001468:	d208      	bcs.n	800147c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	015b      	lsls	r3, r3, #5
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	4413      	add	r3, r2
 8001474:	461a      	mov	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	e002      	b.n	8001482 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	3301      	adds	r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d3c6      	bcc.n	800141e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6819      	ldr	r1, [r3, #0]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	f241 030c 	movw	r3, #4108	; 0x100c
 800149a:	440b      	add	r3, r1
 800149c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_ETH_TransmitFrame+0x24>
 80014dc:	2302      	movs	r3, #2
 80014de:	e0cd      	b.n	800167c <HAL_ETH_TransmitFrame+0x1c0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001506:	2301      	movs	r3, #1
 8001508:	e0b8      	b.n	800167c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	da09      	bge.n	8001528 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2212      	movs	r2, #18
 8001518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0a9      	b.n	800167c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800152e:	4293      	cmp	r3, r2
 8001530:	d915      	bls.n	800155e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_ETH_TransmitFrame+0x1cc>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0a9b      	lsrs	r3, r3, #10
 800153c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_ETH_TransmitFrame+0x1cc>)
 8001542:	fba3 1302 	umull	r1, r3, r3, r2
 8001546:	0a9b      	lsrs	r3, r3, #10
 8001548:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	e001      	b.n	8001562 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d11c      	bne.n	80015a2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001576:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001582:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001592:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
 80015a0:	e04b      	b.n	800163a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e044      	b.n	8001632 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015b6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d107      	bne.n	80015ce <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015cc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015d6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3b01      	subs	r3, #1
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d116      	bne.n	8001610 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015f0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	4a25      	ldr	r2, [pc, #148]	; (800168c <HAL_ETH_TransmitFrame+0x1d0>)
 80015f6:	fb02 f203 	mul.w	r2, r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001602:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800160e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	461a      	mov	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	3301      	adds	r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3b6      	bcc.n	80015a8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001642:	4413      	add	r3, r2
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00d      	beq.n	800166a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	f241 0314 	movw	r3, #4116	; 0x1014
 8001656:	4413      	add	r3, r2
 8001658:	2204      	movs	r2, #4
 800165a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	f241 0304 	movw	r3, #4100	; 0x1004
 8001664:	4413      	add	r3, r2
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	371c      	adds	r7, #28
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	ac02b00b 	.word	0xac02b00b
 800168c:	fffffa0c 	.word	0xfffffa0c

08001690 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_ETH_GetReceivedFrame+0x1a>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e070      	b.n	800178c <HAL_ETH_GetReceivedFrame+0xfc>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db5a      	blt.n	800177a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d030      	beq.n	8001734 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d103      	bne.n	80016ec <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0c1b      	lsrs	r3, r3, #16
 80016fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001700:	3b04      	subs	r3, #4
 8001702:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	461a      	mov	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e02b      	b.n	800178c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173e:	2b00      	cmp	r3, #0
 8001740:	d010      	beq.n	8001764 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	629a      	str	r2, [r3, #40]	; 0x28
 8001762:	e00a      	b.n	800177a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	460b      	mov	r3, r1
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b82      	cmp	r3, #130	; 0x82
 80017b8:	d101      	bne.n	80017be <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80017ba:	2302      	movs	r3, #2
 80017bc:	e050      	b.n	8001860 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2282      	movs	r2, #130	; 0x82
 80017c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 031c 	and.w	r3, r3, #28
 80017d4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8a1b      	ldrh	r3, [r3, #16]
 80017da:	02db      	lsls	r3, r3, #11
 80017dc:	b29b      	uxth	r3, r3
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80017e4:	897b      	ldrh	r3, [r7, #10]
 80017e6:	019b      	lsls	r3, r3, #6
 80017e8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f023 0302 	bic.w	r3, r3, #2
 80017f8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800180a:	f7ff fad1 	bl	8000db0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001810:	e015      	b.n	800183e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001812:	f7ff facd 	bl	8000db0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d309      	bcc.n	8001836 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e014      	b.n	8001860 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e4      	bne.n	8001812 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	b29b      	uxth	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	460b      	mov	r3, r1
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b42      	cmp	r3, #66	; 0x42
 8001888:	d101      	bne.n	800188e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800188a:	2302      	movs	r3, #2
 800188c:	e04e      	b.n	800192c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2242      	movs	r2, #66	; 0x42
 8001892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 031c 	and.w	r3, r3, #28
 80018a4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8a1b      	ldrh	r3, [r3, #16]
 80018aa:	02db      	lsls	r3, r3, #11
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80018b4:	897b      	ldrh	r3, [r7, #10]
 80018b6:	019b      	lsls	r3, r3, #6
 80018b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4313      	orrs	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80018e4:	f7ff fa64 	bl	8000db0 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018ea:	e015      	b.n	8001918 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80018ec:	f7ff fa60 	bl	8000db0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d309      	bcc.n	8001910 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e00d      	b.n	800192c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1e4      	bne.n	80018ec <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_ETH_Start+0x16>
 8001946:	2302      	movs	r3, #2
 8001948:	e01f      	b.n	800198a <HAL_ETH_Start+0x56>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fa1c 	bl	8001d98 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fa36 	bl	8001dd2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 fa80 	bl	8001e6c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fa4d 	bl	8001e0c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 fa62 	bl	8001e3c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0b0      	sub	sp, #192	; 0xc0
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d007      	beq.n	80019ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80019c2:	2300      	movs	r3, #0
 80019c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	663b      	str	r3, [r7, #96]	; 0x60
 80019e0:	e001      	b.n	80019e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80019e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019f0:	2300      	movs	r3, #0
 80019f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001a00:	2340      	movs	r3, #64	; 0x40
 8001a02:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001a68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a6c:	4bab      	ldr	r3, [pc, #684]	; (8001d1c <ETH_MACDMAConfig+0x388>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001a78:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a7c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a80:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a86:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a8a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a8e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a94:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a98:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a9c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001aa0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001aa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001aa4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001aa8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001aaa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001abc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff f97d 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ad8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001adc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001ade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ae0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ae6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001aec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001aee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001af2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001af8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001afc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001b04:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001b06:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff f958 	bl	8000dc8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b20:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001b2a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b34:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001b40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b44:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b48:	4013      	ands	r3, r2
 8001b4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b52:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001b54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b58:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001b5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001b5e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001b60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001b64:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b6a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001b6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001b70:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001b72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b84:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff f919 	bl	8000dc8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b9e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ba0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ba4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff f904 	bl	8000dc8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bd2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001bd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001bdc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c1e:	4413      	add	r3, r2
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001c26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <ETH_MACDMAConfig+0x38c>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c32:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c34:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c36:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c38:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c3a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001c3c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001c3e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001c40:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001c42:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001c44:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001c46:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001c48:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001c4a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001c4e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001c52:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c66:	4413      	add	r3, r2
 8001c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f7ff f8a2 	bl	8000dc8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	f241 0318 	movw	r3, #4120	; 0x1018
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c92:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c98:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c9c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ca0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001ca4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001caa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001cae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7ff f87b 	bl	8000dc8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cde:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d10d      	bne.n	8001d04 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f241 031c 	movw	r3, #4124	; 0x101c
 8001cf0:	4413      	add	r3, r2
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6811      	ldr	r1, [r2, #0]
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <ETH_MACDMAConfig+0x390>)
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	f241 031c 	movw	r3, #4124	; 0x101c
 8001d00:	440b      	add	r3, r1
 8001d02:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f80b 	bl	8001d28 <ETH_MACAddressConfig>
}
 8001d12:	bf00      	nop
 8001d14:	37c0      	adds	r7, #192	; 0xc0
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	ff20810f 	.word	0xff20810f
 8001d20:	f8de3f23 	.word	0xf8de3f23
 8001d24:	00010040 	.word	0x00010040

08001d28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3305      	adds	r3, #5
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	3204      	adds	r2, #4
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <ETH_MACAddressConfig+0x68>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3303      	adds	r3, #3
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	061a      	lsls	r2, r3, #24
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <ETH_MACAddressConfig+0x6c>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	6013      	str	r3, [r2, #0]
}
 8001d82:	bf00      	nop
 8001d84:	371c      	adds	r7, #28
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40028040 	.word	0x40028040
 8001d94:	40028044 	.word	0x40028044

08001d98 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f7ff f803 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0204 	orr.w	r2, r2, #4
 8001dec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7fe ffe6 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6811      	ldr	r1, [r2, #0]
 8001e24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e28:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e2c:	440b      	add	r3, r1
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e4c:	4413      	add	r3, r2
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6811      	ldr	r1, [r2, #0]
 8001e54:	f043 0202 	orr.w	r2, r3, #2
 8001e58:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e5c:	440b      	add	r3, r1
 8001e5e:	601a      	str	r2, [r3, #0]
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f241 0318 	movw	r3, #4120	; 0x1018
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f7fe ff90 	bl	8000dc8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	f241 0318 	movw	r3, #4120	; 0x1018
 8001eb2:	440b      	add	r3, r1
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e175      	b.n	80021cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8164 	bne.w	80021c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d00b      	beq.n	8001f1e <HAL_GPIO_Init+0x5e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d007      	beq.n	8001f1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f12:	2b11      	cmp	r3, #17
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b12      	cmp	r3, #18
 8001f1c:	d130      	bne.n	8001f80 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	2203      	movs	r2, #3
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0201 	and.w	r2, r3, #1
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x100>
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b12      	cmp	r3, #18
 8001fbe:	d123      	bne.n	8002008 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	69b9      	ldr	r1, [r7, #24]
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80be 	beq.w	80021c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b65      	ldr	r3, [pc, #404]	; (80021e0 <HAL_GPIO_Init+0x320>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a64      	ldr	r2, [pc, #400]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b62      	ldr	r3, [pc, #392]	; (80021e0 <HAL_GPIO_Init+0x320>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002062:	4a60      	ldr	r2, [pc, #384]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a57      	ldr	r2, [pc, #348]	; (80021e8 <HAL_GPIO_Init+0x328>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d037      	beq.n	80020fe <HAL_GPIO_Init+0x23e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a56      	ldr	r2, [pc, #344]	; (80021ec <HAL_GPIO_Init+0x32c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d031      	beq.n	80020fa <HAL_GPIO_Init+0x23a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_GPIO_Init+0x330>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d02b      	beq.n	80020f6 <HAL_GPIO_Init+0x236>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_GPIO_Init+0x334>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d025      	beq.n	80020f2 <HAL_GPIO_Init+0x232>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a53      	ldr	r2, [pc, #332]	; (80021f8 <HAL_GPIO_Init+0x338>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <HAL_GPIO_Init+0x22e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_GPIO_Init+0x33c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <HAL_GPIO_Init+0x22a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a51      	ldr	r2, [pc, #324]	; (8002200 <HAL_GPIO_Init+0x340>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_GPIO_Init+0x226>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a50      	ldr	r2, [pc, #320]	; (8002204 <HAL_GPIO_Init+0x344>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_GPIO_Init+0x222>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4f      	ldr	r2, [pc, #316]	; (8002208 <HAL_GPIO_Init+0x348>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x21e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <HAL_GPIO_Init+0x34c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_GPIO_Init+0x21a>
 80020d6:	2309      	movs	r3, #9
 80020d8:	e012      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020da:	230a      	movs	r3, #10
 80020dc:	e010      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00e      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020e2:	2307      	movs	r3, #7
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x240>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002110:	4934      	ldr	r1, [pc, #208]	; (80021e4 <HAL_GPIO_Init+0x324>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211e:	4b3c      	ldr	r3, [pc, #240]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002142:	4a33      	ldr	r2, [pc, #204]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_GPIO_Init+0x350>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_GPIO_Init+0x350>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002196:	4a1e      	ldr	r2, [pc, #120]	; (8002210 <HAL_GPIO_Init+0x350>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_GPIO_Init+0x350>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c0:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_GPIO_Init+0x350>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae86 	bls.w	8001ee0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	3724      	adds	r7, #36	; 0x24
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40021400 	.word	0x40021400
 8002200:	40021800 	.word	0x40021800
 8002204:	40021c00 	.word	0x40021c00
 8002208:	40022000 	.word	0x40022000
 800220c:	40022400 	.word	0x40022400
 8002210:	40013c00 	.word	0x40013c00

08002214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	807b      	strh	r3, [r7, #2]
 8002220:	4613      	mov	r3, r2
 8002222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002224:	787b      	ldrb	r3, [r7, #1]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222a:	887a      	ldrh	r2, [r7, #2]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002230:	e003      	b.n	800223a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002232:	887b      	ldrh	r3, [r7, #2]
 8002234:	041a      	lsls	r2, r3, #16
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	619a      	str	r2, [r3, #24]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002248:	b08f      	sub	sp, #60	; 0x3c
 800224a:	af0a      	add	r7, sp, #40	; 0x28
 800224c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e116      	b.n	8002486 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fbe6 	bl	8000a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2203      	movs	r2, #3
 800227c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d102      	bne.n	8002292 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f001 fefc 	bl	8004094 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	687e      	ldr	r6, [r7, #4]
 80022a4:	466d      	mov	r5, sp
 80022a6:	f106 0410 	add.w	r4, r6, #16
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ba:	1d33      	adds	r3, r6, #4
 80022bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022be:	6838      	ldr	r0, [r7, #0]
 80022c0:	f001 fe90 	bl	8003fe4 <USB_CoreInit>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2202      	movs	r2, #2
 80022ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0d7      	b.n	8002486 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f001 feea 	bl	80040b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e04a      	b.n	800237e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	333d      	adds	r3, #61	; 0x3d
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	333c      	adds	r3, #60	; 0x3c
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	b298      	uxth	r0, r3
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3342      	adds	r3, #66	; 0x42
 8002324:	4602      	mov	r2, r0
 8002326:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	333f      	adds	r3, #63	; 0x3f
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3344      	adds	r3, #68	; 0x44
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3348      	adds	r3, #72	; 0x48
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002364:	7bfa      	ldrb	r2, [r7, #15]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3350      	adds	r3, #80	; 0x50
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	3301      	adds	r3, #1
 800237c:	73fb      	strb	r3, [r7, #15]
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	d3af      	bcc.n	80022e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
 800238c:	e044      	b.n	8002418 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023e6:	7bfa      	ldrb	r2, [r7, #15]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	3301      	adds	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3b5      	bcc.n	800238e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	687e      	ldr	r6, [r7, #4]
 800242a:	466d      	mov	r5, sp
 800242c:	f106 0410 	add.w	r4, r6, #16
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002438:	e894 0003 	ldmia.w	r4, {r0, r1}
 800243c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002440:	1d33      	adds	r3, r6, #4
 8002442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002444:	6838      	ldr	r0, [r7, #0]
 8002446:	f001 fe61 	bl	800410c <USB_DevInit>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e014      	b.n	8002486 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b01      	cmp	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f80b 	bl	8002490 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f002 f813 	bl	80044aa <USB_DevDisconnect>

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002490 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	10000003 	.word	0x10000003

080024d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40007000 	.word	0x40007000

080024f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <HAL_PWREx_EnableOverDrive+0x98>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a22      	ldr	r2, [pc, #136]	; (8002590 <HAL_PWREx_EnableOverDrive+0x98>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <HAL_PWREx_EnableOverDrive+0x98>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800251a:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <HAL_PWREx_EnableOverDrive+0x9c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002526:	f7fe fc43 	bl	8000db0 <HAL_GetTick>
 800252a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800252c:	e009      	b.n	8002542 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800252e:	f7fe fc3f 	bl	8000db0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253c:	d901      	bls.n	8002542 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e022      	b.n	8002588 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254e:	d1ee      	bne.n	800252e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800255c:	f7fe fc28 	bl	8000db0 <HAL_GetTick>
 8002560:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002562:	e009      	b.n	8002578 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002564:	f7fe fc24 	bl	8000db0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002572:	d901      	bls.n	8002578 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e007      	b.n	8002588 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_PWREx_EnableOverDrive+0x9c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002584:	d1ee      	bne.n	8002564 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800
 8002594:	40007000 	.word	0x40007000

08002598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e29b      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025bc:	4b96      	ldr	r3, [pc, #600]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c8:	4b93      	ldr	r3, [pc, #588]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x62>
 80025d4:	4b90      	ldr	r3, [pc, #576]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x130>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d168      	bne.n	80026c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e275      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x7a>
 8002604:	4b84      	ldr	r3, [pc, #528]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a83      	ldr	r2, [pc, #524]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0xd8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x9c>
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7e      	ldr	r2, [pc, #504]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b7c      	ldr	r3, [pc, #496]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7b      	ldr	r2, [pc, #492]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800262c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e01d      	b.n	8002670 <HAL_RCC_OscConfig+0xd8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0xc0>
 800263e:	4b76      	ldr	r3, [pc, #472]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a75      	ldr	r2, [pc, #468]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a72      	ldr	r2, [pc, #456]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xd8>
 8002658:	4b6f      	ldr	r3, [pc, #444]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b6c      	ldr	r3, [pc, #432]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6b      	ldr	r2, [pc, #428]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fb9a 	bl	8000db0 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe fb96 	bl	8000db0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e229      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b61      	ldr	r3, [pc, #388]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0xe8>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fb86 	bl	8000db0 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe fb82 	bl	8000db0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e215      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x110>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d069      	beq.n	80027aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	4b50      	ldr	r3, [pc, #320]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e2:	4b4d      	ldr	r3, [pc, #308]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x190>
 80026ee:	4b4a      	ldr	r3, [pc, #296]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b47      	ldr	r3, [pc, #284]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x17a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1e9      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	493d      	ldr	r1, [pc, #244]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e040      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d023      	beq.n	8002778 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b39      	ldr	r3, [pc, #228]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a38      	ldr	r2, [pc, #224]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7fe fb38 	bl	8000db0 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002744:	f7fe fb34 	bl	8000db0 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1c7      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4929      	ldr	r1, [pc, #164]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002778:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a26      	ldr	r2, [pc, #152]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fb14 	bl	8000db0 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fb10 	bl	8000db0 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e1a3      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d038      	beq.n	8002828 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe faf1 	bl	8000db0 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d2:	f7fe faed 	bl	8000db0 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e180      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x23a>
 80027f0:	e01a      	b.n	8002828 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_RCC_OscConfig+0x280>)
 80027f8:	f023 0301 	bic.w	r3, r3, #1
 80027fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fad7 	bl	8000db0 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002806:	f7fe fad3 	bl	8000db0 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d903      	bls.n	800281c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e166      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
 8002818:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	4b92      	ldr	r3, [pc, #584]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80a4 	beq.w	800297e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b8c      	ldr	r3, [pc, #560]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a88      	ldr	r2, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b86      	ldr	r3, [pc, #536]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285a:	2301      	movs	r3, #1
 800285c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285e:	4b83      	ldr	r3, [pc, #524]	; (8002a6c <HAL_RCC_OscConfig+0x4d4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d118      	bne.n	800289c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800286a:	4b80      	ldr	r3, [pc, #512]	; (8002a6c <HAL_RCC_OscConfig+0x4d4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7f      	ldr	r2, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x4d4>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002876:	f7fe fa9b 	bl	8000db0 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fa97 	bl	8000db0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b64      	cmp	r3, #100	; 0x64
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e12a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002890:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCC_OscConfig+0x4d4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x31a>
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a6f      	ldr	r2, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	e02d      	b.n	800290e <HAL_RCC_OscConfig+0x376>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x33c>
 80028ba:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a6a      	ldr	r2, [pc, #424]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028c0:	f023 0301 	bic.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ca:	4a67      	ldr	r2, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6713      	str	r3, [r2, #112]	; 0x70
 80028d2:	e01c      	b.n	800290e <HAL_RCC_OscConfig+0x376>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b05      	cmp	r3, #5
 80028da:	d10c      	bne.n	80028f6 <HAL_RCC_OscConfig+0x35e>
 80028dc:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	f043 0304 	orr.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
 80028f4:	e00b      	b.n	800290e <HAL_RCC_OscConfig+0x376>
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002906:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002908:	f023 0304 	bic.w	r3, r3, #4
 800290c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002916:	f7fe fa4b 	bl	8000db0 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291e:	f7fe fa47 	bl	8000db0 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	f241 3288 	movw	r2, #5000	; 0x1388
 800292c:	4293      	cmp	r3, r2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0d8      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0ee      	beq.n	800291e <HAL_RCC_OscConfig+0x386>
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002942:	f7fe fa35 	bl	8000db0 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	e00a      	b.n	8002960 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294a:	f7fe fa31 	bl	8000db0 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	f241 3288 	movw	r2, #5000	; 0x1388
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e0c2      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ee      	bne.n	800294a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a3c      	ldr	r2, [pc, #240]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80ae 	beq.w	8002ae4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002988:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d06d      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d14b      	bne.n	8002a34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80029a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fa02 	bl	8000db0 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe f9fe 	bl	8000db0 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e091      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f8:	071b      	lsls	r3, r3, #28
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe f9d0 	bl	8000db0 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe f9cc 	bl	8000db0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e05f      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x47c>
 8002a32:	e057      	b.n	8002ae4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe f9b6 	bl	8000db0 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe f9b2 	bl	8000db0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e045      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x4b0>
 8002a66:	e03d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x54c>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_RCC_OscConfig+0x558>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d030      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d129      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d122      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d119      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d10f      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d107      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800

08002af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d0      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b0c:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d910      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1a:	4b67      	ldr	r3, [pc, #412]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 020f 	bic.w	r2, r3, #15
 8002b22:	4965      	ldr	r1, [pc, #404]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b63      	ldr	r3, [pc, #396]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0b8      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d020      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4a52      	ldr	r2, [pc, #328]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	494d      	ldr	r1, [pc, #308]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d040      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d115      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e07f      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d109      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e073      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4936      	ldr	r1, [pc, #216]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe f8e2 	bl	8000db0 <HAL_GetTick>
 8002bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf0:	f7fe f8de 	bl	8000db0 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e053      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 020c 	and.w	r2, r3, #12
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d1eb      	bne.n	8002bf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d210      	bcs.n	8002c48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 020f 	bic.w	r2, r3, #15
 8002c2e:	4922      	ldr	r1, [pc, #136]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d001      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e032      	b.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c86:	f000 f821 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c98:	5cd3      	ldrb	r3, [r2, r3]
 8002c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c9e:	4a09      	ldr	r2, [pc, #36]	; (8002cc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCC_ClockConfig+0x1d4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f83e 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023c00 	.word	0x40023c00
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	080160f0 	.word	0x080160f0
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d007      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0x32>
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d008      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f040 80b4 	bne.w	8002e60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfa:	60bb      	str	r3, [r7, #8]
      break;
 8002cfc:	e0b3      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfe:	4b5e      	ldr	r3, [pc, #376]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d00:	60bb      	str	r3, [r7, #8]
      break;
 8002d02:	e0b0      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d04a      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1a:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	099b      	lsrs	r3, r3, #6
 8002d20:	f04f 0400 	mov.w	r4, #0
 8002d24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea03 0501 	and.w	r5, r3, r1
 8002d30:	ea04 0602 	and.w	r6, r4, r2
 8002d34:	4629      	mov	r1, r5
 8002d36:	4632      	mov	r2, r6
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4622      	mov	r2, r4
 8002d4c:	1b49      	subs	r1, r1, r5
 8002d4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f04f 0400 	mov.w	r4, #0
 8002d5a:	0194      	lsls	r4, r2, #6
 8002d5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d60:	018b      	lsls	r3, r1, #6
 8002d62:	1a5b      	subs	r3, r3, r1
 8002d64:	eb64 0402 	sbc.w	r4, r4, r2
 8002d68:	f04f 0100 	mov.w	r1, #0
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	00e2      	lsls	r2, r4, #3
 8002d72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d76:	00d9      	lsls	r1, r3, #3
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4614      	mov	r4, r2
 8002d7c:	195b      	adds	r3, r3, r5
 8002d7e:	eb44 0406 	adc.w	r4, r4, r6
 8002d82:	f04f 0100 	mov.w	r1, #0
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	0262      	lsls	r2, r4, #9
 8002d8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d90:	0259      	lsls	r1, r3, #9
 8002d92:	460b      	mov	r3, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	4621      	mov	r1, r4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	f7fd fab4 	bl	8000310 <__aeabi_uldivmod>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e049      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	f04f 0400 	mov.w	r4, #0
 8002dba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	ea03 0501 	and.w	r5, r3, r1
 8002dc6:	ea04 0602 	and.w	r6, r4, r2
 8002dca:	4629      	mov	r1, r5
 8002dcc:	4632      	mov	r2, r6
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f04f 0400 	mov.w	r4, #0
 8002dd6:	0154      	lsls	r4, r2, #5
 8002dd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ddc:	014b      	lsls	r3, r1, #5
 8002dde:	4619      	mov	r1, r3
 8002de0:	4622      	mov	r2, r4
 8002de2:	1b49      	subs	r1, r1, r5
 8002de4:	eb62 0206 	sbc.w	r2, r2, r6
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	0194      	lsls	r4, r2, #6
 8002df2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002df6:	018b      	lsls	r3, r1, #6
 8002df8:	1a5b      	subs	r3, r3, r1
 8002dfa:	eb64 0402 	sbc.w	r4, r4, r2
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	00e2      	lsls	r2, r4, #3
 8002e08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e0c:	00d9      	lsls	r1, r3, #3
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4614      	mov	r4, r2
 8002e12:	195b      	adds	r3, r3, r5
 8002e14:	eb44 0406 	adc.w	r4, r4, r6
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	02a2      	lsls	r2, r4, #10
 8002e22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e26:	0299      	lsls	r1, r3, #10
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	4621      	mov	r1, r4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f04f 0400 	mov.w	r4, #0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4623      	mov	r3, r4
 8002e3a:	f7fd fa69 	bl	8000310 <__aeabi_uldivmod>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460c      	mov	r4, r1
 8002e42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e44:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	3301      	adds	r3, #1
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
      break;
 8002e5e:	e002      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e62:	60bb      	str	r3, [r7, #8]
      break;
 8002e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e66:	68bb      	ldr	r3, [r7, #8]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4601      	mov	r1, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08016100 	.word	0x08016100

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ec0:	f7ff ffdc 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec4:	4601      	mov	r1, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0b5b      	lsrs	r3, r3, #13
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4a03      	ldr	r2, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed2:	5cd3      	ldrb	r3, [r2, r3]
 8002ed4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08016100 	.word	0x08016100

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f0c:	4b69      	ldr	r3, [pc, #420]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a68      	ldr	r2, [pc, #416]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	4964      	ldr	r1, [pc, #400]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d017      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	4959      	ldr	r1, [pc, #356]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d017      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7a:	4b4e      	ldr	r3, [pc, #312]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	494a      	ldr	r1, [pc, #296]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f98:	d101      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 808b 	beq.w	80030de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4a39      	ldr	r2, [pc, #228]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd4:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fd fee0 	bl	8000db0 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff4:	f7fd fedc 	bl	8000db0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e38d      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d035      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	429a      	cmp	r2, r3
 800302e:	d02e      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003030:	4b20      	ldr	r3, [pc, #128]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a1a      	ldr	r2, [pc, #104]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003052:	4a18      	ldr	r2, [pc, #96]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003058:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d114      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fd fea4 	bl	8000db0 <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306a:	e00a      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306c:	f7fd fea0 	bl	8000db0 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e34f      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003082:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0ee      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800309a:	d111      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030aa:	400b      	ands	r3, r1
 80030ac:	4901      	ldr	r1, [pc, #4]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
 80030b2:	e00b      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40007000 	.word	0x40007000
 80030bc:	0ffffcff 	.word	0x0ffffcff
 80030c0:	4bb3      	ldr	r3, [pc, #716]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4ab2      	ldr	r2, [pc, #712]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030ca:	6093      	str	r3, [r2, #8]
 80030cc:	4bb0      	ldr	r3, [pc, #704]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	49ad      	ldr	r1, [pc, #692]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030ea:	4ba9      	ldr	r3, [pc, #676]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f0:	4aa7      	ldr	r2, [pc, #668]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030fa:	4ba5      	ldr	r3, [pc, #660]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	49a2      	ldr	r1, [pc, #648]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003118:	4b9d      	ldr	r3, [pc, #628]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003126:	499a      	ldr	r1, [pc, #616]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800313a:	4b95      	ldr	r3, [pc, #596]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003148:	4991      	ldr	r1, [pc, #580]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800315c:	4b8c      	ldr	r3, [pc, #560]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800316a:	4989      	ldr	r1, [pc, #548]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800317e:	4b84      	ldr	r3, [pc, #528]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4980      	ldr	r1, [pc, #512]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a0:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f023 0203 	bic.w	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4978      	ldr	r1, [pc, #480]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	f023 020c 	bic.w	r2, r3, #12
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d0:	496f      	ldr	r1, [pc, #444]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031e4:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f2:	4967      	ldr	r1, [pc, #412]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003206:	4b62      	ldr	r3, [pc, #392]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	495e      	ldr	r1, [pc, #376]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003228:	4b59      	ldr	r3, [pc, #356]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	4956      	ldr	r1, [pc, #344]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800324a:	4b51      	ldr	r3, [pc, #324]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	494d      	ldr	r1, [pc, #308]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800326c:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327a:	4945      	ldr	r1, [pc, #276]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800328e:	4b40      	ldr	r3, [pc, #256]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329c:	493c      	ldr	r1, [pc, #240]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032b0:	4b37      	ldr	r3, [pc, #220]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032be:	4934      	ldr	r1, [pc, #208]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d011      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032d2:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e0:	492b      	ldr	r1, [pc, #172]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032f0:	d101      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003320:	491b      	ldr	r1, [pc, #108]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003344:	4912      	ldr	r1, [pc, #72]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003358:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003368:	4909      	ldr	r1, [pc, #36]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00f      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003382:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	e002      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	4985      	ldr	r1, [pc, #532]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033a8:	4b80      	ldr	r3, [pc, #512]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b8:	497c      	ldr	r1, [pc, #496]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d005      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ce:	f040 80d6 	bne.w	800357e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033d2:	4b76      	ldr	r3, [pc, #472]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a75      	ldr	r2, [pc, #468]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033de:	f7fd fce7 	bl	8000db0 <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033e4:	e008      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033e6:	f7fd fce3 	bl	8000db0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b64      	cmp	r3, #100	; 0x64
 80033f2:	d901      	bls.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e194      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033f8:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f0      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d021      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	d11d      	bne.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341e:	0c1b      	lsrs	r3, r3, #16
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003426:	4b61      	ldr	r3, [pc, #388]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800342c:	0e1b      	lsrs	r3, r3, #24
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	019a      	lsls	r2, r3, #6
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	061b      	lsls	r3, r3, #24
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	071b      	lsls	r3, r3, #28
 800344c:	4957      	ldr	r1, [pc, #348]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d004      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800347e:	d129      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003480:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003494:	0f1b      	lsrs	r3, r3, #28
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	019a      	lsls	r2, r3, #6
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	071b      	lsls	r3, r3, #28
 80034b4:	493d      	ldr	r1, [pc, #244]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034bc:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c2:	f023 021f 	bic.w	r2, r3, #31
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	3b01      	subs	r3, #1
 80034cc:	4937      	ldr	r1, [pc, #220]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01d      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034e0:	4b32      	ldr	r3, [pc, #200]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e6:	0e1b      	lsrs	r3, r3, #24
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034ee:	4b2f      	ldr	r3, [pc, #188]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f4:	0f1b      	lsrs	r3, r3, #28
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	019a      	lsls	r2, r3, #6
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	071b      	lsls	r3, r3, #28
 8003514:	4925      	ldr	r1, [pc, #148]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d011      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	019a      	lsls	r2, r3, #6
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	041b      	lsls	r3, r3, #16
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	071b      	lsls	r3, r3, #28
 8003544:	4919      	ldr	r1, [pc, #100]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a16      	ldr	r2, [pc, #88]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003558:	f7fd fc2a 	bl	8000db0 <HAL_GetTick>
 800355c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003560:	f7fd fc26 	bl	8000db0 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e0d7      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b01      	cmp	r3, #1
 8003582:	f040 80cd 	bne.w	8003720 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a08      	ldr	r2, [pc, #32]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800358c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003592:	f7fd fc0d 	bl	8000db0 <HAL_GetTick>
 8003596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003598:	e00a      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800359a:	f7fd fc09 	bl	8000db0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b64      	cmp	r3, #100	; 0x64
 80035a6:	d903      	bls.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0ba      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80035ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035b0:	4b5e      	ldr	r3, [pc, #376]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035bc:	d0ed      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d02e      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d12a      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035e6:	4b51      	ldr	r3, [pc, #324]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035f4:	4b4d      	ldr	r3, [pc, #308]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	0f1b      	lsrs	r3, r3, #28
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	019a      	lsls	r2, r3, #6
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	4944      	ldr	r1, [pc, #272]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003622:	4b42      	ldr	r3, [pc, #264]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003628:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	493d      	ldr	r1, [pc, #244]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003650:	d11d      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003658:	0e1b      	lsrs	r3, r3, #24
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003660:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	0f1b      	lsrs	r3, r3, #28
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	019a      	lsls	r2, r3, #6
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	041b      	lsls	r3, r3, #16
 800367a:	431a      	orrs	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	071b      	lsls	r3, r3, #28
 8003686:	4929      	ldr	r1, [pc, #164]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d028      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800369a:	4b24      	ldr	r3, [pc, #144]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	0e1b      	lsrs	r3, r3, #24
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4917      	ldr	r1, [pc, #92]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4911      	ldr	r1, [pc, #68]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0e      	ldr	r2, [pc, #56]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f8:	f7fd fb5a 	bl	8000db0 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003700:	f7fd fb56 	bl	8000db0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e007      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800371a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800371e:	d1ef      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800

08003730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e040      	b.n	80037c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd f932 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f82c 	bl	80037cc <UART_SetConfig>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e022      	b.n	80037c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 faca 	bl	8003d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fb51 	bl	8003e64 <UART_CheckIdleState>
 80037c2:	4603      	mov	r3, r0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4bb1      	ldr	r3, [pc, #708]	; (8003ac0 <UART_SetConfig+0x2f4>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	6939      	ldr	r1, [r7, #16]
 8003804:	430b      	orrs	r3, r1
 8003806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a9f      	ldr	r2, [pc, #636]	; (8003ac4 <UART_SetConfig+0x2f8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d121      	bne.n	8003890 <UART_SetConfig+0xc4>
 800384c:	4b9e      	ldr	r3, [pc, #632]	; (8003ac8 <UART_SetConfig+0x2fc>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b03      	cmp	r3, #3
 8003858:	d816      	bhi.n	8003888 <UART_SetConfig+0xbc>
 800385a:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x94>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003871 	.word	0x08003871
 8003864:	0800387d 	.word	0x0800387d
 8003868:	08003877 	.word	0x08003877
 800386c:	08003883 	.word	0x08003883
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e151      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003876:	2302      	movs	r3, #2
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e14e      	b.n	8003b1a <UART_SetConfig+0x34e>
 800387c:	2304      	movs	r3, #4
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e14b      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003882:	2308      	movs	r3, #8
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e148      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003888:	2310      	movs	r3, #16
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	bf00      	nop
 800388e:	e144      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a8d      	ldr	r2, [pc, #564]	; (8003acc <UART_SetConfig+0x300>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d134      	bne.n	8003904 <UART_SetConfig+0x138>
 800389a:	4b8b      	ldr	r3, [pc, #556]	; (8003ac8 <UART_SetConfig+0x2fc>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b0c      	cmp	r3, #12
 80038a6:	d829      	bhi.n	80038fc <UART_SetConfig+0x130>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0xe4>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038fd 	.word	0x080038fd
 80038b8:	080038fd 	.word	0x080038fd
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	080038fd 	.word	0x080038fd
 80038d0:	080038eb 	.word	0x080038eb
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	080038fd 	.word	0x080038fd
 80038e0:	080038f7 	.word	0x080038f7
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e117      	b.n	8003b1a <UART_SetConfig+0x34e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e114      	b.n	8003b1a <UART_SetConfig+0x34e>
 80038f0:	2304      	movs	r3, #4
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e111      	b.n	8003b1a <UART_SetConfig+0x34e>
 80038f6:	2308      	movs	r3, #8
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e10e      	b.n	8003b1a <UART_SetConfig+0x34e>
 80038fc:	2310      	movs	r3, #16
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	bf00      	nop
 8003902:	e10a      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a71      	ldr	r2, [pc, #452]	; (8003ad0 <UART_SetConfig+0x304>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d120      	bne.n	8003950 <UART_SetConfig+0x184>
 800390e:	4b6e      	ldr	r3, [pc, #440]	; (8003ac8 <UART_SetConfig+0x2fc>)
 8003910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003918:	2b10      	cmp	r3, #16
 800391a:	d00f      	beq.n	800393c <UART_SetConfig+0x170>
 800391c:	2b10      	cmp	r3, #16
 800391e:	d802      	bhi.n	8003926 <UART_SetConfig+0x15a>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <UART_SetConfig+0x164>
 8003924:	e010      	b.n	8003948 <UART_SetConfig+0x17c>
 8003926:	2b20      	cmp	r3, #32
 8003928:	d005      	beq.n	8003936 <UART_SetConfig+0x16a>
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d009      	beq.n	8003942 <UART_SetConfig+0x176>
 800392e:	e00b      	b.n	8003948 <UART_SetConfig+0x17c>
 8003930:	2300      	movs	r3, #0
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e0f1      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003936:	2302      	movs	r3, #2
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e0ee      	b.n	8003b1a <UART_SetConfig+0x34e>
 800393c:	2304      	movs	r3, #4
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e0eb      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003942:	2308      	movs	r3, #8
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e0e8      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003948:	2310      	movs	r3, #16
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	bf00      	nop
 800394e:	e0e4      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a5f      	ldr	r2, [pc, #380]	; (8003ad4 <UART_SetConfig+0x308>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d120      	bne.n	800399c <UART_SetConfig+0x1d0>
 800395a:	4b5b      	ldr	r3, [pc, #364]	; (8003ac8 <UART_SetConfig+0x2fc>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d00f      	beq.n	8003988 <UART_SetConfig+0x1bc>
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d802      	bhi.n	8003972 <UART_SetConfig+0x1a6>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <UART_SetConfig+0x1b0>
 8003970:	e010      	b.n	8003994 <UART_SetConfig+0x1c8>
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d005      	beq.n	8003982 <UART_SetConfig+0x1b6>
 8003976:	2bc0      	cmp	r3, #192	; 0xc0
 8003978:	d009      	beq.n	800398e <UART_SetConfig+0x1c2>
 800397a:	e00b      	b.n	8003994 <UART_SetConfig+0x1c8>
 800397c:	2300      	movs	r3, #0
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e0cb      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003982:	2302      	movs	r3, #2
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e0c8      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003988:	2304      	movs	r3, #4
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e0c5      	b.n	8003b1a <UART_SetConfig+0x34e>
 800398e:	2308      	movs	r3, #8
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0c2      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003994:	2310      	movs	r3, #16
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	bf00      	nop
 800399a:	e0be      	b.n	8003b1a <UART_SetConfig+0x34e>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a4d      	ldr	r2, [pc, #308]	; (8003ad8 <UART_SetConfig+0x30c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d124      	bne.n	80039f0 <UART_SetConfig+0x224>
 80039a6:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <UART_SetConfig+0x2fc>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b4:	d012      	beq.n	80039dc <UART_SetConfig+0x210>
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ba:	d802      	bhi.n	80039c2 <UART_SetConfig+0x1f6>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <UART_SetConfig+0x204>
 80039c0:	e012      	b.n	80039e8 <UART_SetConfig+0x21c>
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c6:	d006      	beq.n	80039d6 <UART_SetConfig+0x20a>
 80039c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039cc:	d009      	beq.n	80039e2 <UART_SetConfig+0x216>
 80039ce:	e00b      	b.n	80039e8 <UART_SetConfig+0x21c>
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0a1      	b.n	8003b1a <UART_SetConfig+0x34e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e09e      	b.n	8003b1a <UART_SetConfig+0x34e>
 80039dc:	2304      	movs	r3, #4
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e09b      	b.n	8003b1a <UART_SetConfig+0x34e>
 80039e2:	2308      	movs	r3, #8
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e098      	b.n	8003b1a <UART_SetConfig+0x34e>
 80039e8:	2310      	movs	r3, #16
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	bf00      	nop
 80039ee:	e094      	b.n	8003b1a <UART_SetConfig+0x34e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a39      	ldr	r2, [pc, #228]	; (8003adc <UART_SetConfig+0x310>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d124      	bne.n	8003a44 <UART_SetConfig+0x278>
 80039fa:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <UART_SetConfig+0x2fc>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a08:	d012      	beq.n	8003a30 <UART_SetConfig+0x264>
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0e:	d802      	bhi.n	8003a16 <UART_SetConfig+0x24a>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <UART_SetConfig+0x258>
 8003a14:	e012      	b.n	8003a3c <UART_SetConfig+0x270>
 8003a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1a:	d006      	beq.n	8003a2a <UART_SetConfig+0x25e>
 8003a1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a20:	d009      	beq.n	8003a36 <UART_SetConfig+0x26a>
 8003a22:	e00b      	b.n	8003a3c <UART_SetConfig+0x270>
 8003a24:	2301      	movs	r3, #1
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	e077      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	77fb      	strb	r3, [r7, #31]
 8003a2e:	e074      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a30:	2304      	movs	r3, #4
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e071      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a36:	2308      	movs	r3, #8
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e06e      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	bf00      	nop
 8003a42:	e06a      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a25      	ldr	r2, [pc, #148]	; (8003ae0 <UART_SetConfig+0x314>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d124      	bne.n	8003a98 <UART_SetConfig+0x2cc>
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <UART_SetConfig+0x2fc>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d012      	beq.n	8003a84 <UART_SetConfig+0x2b8>
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a62:	d802      	bhi.n	8003a6a <UART_SetConfig+0x29e>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d007      	beq.n	8003a78 <UART_SetConfig+0x2ac>
 8003a68:	e012      	b.n	8003a90 <UART_SetConfig+0x2c4>
 8003a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6e:	d006      	beq.n	8003a7e <UART_SetConfig+0x2b2>
 8003a70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a74:	d009      	beq.n	8003a8a <UART_SetConfig+0x2be>
 8003a76:	e00b      	b.n	8003a90 <UART_SetConfig+0x2c4>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e04d      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e04a      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a84:	2304      	movs	r3, #4
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e047      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e044      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a90:	2310      	movs	r3, #16
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	bf00      	nop
 8003a96:	e040      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <UART_SetConfig+0x318>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d139      	bne.n	8003b16 <UART_SetConfig+0x34a>
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <UART_SetConfig+0x2fc>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab0:	d027      	beq.n	8003b02 <UART_SetConfig+0x336>
 8003ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab6:	d817      	bhi.n	8003ae8 <UART_SetConfig+0x31c>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <UART_SetConfig+0x32a>
 8003abc:	e027      	b.n	8003b0e <UART_SetConfig+0x342>
 8003abe:	bf00      	nop
 8003ac0:	efff69f3 	.word	0xefff69f3
 8003ac4:	40011000 	.word	0x40011000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40004800 	.word	0x40004800
 8003ad4:	40004c00 	.word	0x40004c00
 8003ad8:	40005000 	.word	0x40005000
 8003adc:	40011400 	.word	0x40011400
 8003ae0:	40007800 	.word	0x40007800
 8003ae4:	40007c00 	.word	0x40007c00
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	d006      	beq.n	8003afc <UART_SetConfig+0x330>
 8003aee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003af2:	d009      	beq.n	8003b08 <UART_SetConfig+0x33c>
 8003af4:	e00b      	b.n	8003b0e <UART_SetConfig+0x342>
 8003af6:	2300      	movs	r3, #0
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e00e      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003afc:	2302      	movs	r3, #2
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e00b      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003b02:	2304      	movs	r3, #4
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e008      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003b08:	2308      	movs	r3, #8
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e005      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003b0e:	2310      	movs	r3, #16
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	bf00      	nop
 8003b14:	e001      	b.n	8003b1a <UART_SetConfig+0x34e>
 8003b16:	2310      	movs	r3, #16
 8003b18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d17f      	bne.n	8003c24 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003b24:	7ffb      	ldrb	r3, [r7, #31]
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d85c      	bhi.n	8003be4 <UART_SetConfig+0x418>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <UART_SetConfig+0x364>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b75 	.word	0x08003b75
 8003b38:	08003b95 	.word	0x08003b95
 8003b3c:	08003be5 	.word	0x08003be5
 8003b40:	08003bad 	.word	0x08003bad
 8003b44:	08003be5 	.word	0x08003be5
 8003b48:	08003be5 	.word	0x08003be5
 8003b4c:	08003be5 	.word	0x08003be5
 8003b50:	08003bcd 	.word	0x08003bcd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7ff f99e 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	005a      	lsls	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	085b      	lsrs	r3, r3, #1
 8003b64:	441a      	add	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	61bb      	str	r3, [r7, #24]
        break;
 8003b72:	e03a      	b.n	8003bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b74:	f7ff f9a2 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	005a      	lsls	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	085b      	lsrs	r3, r3, #1
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	61bb      	str	r3, [r7, #24]
        break;
 8003b92:	e02a      	b.n	8003bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	085a      	lsrs	r2, r3, #1
 8003b9a:	4b5f      	ldr	r3, [pc, #380]	; (8003d18 <UART_SetConfig+0x54c>)
 8003b9c:	4413      	add	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6852      	ldr	r2, [r2, #4]
 8003ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	61bb      	str	r3, [r7, #24]
        break;
 8003baa:	e01e      	b.n	8003bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bac:	f7ff f88e 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8003bb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	005a      	lsls	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	085b      	lsrs	r3, r3, #1
 8003bbc:	441a      	add	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	61bb      	str	r3, [r7, #24]
        break;
 8003bca:	e00e      	b.n	8003bea <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	61bb      	str	r3, [r7, #24]
        break;
 8003be2:	e002      	b.n	8003bea <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
        break;
 8003be8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b0f      	cmp	r3, #15
 8003bee:	d916      	bls.n	8003c1e <UART_SetConfig+0x452>
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d212      	bcs.n	8003c1e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	f023 030f 	bic.w	r3, r3, #15
 8003c00:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	897a      	ldrh	r2, [r7, #10]
 8003c1a:	60da      	str	r2, [r3, #12]
 8003c1c:	e070      	b.n	8003d00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	75fb      	strb	r3, [r7, #23]
 8003c22:	e06d      	b.n	8003d00 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003c24:	7ffb      	ldrb	r3, [r7, #31]
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d859      	bhi.n	8003cde <UART_SetConfig+0x512>
 8003c2a:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <UART_SetConfig+0x464>)
 8003c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c73 	.word	0x08003c73
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003cdf 	.word	0x08003cdf
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003cdf 	.word	0x08003cdf
 8003c48:	08003cdf 	.word	0x08003cdf
 8003c4c:	08003cdf 	.word	0x08003cdf
 8003c50:	08003cc7 	.word	0x08003cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c54:	f7ff f91e 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 8003c58:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	085a      	lsrs	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	441a      	add	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e038      	b.n	8003ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c72:	f7ff f923 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003c76:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	085a      	lsrs	r2, r3, #1
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	61bb      	str	r3, [r7, #24]
        break;
 8003c8e:	e029      	b.n	8003ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	085a      	lsrs	r2, r3, #1
 8003c96:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <UART_SetConfig+0x550>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6852      	ldr	r2, [r2, #4]
 8003c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	61bb      	str	r3, [r7, #24]
        break;
 8003ca6:	e01d      	b.n	8003ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ca8:	f7ff f810 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8003cac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085a      	lsrs	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	441a      	add	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	61bb      	str	r3, [r7, #24]
        break;
 8003cc4:	e00e      	b.n	8003ce4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	61bb      	str	r3, [r7, #24]
        break;
 8003cdc:	e002      	b.n	8003ce4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ce2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d908      	bls.n	8003cfc <UART_SetConfig+0x530>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf0:	d204      	bcs.n	8003cfc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	e001      	b.n	8003d00 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	01e84800 	.word	0x01e84800
 8003d1c:	00f42400 	.word	0x00f42400

08003d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f003 0310 	and.w	r3, r3, #16
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01a      	beq.n	8003e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d10a      	bne.n	8003e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	605a      	str	r2, [r3, #4]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e72:	f7fc ff9d 	bl	8000db0 <HAL_GetTick>
 8003e76:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d10e      	bne.n	8003ea4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 f82a 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e020      	b.n	8003ee6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d10e      	bne.n	8003ed0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f814 	bl	8003eee <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e00a      	b.n	8003ee6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efe:	e05d      	b.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f06:	d059      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f08:	f7fc ff52 	bl	8000db0 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11b      	bne.n	8003f56 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f2c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e042      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02b      	beq.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f72:	d123      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f7c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2220      	movs	r2, #32
 8003fae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e00f      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69da      	ldr	r2, [r3, #28]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d092      	beq.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	f107 001c 	add.w	r0, r7, #28
 8003ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d120      	bne.n	800403e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004000:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	4b20      	ldr	r3, [pc, #128]	; (8004090 <USB_CoreInit+0xac>)
 800400e:	4013      	ands	r3, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d105      	bne.n	8004032 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa52 	bl	80044dc <USB_CoreReset>
 8004038:	4603      	mov	r3, r0
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e010      	b.n	8004060 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fa46 	bl	80044dc <USB_CoreReset>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10b      	bne.n	800407e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f043 0206 	orr.w	r2, r3, #6
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800407e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800408a:	b004      	add	sp, #16
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	ffbdffbf 	.word	0xffbdffbf

08004094 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 0201 	bic.w	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	460b      	mov	r3, r1
 80040c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d106      	bne.n	80040e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]
 80040e0:	e00b      	b.n	80040fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]
 80040f4:	e001      	b.n	80040fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e003      	b.n	8004102 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040fa:	2032      	movs	r0, #50	; 0x32
 80040fc:	f7fc fe64 	bl	8000dc8 <HAL_Delay>

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800410c:	b084      	sub	sp, #16
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800411a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e009      	b.n	8004140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	3340      	adds	r3, #64	; 0x40
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	2200      	movs	r2, #0
 8004138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3301      	adds	r3, #1
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0e      	cmp	r3, #14
 8004144:	d9f2      	bls.n	800412c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	2b00      	cmp	r3, #0
 800414a:	d11c      	bne.n	8004186 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800415a:	f043 0302 	orr.w	r3, r3, #2
 800415e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e005      	b.n	8004192 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004198:	461a      	mov	r2, r3
 800419a:	2300      	movs	r3, #0
 800419c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a4:	4619      	mov	r1, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	461a      	mov	r2, r3
 80041ae:	680b      	ldr	r3, [r1, #0]
 80041b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d10c      	bne.n	80041d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d104      	bne.n	80041c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f959 	bl	8004478 <USB_SetDevSpeed>
 80041c6:	e018      	b.n	80041fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041c8:	2101      	movs	r1, #1
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f954 	bl	8004478 <USB_SetDevSpeed>
 80041d0:	e013      	b.n	80041fa <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d10c      	bne.n	80041f2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d104      	bne.n	80041e8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041de:	2100      	movs	r1, #0
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f949 	bl	8004478 <USB_SetDevSpeed>
 80041e6:	e008      	b.n	80041fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041e8:	2101      	movs	r1, #1
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f944 	bl	8004478 <USB_SetDevSpeed>
 80041f0:	e003      	b.n	80041fa <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041f2:	2103      	movs	r1, #3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f93f 	bl	8004478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041fa:	2110      	movs	r1, #16
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f8f3 	bl	80043e8 <USB_FlushTxFifo>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f911 	bl	8004434 <USB_FlushRxFifo>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004222:	461a      	mov	r2, r3
 8004224:	2300      	movs	r3, #0
 8004226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	461a      	mov	r2, r3
 8004230:	2300      	movs	r3, #0
 8004232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	461a      	mov	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e043      	b.n	80042ce <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425c:	d118      	bne.n	8004290 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10a      	bne.n	800427a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	461a      	mov	r2, r3
 8004272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e013      	b.n	80042a2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	461a      	mov	r2, r3
 8004288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	e008      	b.n	80042a2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	461a      	mov	r2, r3
 80042b0:	2300      	movs	r3, #0
 80042b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	3301      	adds	r3, #1
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d3b7      	bcc.n	8004246 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e043      	b.n	8004364 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f2:	d118      	bne.n	8004326 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	461a      	mov	r2, r3
 8004308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e013      	b.n	8004338 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e008      	b.n	8004338 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004344:	461a      	mov	r2, r3
 8004346:	2300      	movs	r3, #0
 8004348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800435c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	429a      	cmp	r2, r3
 800436a:	d3b7      	bcc.n	80042dc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800437e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800438c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800438e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	f043 0210 	orr.w	r2, r3, #16
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <USB_DevInit+0x2d4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f043 0208 	orr.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699a      	ldr	r2, [r3, #24]
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <USB_DevInit+0x2d8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043dc:	b004      	add	sp, #16
 80043de:	4770      	bx	lr
 80043e0:	803c3800 	.word	0x803c3800
 80043e4:	40000004 	.word	0x40000004

080043e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3301      	adds	r3, #1
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <USB_FlushTxFifo+0x48>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d901      	bls.n	8004414 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e006      	b.n	8004422 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d0f0      	beq.n	8004402 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	00030d40 	.word	0x00030d40

08004434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2210      	movs	r2, #16
 8004444:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <USB_FlushRxFifo+0x40>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e006      	b.n	8004466 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d0f0      	beq.n	8004446 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	00030d40 	.word	0x00030d40

08004478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	68f9      	ldr	r1, [r7, #12]
 8004494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004498:	4313      	orrs	r3, r2
 800449a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80044ca:	2003      	movs	r0, #3
 80044cc:	f7fc fc7c 	bl	8000dc8 <HAL_Delay>

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <USB_CoreReset+0x64>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e01b      	b.n	8004532 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	daf2      	bge.n	80044e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f043 0201 	orr.w	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a09      	ldr	r2, [pc, #36]	; (8004540 <USB_CoreReset+0x64>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d901      	bls.n	8004524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e006      	b.n	8004532 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d0f0      	beq.n	8004512 <USB_CoreReset+0x36>

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	00030d40 	.word	0x00030d40

08004544 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800454a:	f001 f9cb 	bl	80058e4 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800454e:	4b17      	ldr	r3, [pc, #92]	; (80045ac <MX_LWIP_Init+0x68>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004554:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <MX_LWIP_Init+0x6c>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800455a:	4b16      	ldr	r3, [pc, #88]	; (80045b4 <MX_LWIP_Init+0x70>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004560:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <MX_LWIP_Init+0x74>)
 8004562:	9302      	str	r3, [sp, #8]
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <MX_LWIP_Init+0x78>)
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	2300      	movs	r3, #0
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <MX_LWIP_Init+0x70>)
 800456e:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <MX_LWIP_Init+0x6c>)
 8004570:	490e      	ldr	r1, [pc, #56]	; (80045ac <MX_LWIP_Init+0x68>)
 8004572:	4813      	ldr	r0, [pc, #76]	; (80045c0 <MX_LWIP_Init+0x7c>)
 8004574:	f001 fe5c 	bl	8006230 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004578:	4811      	ldr	r0, [pc, #68]	; (80045c0 <MX_LWIP_Init+0x7c>)
 800457a:	f002 f80f 	bl	800659c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800457e:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <MX_LWIP_Init+0x7c>)
 8004580:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004590:	480b      	ldr	r0, [pc, #44]	; (80045c0 <MX_LWIP_Init+0x7c>)
 8004592:	f002 f813 	bl	80065bc <netif_set_up>
 8004596:	e002      	b.n	800459e <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004598:	4809      	ldr	r0, [pc, #36]	; (80045c0 <MX_LWIP_Init+0x7c>)
 800459a:	f002 f87b 	bl	8006694 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800459e:	4808      	ldr	r0, [pc, #32]	; (80045c0 <MX_LWIP_Init+0x7c>)
 80045a0:	f00a f890 	bl	800e6c4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000b1c 	.word	0x20000b1c
 80045b0:	20000b20 	.word	0x20000b20
 80045b4:	20000b24 	.word	0x20000b24
 80045b8:	08012081 	.word	0x08012081
 80045bc:	08004b7d 	.word	0x08004b7d
 80045c0:	20000ae8 	.word	0x20000ae8

080045c4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80045c8:	4803      	ldr	r0, [pc, #12]	; (80045d8 <MX_LWIP_Process+0x14>)
 80045ca:	f000 fab7 	bl	8004b3c <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 80045ce:	f008 fffd 	bl	800d5cc <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000ae8 	.word	0x20000ae8

080045dc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	; 0x38
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a4e      	ldr	r2, [pc, #312]	; (8004734 <HAL_ETH_MspInit+0x158>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	f040 8096 	bne.w	800472c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	4a4c      	ldr	r2, [pc, #304]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800460a:	6313      	str	r3, [r2, #48]	; 0x30
 800460c:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4a46      	ldr	r2, [pc, #280]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800461e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004622:	6313      	str	r3, [r2, #48]	; 0x30
 8004624:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4a40      	ldr	r2, [pc, #256]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800463a:	6313      	str	r3, [r2, #48]	; 0x30
 800463c:	4b3e      	ldr	r3, [pc, #248]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004648:	4b3b      	ldr	r3, [pc, #236]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	4a3a      	ldr	r2, [pc, #232]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	6313      	str	r3, [r2, #48]	; 0x30
 8004654:	4b38      	ldr	r3, [pc, #224]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	617b      	str	r3, [r7, #20]
 800465e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004660:	4b35      	ldr	r3, [pc, #212]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	4a34      	ldr	r2, [pc, #208]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6313      	str	r3, [r2, #48]	; 0x30
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004678:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	4a2e      	ldr	r2, [pc, #184]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800467e:	f043 0302 	orr.w	r3, r3, #2
 8004682:	6313      	str	r3, [r2, #48]	; 0x30
 8004684:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004690:	4b29      	ldr	r3, [pc, #164]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a28      	ldr	r2, [pc, #160]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 8004696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800469a:	6313      	str	r3, [r2, #48]	; 0x30
 800469c:	4b26      	ldr	r3, [pc, #152]	; (8004738 <HAL_ETH_MspInit+0x15c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80046a8:	2332      	movs	r3, #50	; 0x32
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ac:	2302      	movs	r3, #2
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b4:	2303      	movs	r3, #3
 80046b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046b8:	230b      	movs	r3, #11
 80046ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c0:	4619      	mov	r1, r3
 80046c2:	481e      	ldr	r0, [pc, #120]	; (800473c <HAL_ETH_MspInit+0x160>)
 80046c4:	f7fd fbfc 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80046c8:	2386      	movs	r3, #134	; 0x86
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046cc:	2302      	movs	r3, #2
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d4:	2303      	movs	r3, #3
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046d8:	230b      	movs	r3, #11
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e0:	4619      	mov	r1, r3
 80046e2:	4817      	ldr	r0, [pc, #92]	; (8004740 <HAL_ETH_MspInit+0x164>)
 80046e4:	f7fd fbec 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80046e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ee:	2302      	movs	r3, #2
 80046f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046f6:	2303      	movs	r3, #3
 80046f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046fa:	230b      	movs	r3, #11
 80046fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80046fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004702:	4619      	mov	r1, r3
 8004704:	480f      	ldr	r0, [pc, #60]	; (8004744 <HAL_ETH_MspInit+0x168>)
 8004706:	f7fd fbdb 	bl	8001ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800470a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800471c:	230b      	movs	r3, #11
 800471e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004724:	4619      	mov	r1, r3
 8004726:	4808      	ldr	r0, [pc, #32]	; (8004748 <HAL_ETH_MspInit+0x16c>)
 8004728:	f7fd fbca 	bl	8001ec0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800472c:	bf00      	nop
 800472e:	3738      	adds	r7, #56	; 0x38
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40028000 	.word	0x40028000
 8004738:	40023800 	.word	0x40023800
 800473c:	40020800 	.word	0x40020800
 8004740:	40020000 	.word	0x40020000
 8004744:	40020400 	.word	0x40020400
 8004748:	40021800 	.word	0x40021800

0800474c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004758:	4b49      	ldr	r3, [pc, #292]	; (8004880 <low_level_init+0x134>)
 800475a:	4a4a      	ldr	r2, [pc, #296]	; (8004884 <low_level_init+0x138>)
 800475c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800475e:	4b48      	ldr	r3, [pc, #288]	; (8004880 <low_level_init+0x134>)
 8004760:	2201      	movs	r2, #1
 8004762:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004764:	4b46      	ldr	r3, [pc, #280]	; (8004880 <low_level_init+0x134>)
 8004766:	2200      	movs	r2, #0
 8004768:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800476a:	2300      	movs	r3, #0
 800476c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004772:	23e1      	movs	r3, #225	; 0xe1
 8004774:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004776:	2300      	movs	r3, #0
 8004778:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800477a:	2300      	movs	r3, #0
 800477c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800477e:	2300      	movs	r3, #0
 8004780:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004782:	4a3f      	ldr	r2, [pc, #252]	; (8004880 <low_level_init+0x134>)
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <low_level_init+0x134>)
 800478c:	2200      	movs	r2, #0
 800478e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004790:	4b3b      	ldr	r3, [pc, #236]	; (8004880 <low_level_init+0x134>)
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004796:	4b3a      	ldr	r3, [pc, #232]	; (8004880 <low_level_init+0x134>)
 8004798:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800479c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800479e:	4838      	ldr	r0, [pc, #224]	; (8004880 <low_level_init+0x134>)
 80047a0:	f7fc fc1a 	bl	8000fd8 <HAL_ETH_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d108      	bne.n	80047c0 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80047c0:	2304      	movs	r3, #4
 80047c2:	4a31      	ldr	r2, [pc, #196]	; (8004888 <low_level_init+0x13c>)
 80047c4:	4931      	ldr	r1, [pc, #196]	; (800488c <low_level_init+0x140>)
 80047c6:	482e      	ldr	r0, [pc, #184]	; (8004880 <low_level_init+0x134>)
 80047c8:	f7fc fda2 	bl	8001310 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80047cc:	2304      	movs	r3, #4
 80047ce:	4a30      	ldr	r2, [pc, #192]	; (8004890 <low_level_init+0x144>)
 80047d0:	4930      	ldr	r1, [pc, #192]	; (8004894 <low_level_init+0x148>)
 80047d2:	482b      	ldr	r0, [pc, #172]	; (8004880 <low_level_init+0x134>)
 80047d4:	f7fc fe05 	bl	80013e2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2206      	movs	r2, #6
 80047dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80047e0:	4b27      	ldr	r3, [pc, #156]	; (8004880 <low_level_init+0x134>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <low_level_init+0x134>)
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	785a      	ldrb	r2, [r3, #1]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <low_level_init+0x134>)
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	789a      	ldrb	r2, [r3, #2]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004804:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <low_level_init+0x134>)
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	78da      	ldrb	r2, [r3, #3]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <low_level_init+0x134>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	791a      	ldrb	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <low_level_init+0x134>)
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	795a      	ldrb	r2, [r3, #5]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800482e:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004836:	f043 030a 	orr.w	r3, r3, #10
 800483a:	b2da      	uxtb	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004842:	480f      	ldr	r0, [pc, #60]	; (8004880 <low_level_init+0x134>)
 8004844:	f7fd f876 	bl	8001934 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004848:	f107 0310 	add.w	r3, r7, #16
 800484c:	461a      	mov	r2, r3
 800484e:	211d      	movs	r1, #29
 8004850:	480b      	ldr	r0, [pc, #44]	; (8004880 <low_level_init+0x134>)
 8004852:	f7fc ffa1 	bl	8001798 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f043 030b 	orr.w	r3, r3, #11
 800485c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	461a      	mov	r2, r3
 8004862:	211d      	movs	r1, #29
 8004864:	4806      	ldr	r0, [pc, #24]	; (8004880 <low_level_init+0x134>)
 8004866:	f7fc ffff 	bl	8001868 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800486a:	f107 0310 	add.w	r3, r7, #16
 800486e:	461a      	mov	r2, r3
 8004870:	211d      	movs	r1, #29
 8004872:	4803      	ldr	r0, [pc, #12]	; (8004880 <low_level_init+0x134>)
 8004874:	f7fc ff90 	bl	8001798 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004878:	bf00      	nop
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	200023f8 	.word	0x200023f8
 8004884:	40028000 	.word	0x40028000
 8004888:	20002440 	.word	0x20002440
 800488c:	20000b28 	.word	0x20000b28
 8004890:	20000ba8 	.word	0x20000ba8
 8004894:	20002378 	.word	0x20002378

08004898 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b08a      	sub	sp, #40	; 0x28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80048a2:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <low_level_output+0x138>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80048ba:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <low_level_output+0x138>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	e05a      	b.n	8004980 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	da03      	bge.n	80048da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80048d2:	23f8      	movs	r3, #248	; 0xf8
 80048d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80048d8:	e05c      	b.n	8004994 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	895b      	ldrh	r3, [r3, #10]
 80048de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80048e4:	e02f      	b.n	8004946 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	18d0      	adds	r0, r2, r3
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	18d1      	adds	r1, r2, r3
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	f00d fcc8 	bl	8012292 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	da03      	bge.n	8004918 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004910:	23f8      	movs	r3, #248	; 0xf8
 8004912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004916:	e03d      	b.n	8004994 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4413      	add	r3, r2
 8004924:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004928:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004934:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004940:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	4413      	add	r3, r2
 800494c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004950:	4293      	cmp	r3, r2
 8004952:	d8c8      	bhi.n	80048e6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	18d0      	adds	r0, r2, r3
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4413      	add	r3, r2
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4619      	mov	r1, r3
 8004966:	f00d fc94 	bl	8012292 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1a1      	bne.n	80048ca <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004986:	6979      	ldr	r1, [r7, #20]
 8004988:	4811      	ldr	r0, [pc, #68]	; (80049d0 <low_level_output+0x138>)
 800498a:	f7fc fd97 	bl	80014bc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004994:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <low_level_output+0x138>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	f241 0314 	movw	r3, #4116	; 0x1014
 800499c:	4413      	add	r3, r2
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <low_level_output+0x138>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80049b0:	4413      	add	r3, r2
 80049b2:	2220      	movs	r2, #32
 80049b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <low_level_output+0x138>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80049be:	4413      	add	r3, r2
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80049c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3728      	adds	r7, #40	; 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200023f8 	.word	0x200023f8

080049d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08c      	sub	sp, #48	; 0x30
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80049f8:	484f      	ldr	r0, [pc, #316]	; (8004b38 <low_level_input+0x164>)
 80049fa:	f7fc fe49 	bl	8001690 <HAL_ETH_GetReceivedFrame>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <low_level_input+0x34>
  
    return NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e092      	b.n	8004b2e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004a08:	4b4b      	ldr	r3, [pc, #300]	; (8004b38 <low_level_input+0x164>)
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004a0e:	4b4a      	ldr	r3, [pc, #296]	; (8004b38 <low_level_input+0x164>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004a20:	4619      	mov	r1, r3
 8004a22:	2000      	movs	r0, #0
 8004a24:	f001 fef2 	bl	800680c <pbuf_alloc>
 8004a28:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d04b      	beq.n	8004ac8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a30:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <low_level_input+0x164>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3e:	e040      	b.n	8004ac2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	895b      	ldrh	r3, [r3, #10]
 8004a44:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a4a:	e021      	b.n	8004a90 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	18d0      	adds	r0, r2, r3
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	18d1      	adds	r1, r2, r3
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	461a      	mov	r2, r3
 8004a64:	f00d fc15 	bl	8012292 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a7e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a8a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d8d6      	bhi.n	8004a4c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	18d0      	adds	r0, r2, r3
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	4413      	add	r3, r2
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f00d fbef 	bl	8012292 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1bb      	bne.n	8004a40 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004ac8:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <low_level_input+0x164>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	e00b      	b.n	8004aec <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <low_level_input+0x164>)
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d3ee      	bcc.n	8004ad4 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <low_level_input+0x164>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004afc:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <low_level_input+0x164>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	f241 0314 	movw	r3, #4116	; 0x1014
 8004b04:	4413      	add	r3, r2
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00d      	beq.n	8004b2c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <low_level_input+0x164>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	f241 0314 	movw	r3, #4116	; 0x1014
 8004b18:	4413      	add	r3, r2
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <low_level_input+0x164>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	f241 0308 	movw	r3, #4104	; 0x1008
 8004b26:	4413      	add	r3, r2
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3730      	adds	r7, #48	; 0x30
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	200023f8 	.word	0x200023f8

08004b3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff ff45 	bl	80049d4 <low_level_input>
 8004b4a:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d010      	beq.n	8004b74 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	4798      	blx	r3
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8004b60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d006      	beq.n	8004b76 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f002 f92f 	bl	8006dcc <pbuf_free>
    p = NULL;    
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e000      	b.n	8004b76 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004b74:	bf00      	nop
  }
}
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <ethernetif_init+0x1c>
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <ethernetif_init+0x48>)
 8004b8c:	f240 2211 	movw	r2, #529	; 0x211
 8004b90:	490d      	ldr	r1, [pc, #52]	; (8004bc8 <ethernetif_init+0x4c>)
 8004b92:	480e      	ldr	r0, [pc, #56]	; (8004bcc <ethernetif_init+0x50>)
 8004b94:	f00d fb90 	bl	80122b8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2273      	movs	r2, #115	; 0x73
 8004b9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2274      	movs	r2, #116	; 0x74
 8004ba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <ethernetif_init+0x54>)
 8004bac:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <ethernetif_init+0x58>)
 8004bb2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff fdc9 	bl	800474c <low_level_init>

  return ERR_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	08013150 	.word	0x08013150
 8004bc8:	0801316c 	.word	0x0801316c
 8004bcc:	0801317c 	.word	0x0801317c
 8004bd0:	08010515 	.word	0x08010515
 8004bd4:	08004899 	.word	0x08004899

08004bd8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bdc:	f7fc f8e8 	bl	8000db0 <HAL_GetTick>
 8004be0:	4603      	mov	r3, r0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <fs_open+0x16>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <fs_open+0x1c>
    return ERR_ARG;
 8004bfe:	f06f 030f 	mvn.w	r3, #15
 8004c02:	e028      	b.n	8004c56 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004c04:	4b16      	ldr	r3, [pc, #88]	; (8004c60 <fs_open+0x78>)
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	e020      	b.n	8004c4c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6838      	ldr	r0, [r7, #0]
 8004c12:	f7fb fb15 	bl	8000240 <strcmp>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d114      	bne.n	8004c46 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	7c1a      	ldrb	r2, [r3, #16]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e007      	b.n	8004c56 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1db      	bne.n	8004c0a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004c52:	f06f 0305 	mvn.w	r3, #5
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3710      	adds	r7, #16
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	0801df70 	.word	0x0801df70

08004c64 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	1ad3      	subs	r3, r2, r3
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004c9e:	222c      	movs	r2, #44	; 0x2c
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f00d fb00 	bl	80122a8 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004cb6:	202c      	movs	r0, #44	; 0x2c
 8004cb8:	f001 f8ce 	bl	8005e58 <mem_malloc>
 8004cbc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <http_state_alloc+0x1a>
    http_state_init(ret);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ffe6 	bl	8004c96 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004cca:	687b      	ldr	r3, [r7, #4]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ffbb 	bl	8004c64 <fs_close>
    hs->handle = NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <http_state_eof+0x38>
    pbuf_free(hs->req);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f002 f863 	bl	8006dcc <pbuf_free>
    hs->req = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <http_state_free+0x1a>
    http_state_eof(hs);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff ffd6 	bl	8004cd4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 ff2f 	bl	8005b8c <mem_free>
  }
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <http_write+0x22>
 8004d4c:	4b2c      	ldr	r3, [pc, #176]	; (8004e00 <http_write+0xc8>)
 8004d4e:	f240 2219 	movw	r2, #537	; 0x219
 8004d52:	492c      	ldr	r1, [pc, #176]	; (8004e04 <http_write+0xcc>)
 8004d54:	482c      	ldr	r0, [pc, #176]	; (8004e08 <http_write+0xd0>)
 8004d56:	f00d faaf 	bl	80122b8 <iprintf>
  len = *length;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004d60:	8afb      	ldrh	r3, [r7, #22]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <http_write+0x32>
    return ERR_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e045      	b.n	8004df6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004d70:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004d72:	8aba      	ldrh	r2, [r7, #20]
 8004d74:	8afb      	ldrh	r3, [r7, #22]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d201      	bcs.n	8004d7e <http_write+0x46>
    len = max_len;
 8004d7a:	8abb      	ldrh	r3, [r7, #20]
 8004d7c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004d86:	8afa      	ldrh	r2, [r7, #22]
 8004d88:	8abb      	ldrh	r3, [r7, #20]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d901      	bls.n	8004d92 <http_write+0x5a>
    len = max_len;
 8004d8e:	8abb      	ldrh	r3, [r7, #20]
 8004d90:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	8afa      	ldrh	r2, [r7, #22]
 8004d96:	68b9      	ldr	r1, [r7, #8]
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f006 fd9d 	bl	800b8d8 <tcp_write>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004da2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d10f      	bne.n	8004dcc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d902      	bls.n	8004dc6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	82fb      	strh	r3, [r7, #22]
 8004dc4:	e002      	b.n	8004dcc <http_write+0x94>
      } else {
        len /= 2;
 8004dc6:	8afb      	ldrh	r3, [r7, #22]
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004dcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d102      	bne.n	8004ddc <http_write+0xa4>
 8004dd6:	8afb      	ldrh	r3, [r7, #22]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d8da      	bhi.n	8004d92 <http_write+0x5a>

  if (err == ERR_OK) {
 8004ddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8afa      	ldrh	r2, [r7, #22]
 8004de8:	801a      	strh	r2, [r3, #0]
 8004dea:	e002      	b.n	8004df2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004df2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	080131e4 	.word	0x080131e4
 8004e04:	0801321c 	.word	0x0801321c
 8004e08:	0801322c 	.word	0x0801322c

08004e0c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f003 fe1f 	bl	8008a60 <tcp_arg>
  altcp_recv(pcb, NULL);
 8004e22:	2100      	movs	r1, #0
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f003 fe2d 	bl	8008a84 <tcp_recv>
  altcp_err(pcb, NULL);
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f003 fe6d 	bl	8008b0c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f003 fea2 	bl	8008b80 <tcp_poll>
  altcp_sent(pcb, NULL);
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f003 fe42 	bl	8008ac8 <tcp_sent>
  if (hs != NULL) {
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8004e4a:	68b8      	ldr	r0, [r7, #8]
 8004e4c:	f7ff ff62 	bl	8004d14 <http_state_free>
  }

  if (abort_conn) {
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f002 fd48 	bl	80078ec <tcp_abort>
    return ERR_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e00f      	b.n	8004e80 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f002 fc59 	bl	8007718 <tcp_close>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004e72:	2204      	movs	r2, #4
 8004e74:	4904      	ldr	r1, [pc, #16]	; (8004e88 <http_close_or_abort_conn+0x7c>)
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f003 fe82 	bl	8008b80 <tcp_poll>
  }
  return err;
 8004e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	0800554f 	.word	0x0800554f

08004e8c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004e96:	2200      	movs	r2, #0
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ffb6 	bl	8004e0c <http_close_or_abort_conn>
 8004ea0:	4603      	mov	r3, r0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffe8 	bl	8004e8c <http_close_conn>
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ffe6 	bl	8004eaa <http_eof>
    return 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e016      	b.n	8004f10 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fec6 	bl	8004c78 <fs_bytes_left>
 8004eec:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc05      	bgt.n	8004f00 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff ffd7 	bl	8004eaa <http_eof>
    return 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e007      	b.n	8004f10 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <http_check_eof+0x54>)
 8004f02:	f240 429d 	movw	r2, #1181	; 0x49d
 8004f06:	4905      	ldr	r1, [pc, #20]	; (8004f1c <http_check_eof+0x58>)
 8004f08:	4805      	ldr	r0, [pc, #20]	; (8004f20 <http_check_eof+0x5c>)
 8004f0a:	f00d f9d5 	bl	80122b8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	080131e4 	.word	0x080131e4
 8004f1c:	08013254 	.word	0x08013254
 8004f20:	0801322c 	.word	0x0801322c

08004f24 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d803      	bhi.n	8004f46 <http_send_data_nonssi+0x22>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	e001      	b.n	8004f4a <http_send_data_nonssi+0x26>
 8004f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f4a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6999      	ldr	r1, [r3, #24]
 8004f50:	f107 020c 	add.w	r2, r7, #12
 8004f54:	2300      	movs	r3, #0
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff feee 	bl	8004d38 <http_write>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8004f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10d      	bne.n	8004f84 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	89ba      	ldrh	r2, [r7, #12]
 8004f72:	441a      	add	r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	89ba      	ldrh	r2, [r7, #12]
 8004f7e:	1a9a      	subs	r2, r3, r2
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <http_send+0x18>
    return 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e025      	b.n	8004ff2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d108      	bne.n	8004fc0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8004fae:	6839      	ldr	r1, [r7, #0]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff87 	bl	8004ec4 <http_check_eof>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <http_send+0x32>
      return 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e018      	b.n	8004ff2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ffae 	bl	8004f24 <http_send_data_nonssi>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10d      	bne.n	8004ff0 <http_send+0x62>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff fe4d 	bl	8004c78 <fs_bytes_left>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	dc05      	bgt.n	8004ff0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8004fe4:	6839      	ldr	r1, [r7, #0]
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ff5f 	bl	8004eaa <http_eof>
    return 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	e000      	b.n	8004ff2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <http_get_404_file+0x80>)
 800500a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	4610      	mov	r0, r2
 8005016:	f7ff fde7 	bl	8004be8 <fs_open>
 800501a:	4603      	mov	r3, r0
 800501c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800501e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d024      	beq.n	8005070 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <http_get_404_file+0x84>)
 800502a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7ff fdd7 	bl	8004be8 <fs_open>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800503e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d014      	beq.n	8005070 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	4a0e      	ldr	r2, [pc, #56]	; (8005084 <http_get_404_file+0x88>)
 800504a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7ff fdc7 	bl	8004be8 <fs_open>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800505e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
        return NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005070:	687b      	ldr	r3, [r7, #4]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	0801328c 	.word	0x0801328c
 8005080:	08013298 	.word	0x08013298
 8005084:	080132a4 	.word	0x080132a4

08005088 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <http_parse_request+0x24>
 800509e:	4b65      	ldr	r3, [pc, #404]	; (8005234 <http_parse_request+0x1ac>)
 80050a0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80050a4:	4964      	ldr	r1, [pc, #400]	; (8005238 <http_parse_request+0x1b0>)
 80050a6:	4865      	ldr	r0, [pc, #404]	; (800523c <http_parse_request+0x1b4>)
 80050a8:	f00d f906 	bl	80122b8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <http_parse_request+0x38>
 80050b2:	4b60      	ldr	r3, [pc, #384]	; (8005234 <http_parse_request+0x1ac>)
 80050b4:	f240 72af 	movw	r2, #1967	; 0x7af
 80050b8:	4961      	ldr	r1, [pc, #388]	; (8005240 <http_parse_request+0x1b8>)
 80050ba:	4860      	ldr	r0, [pc, #384]	; (800523c <http_parse_request+0x1b4>)
 80050bc:	f00d f8fc 	bl	80122b8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <http_parse_request+0x48>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80050d0:	f06f 0307 	mvn.w	r3, #7
 80050d4:	e0aa      	b.n	800522c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e2:	621a      	str	r2, [r3, #32]
 80050e4:	e005      	b.n	80050f2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 ff2f 	bl	8006f50 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80050f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f4:	f001 ff0a 	bl	8006f0c <pbuf_ref>

  if (hs->req->next != NULL) {
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	891b      	ldrh	r3, [r3, #8]
 8005108:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800510c:	4293      	cmp	r3, r2
 800510e:	bf28      	it	cs
 8005110:	4613      	movcs	r3, r2
 8005112:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6a18      	ldr	r0, [r3, #32]
 8005118:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800511a:	2300      	movs	r3, #0
 800511c:	4949      	ldr	r1, [pc, #292]	; (8005244 <http_parse_request+0x1bc>)
 800511e:	f002 f84f 	bl	80071c0 <pbuf_copy_partial>
    data = httpd_req_buf;
 8005122:	4b48      	ldr	r3, [pc, #288]	; (8005244 <http_parse_request+0x1bc>)
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
 8005126:	e005      	b.n	8005134 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	895b      	ldrh	r3, [r3, #10]
 8005132:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8005134:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005136:	2b06      	cmp	r3, #6
 8005138:	d963      	bls.n	8005202 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800513a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800513c:	461a      	mov	r2, r3
 800513e:	4942      	ldr	r1, [pc, #264]	; (8005248 <http_parse_request+0x1c0>)
 8005140:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005142:	f000 fb99 	bl	8005878 <lwip_strnstr>
 8005146:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d059      	beq.n	8005202 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8005152:	2204      	movs	r2, #4
 8005154:	493d      	ldr	r1, [pc, #244]	; (800524c <http_parse_request+0x1c4>)
 8005156:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005158:	f00d f907 	bl	801236a <strncmp>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d117      	bne.n	8005192 <http_parse_request+0x10a>
        sp1 = data + 3;
 8005162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005164:	3303      	adds	r3, #3
 8005166:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	3301      	adds	r3, #1
 800516c:	461a      	mov	r2, r3
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3301      	adds	r3, #1
 800517e:	8b7a      	ldrh	r2, [r7, #26]
 8005180:	4933      	ldr	r1, [pc, #204]	; (8005250 <http_parse_request+0x1c8>)
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb78 	bl	8005878 <lwip_strnstr>
 8005188:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	2b00      	cmp	r3, #0
 800518e:	d111      	bne.n	80051b4 <http_parse_request+0x12c>
 8005190:	e006      	b.n	80051a0 <http_parse_request+0x118>
        data[4] = 0;
 8005192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005194:	3304      	adds	r3, #4
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800519a:	f06f 030f 	mvn.w	r3, #15
 800519e:	e045      	b.n	800522c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	8b7a      	ldrh	r2, [r7, #26]
 80051a6:	4928      	ldr	r1, [pc, #160]	; (8005248 <http_parse_request+0x1c0>)
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fb65 	bl	8005878 <lwip_strnstr>
 80051ae:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80051b0:	2301      	movs	r3, #1
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	3201      	adds	r2, #1
 80051ba:	1a9b      	subs	r3, r3, r2
 80051bc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80051be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01e      	beq.n	8005202 <http_parse_request+0x17a>
 80051c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d91a      	bls.n	8005202 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80051cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051ce:	461a      	mov	r2, r3
 80051d0:	4920      	ldr	r1, [pc, #128]	; (8005254 <http_parse_request+0x1cc>)
 80051d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051d4:	f000 fb50 	bl	8005878 <lwip_strnstr>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d011      	beq.n	8005202 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	3301      	adds	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80051ea:	8b3b      	ldrh	r3, [r7, #24]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80051f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	68b8      	ldr	r0, [r7, #8]
 80051fa:	f000 f82d 	bl	8005258 <http_find_file>
 80051fe:	4603      	mov	r3, r0
 8005200:	e014      	b.n	800522c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	4618      	mov	r0, r3
 8005208:	f001 fe68 	bl	8006edc <pbuf_clen>
 800520c:	4603      	mov	r3, r0
 800520e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	891b      	ldrh	r3, [r3, #8]
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800521a:	d205      	bcs.n	8005228 <http_parse_request+0x1a0>
 800521c:	8a7b      	ldrh	r3, [r7, #18]
 800521e:	2b05      	cmp	r3, #5
 8005220:	d802      	bhi.n	8005228 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8005222:	f06f 0304 	mvn.w	r3, #4
 8005226:	e001      	b.n	800522c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8005228:	f06f 030f 	mvn.w	r3, #15
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3738      	adds	r7, #56	; 0x38
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	080131e4 	.word	0x080131e4
 8005238:	080132b0 	.word	0x080132b0
 800523c:	0801322c 	.word	0x0801322c
 8005240:	080132bc 	.word	0x080132bc
 8005244:	2000009c 	.word	0x2000009c
 8005248:	080132c8 	.word	0x080132c8
 800524c:	080132cc 	.word	0x080132cc
 8005250:	080132d4 	.word	0x080132d4
 8005254:	080132d8 	.word	0x080132d8

08005258 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b092      	sub	sp, #72	; 0x48
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005268:	2300      	movs	r3, #0
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fa ffed 	bl	8000254 <strlen>
 800527a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d06b      	beq.n	800535a <http_find_file+0x102>
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b2f      	cmp	r3, #47	; 0x2f
 800528e:	d164      	bne.n	800535a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005290:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005292:	4a53      	ldr	r2, [pc, #332]	; (80053e0 <http_find_file+0x188>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d102      	bne.n	800529e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	2b01      	cmp	r3, #1
 800529c:	d15d      	bne.n	800535a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	3b01      	subs	r3, #1
 80052a2:	2b3f      	cmp	r3, #63	; 0x3f
 80052a4:	bf28      	it	cs
 80052a6:	233f      	movcs	r3, #63	; 0x3f
 80052a8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	4619      	mov	r1, r3
 80052b6:	484a      	ldr	r0, [pc, #296]	; (80053e0 <http_find_file+0x188>)
 80052b8:	f00c ffeb 	bl	8012292 <memcpy>
      http_uri_buf[copy_len] = 0;
 80052bc:	4a48      	ldr	r2, [pc, #288]	; (80053e0 <http_find_file+0x188>)
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	4413      	add	r3, r2
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80052c6:	2300      	movs	r3, #0
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052ca:	e043      	b.n	8005354 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d028      	beq.n	8005324 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80052d8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01e      	beq.n	800531e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80052e0:	4a40      	ldr	r2, [pc, #256]	; (80053e4 <http_find_file+0x18c>)
 80052e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fa ffb3 	bl	8000254 <strlen>
 80052ee:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bf28      	it	cs
 80052f8:	4613      	movcs	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80052fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fe:	4a38      	ldr	r2, [pc, #224]	; (80053e0 <http_find_file+0x188>)
 8005300:	1898      	adds	r0, r3, r2
 8005302:	4a38      	ldr	r2, [pc, #224]	; (80053e4 <http_find_file+0x18c>)
 8005304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005306:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	4619      	mov	r1, r3
 800530e:	f00c ffc0 	bl	8012292 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	4413      	add	r3, r2
 8005318:	4a31      	ldr	r2, [pc, #196]	; (80053e0 <http_find_file+0x188>)
 800531a:	2100      	movs	r1, #0
 800531c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800531e:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <http_find_file+0x188>)
 8005320:	633b      	str	r3, [r7, #48]	; 0x30
 8005322:	e004      	b.n	800532e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8005324:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <http_find_file+0x18c>)
 8005326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800532c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fc58 	bl	8004be8 <fs_open>
 8005338:	4603      	mov	r3, r0
 800533a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800533c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <http_find_file+0xf6>
        uri = file_name;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800534c:	e005      	b.n	800535a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800534e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005350:	3301      	adds	r3, #1
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005356:	2b04      	cmp	r3, #4
 8005358:	d9b8      	bls.n	80052cc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d124      	bne.n	80053aa <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	213f      	movs	r1, #63	; 0x3f
 8005364:	4618      	mov	r0, r3
 8005366:	f00c fff3 	bl	8012350 <strchr>
 800536a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8005372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
      params++;
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	3301      	adds	r3, #1
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fc2f 	bl	8004be8 <fs_open>
 800538a:	4603      	mov	r3, r0
 800538c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800538e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d102      	bne.n	800539c <http_find_file+0x144>
      file = &hs->file_handle;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	63bb      	str	r3, [r7, #56]	; 0x38
 800539a:	e006      	b.n	80053aa <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	4619      	mov	r1, r3
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff fe2a 	bl	8004ffc <http_get_404_file>
 80053a8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80053b0:	f107 0308 	add.w	r3, r7, #8
 80053b4:	4619      	mov	r1, r3
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f7ff fe20 	bl	8004ffc <http_get_404_file>
 80053bc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	4613      	mov	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f809 	bl	80053e8 <http_init_file>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3740      	adds	r7, #64	; 0x40
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	2000049c 	.word	0x2000049c
 80053e4:	0801df84 	.word	0x0801df84

080053e8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d05d      	beq.n	80054b8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <http_init_file+0x2a>
 8005404:	4b35      	ldr	r3, [pc, #212]	; (80054dc <http_init_file+0xf4>)
 8005406:	f640 120b 	movw	r2, #2315	; 0x90b
 800540a:	4935      	ldr	r1, [pc, #212]	; (80054e0 <http_init_file+0xf8>)
 800540c:	4835      	ldr	r0, [pc, #212]	; (80054e4 <http_init_file+0xfc>)
 800540e:	f00c ff53 	bl	80122b8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	da06      	bge.n	8005436 <http_init_file+0x4e>
 8005428:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <http_init_file+0xf4>)
 800542a:	f640 1234 	movw	r2, #2356	; 0x934
 800542e:	492e      	ldr	r1, [pc, #184]	; (80054e8 <http_init_file+0x100>)
 8005430:	482c      	ldr	r0, [pc, #176]	; (80054e4 <http_init_file+0xfc>)
 8005432:	f00c ff41 	bl	80122b8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	7c1b      	ldrb	r3, [r3, #16]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <http_init_file+0x7c>
 8005456:	4b21      	ldr	r3, [pc, #132]	; (80054dc <http_init_file+0xf4>)
 8005458:	f640 1244 	movw	r2, #2372	; 0x944
 800545c:	4923      	ldr	r1, [pc, #140]	; (80054ec <http_init_file+0x104>)
 800545e:	4821      	ldr	r0, [pc, #132]	; (80054e4 <http_init_file+0xfc>)
 8005460:	f00c ff2a 	bl	80122b8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d033      	beq.n	80054d2 <http_init_file+0xea>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	7c1b      	ldrb	r3, [r3, #16]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02c      	beq.n	80054d2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6998      	ldr	r0, [r3, #24]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	461a      	mov	r2, r3
 8005482:	491b      	ldr	r1, [pc, #108]	; (80054f0 <http_init_file+0x108>)
 8005484:	f000 f9f8 	bl	8005878 <lwip_strnstr>
 8005488:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d020      	beq.n	80054d2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	3304      	adds	r3, #4
 8005494:	461a      	mov	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	441a      	add	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24
 80054b6:	e00c      	b.n	80054d2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	080131e4 	.word	0x080131e4
 80054e0:	080132e0 	.word	0x080132e0
 80054e4:	0801322c 	.word	0x0801322c
 80054e8:	080132f4 	.word	0x080132f4
 80054ec:	08013314 	.word	0x08013314
 80054f0:	080132d8 	.word	0x080132d8

080054f4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <http_err+0x1c>
    http_state_free(hs);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff fc02 	bl	8004d14 <http_state_free>
  }
}
 8005510:	bf00      	nop
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <http_sent+0x1c>
    return ERR_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e008      	b.n	8005546 <http_sent+0x2e>
  }

  hs->retries = 0;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800553c:	6979      	ldr	r1, [r7, #20]
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	f7ff fd25 	bl	8004f8e <http_send>

  return ERR_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8005562:	2100      	movs	r1, #0
 8005564:	6838      	ldr	r0, [r7, #0]
 8005566:	f7ff fc91 	bl	8004e8c <http_close_conn>
 800556a:	4603      	mov	r3, r0
 800556c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e021      	b.n	80055b6 <http_poll+0x68>
  } else {
    hs->retries++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005578:	3301      	adds	r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005588:	2b04      	cmp	r3, #4
 800558a:	d105      	bne.n	8005598 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800558c:	68f9      	ldr	r1, [r7, #12]
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f7ff fc7c 	bl	8004e8c <http_close_conn>
      return ERR_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	e00e      	b.n	80055b6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d009      	beq.n	80055b4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80055a0:	68f9      	ldr	r1, [r7, #12]
 80055a2:	6838      	ldr	r0, [r7, #0]
 80055a4:	f7ff fcf3 	bl	8004f8e <http_send>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80055ae:	6838      	ldr	r0, [r7, #0]
 80055b0:	f006 ff7e 	bl	800c4b0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80055d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d105      	bne.n	80055e6 <http_recv+0x26>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <http_recv+0x26>
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d111      	bne.n	800560a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d008      	beq.n	80055fe <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	891b      	ldrh	r3, [r3, #8]
 80055f0:	4619      	mov	r1, r3
 80055f2:	68b8      	ldr	r0, [r7, #8]
 80055f4:	f002 fb54 	bl	8007ca0 <tcp_recved>
      pbuf_free(p);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fbe7 	bl	8006dcc <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80055fe:	6979      	ldr	r1, [r7, #20]
 8005600:	68b8      	ldr	r0, [r7, #8]
 8005602:	f7ff fc43 	bl	8004e8c <http_close_conn>
    return ERR_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e055      	b.n	80056b6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	891b      	ldrh	r3, [r3, #8]
 800560e:	4619      	mov	r1, r3
 8005610:	68b8      	ldr	r0, [r7, #8]
 8005612:	f002 fb45 	bl	8007ca0 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d147      	bne.n	80056ae <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fd30 	bl	8005088 <http_parse_request>
 8005628:	4603      	mov	r3, r0
 800562a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800562c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d015      	beq.n	8005660 <http_recv+0xa0>
 8005634:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005638:	f113 0f05 	cmn.w	r3, #5
 800563c:	d010      	beq.n	8005660 <http_recv+0xa0>
 800563e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005642:	f113 0f10 	cmn.w	r3, #16
 8005646:	d00b      	beq.n	8005660 <http_recv+0xa0>
 8005648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800564c:	f113 0f08 	cmn.w	r3, #8
 8005650:	d006      	beq.n	8005660 <http_recv+0xa0>
 8005652:	4b1b      	ldr	r3, [pc, #108]	; (80056c0 <http_recv+0x100>)
 8005654:	f640 2205 	movw	r2, #2565	; 0xa05
 8005658:	491a      	ldr	r1, [pc, #104]	; (80056c4 <http_recv+0x104>)
 800565a:	481b      	ldr	r0, [pc, #108]	; (80056c8 <http_recv+0x108>)
 800565c:	f00c fe2c 	bl	80122b8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8005660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005664:	f113 0f05 	cmn.w	r3, #5
 8005668:	d00b      	beq.n	8005682 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <http_recv+0xc2>
          pbuf_free(hs->req);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4618      	mov	r0, r3
 8005678:	f001 fba8 	bl	8006dcc <pbuf_free>
          hs->req = NULL;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	2200      	movs	r2, #0
 8005680:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fba2 	bl	8006dcc <pbuf_free>
      if (parsed == ERR_OK) {
 8005688:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8005690:	6979      	ldr	r1, [r7, #20]
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f7ff fc7b 	bl	8004f8e <http_send>
 8005698:	e00c      	b.n	80056b4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800569a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800569e:	f113 0f10 	cmn.w	r3, #16
 80056a2:	d107      	bne.n	80056b4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80056a4:	6979      	ldr	r1, [r7, #20]
 80056a6:	68b8      	ldr	r0, [r7, #8]
 80056a8:	f7ff fbf0 	bl	8004e8c <http_close_conn>
 80056ac:	e002      	b.n	80056b4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 fb8c 	bl	8006dcc <pbuf_free>
    }
  }
  return ERR_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	080131e4 	.word	0x080131e4
 80056c4:	08013340 	.word	0x08013340
 80056c8:	0801322c 	.word	0x0801322c

080056cc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80056da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d102      	bne.n	80056e8 <http_accept+0x1c>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <http_accept+0x22>
    return ERR_VAL;
 80056e8:	f06f 0305 	mvn.w	r3, #5
 80056ec:	e025      	b.n	800573a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80056ee:	2101      	movs	r1, #1
 80056f0:	68b8      	ldr	r0, [r7, #8]
 80056f2:	f002 ffb5 	bl	8008660 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80056f6:	f7ff fadb 	bl	8004cb0 <http_state_alloc>
 80056fa:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d102      	bne.n	8005708 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	e018      	b.n	800573a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800570e:	6979      	ldr	r1, [r7, #20]
 8005710:	68b8      	ldr	r0, [r7, #8]
 8005712:	f003 f9a5 	bl	8008a60 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005716:	490b      	ldr	r1, [pc, #44]	; (8005744 <http_accept+0x78>)
 8005718:	68b8      	ldr	r0, [r7, #8]
 800571a:	f003 f9b3 	bl	8008a84 <tcp_recv>
  altcp_err(pcb, http_err);
 800571e:	490a      	ldr	r1, [pc, #40]	; (8005748 <http_accept+0x7c>)
 8005720:	68b8      	ldr	r0, [r7, #8]
 8005722:	f003 f9f3 	bl	8008b0c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005726:	2204      	movs	r2, #4
 8005728:	4908      	ldr	r1, [pc, #32]	; (800574c <http_accept+0x80>)
 800572a:	68b8      	ldr	r0, [r7, #8]
 800572c:	f003 fa28 	bl	8008b80 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005730:	4907      	ldr	r1, [pc, #28]	; (8005750 <http_accept+0x84>)
 8005732:	68b8      	ldr	r0, [r7, #8]
 8005734:	f003 f9c8 	bl	8008ac8 <tcp_sent>

  return ERR_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	080055c1 	.word	0x080055c1
 8005748:	080054f5 	.word	0x080054f5
 800574c:	0800554f 	.word	0x0800554f
 8005750:	08005519 	.word	0x08005519

08005754 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d029      	beq.n	80057ba <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8005766:	2101      	movs	r1, #1
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f002 ff79 	bl	8008660 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800576e:	887b      	ldrh	r3, [r7, #2]
 8005770:	461a      	mov	r2, r3
 8005772:	4914      	ldr	r1, [pc, #80]	; (80057c4 <httpd_init_pcb+0x70>)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f002 f8c5 	bl	8007904 <tcp_bind>
 800577a:	4603      	mov	r3, r0
 800577c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <httpd_init_pcb+0x40>
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <httpd_init_pcb+0x74>)
 8005788:	f640 2257 	movw	r2, #2647	; 0xa57
 800578c:	490f      	ldr	r1, [pc, #60]	; (80057cc <httpd_init_pcb+0x78>)
 800578e:	4810      	ldr	r0, [pc, #64]	; (80057d0 <httpd_init_pcb+0x7c>)
 8005790:	f00c fd92 	bl	80122b8 <iprintf>
    pcb = altcp_listen(pcb);
 8005794:	21ff      	movs	r1, #255	; 0xff
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f002 f96c 	bl	8007a74 <tcp_listen_with_backlog>
 800579c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <httpd_init_pcb+0x5e>
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <httpd_init_pcb+0x74>)
 80057a6:	f640 2259 	movw	r2, #2649	; 0xa59
 80057aa:	490a      	ldr	r1, [pc, #40]	; (80057d4 <httpd_init_pcb+0x80>)
 80057ac:	4808      	ldr	r0, [pc, #32]	; (80057d0 <httpd_init_pcb+0x7c>)
 80057ae:	f00c fd83 	bl	80122b8 <iprintf>
    altcp_accept(pcb, http_accept);
 80057b2:	4909      	ldr	r1, [pc, #36]	; (80057d8 <httpd_init_pcb+0x84>)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f003 f9cb 	bl	8008b50 <tcp_accept>
  }
}
 80057ba:	bf00      	nop
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	0801e08c 	.word	0x0801e08c
 80057c8:	080131e4 	.word	0x080131e4
 80057cc:	0801336c 	.word	0x0801336c
 80057d0:	0801322c 	.word	0x0801322c
 80057d4:	08013388 	.word	0x08013388
 80057d8:	080056cd 	.word	0x080056cd

080057dc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80057e2:	202e      	movs	r0, #46	; 0x2e
 80057e4:	f003 f92e 	bl	8008a44 <tcp_new_ip_type>
 80057e8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d106      	bne.n	80057fe <httpd_init+0x22>
 80057f0:	4b07      	ldr	r3, [pc, #28]	; (8005810 <httpd_init+0x34>)
 80057f2:	f640 2272 	movw	r2, #2674	; 0xa72
 80057f6:	4907      	ldr	r1, [pc, #28]	; (8005814 <httpd_init+0x38>)
 80057f8:	4807      	ldr	r0, [pc, #28]	; (8005818 <httpd_init+0x3c>)
 80057fa:	f00c fd5d 	bl	80122b8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80057fe:	2150      	movs	r1, #80	; 0x50
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ffa7 	bl	8005754 <httpd_init_pcb>
}
 8005806:	bf00      	nop
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	080131e4 	.word	0x080131e4
 8005814:	080133a8 	.word	0x080133a8
 8005818:	0801322c 	.word	0x0801322c

0800581c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	b21a      	sxth	r2, r3
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	b29b      	uxth	r3, r3
 8005832:	b21b      	sxth	r3, r3
 8005834:	4313      	orrs	r3, r2
 8005836:	b21b      	sxth	r3, r3
 8005838:	b29b      	uxth	r3, r3
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	061a      	lsls	r2, r3, #24
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	021b      	lsls	r3, r3, #8
 8005856:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0a1b      	lsrs	r3, r3, #8
 8005860:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0e1b      	lsrs	r3, r3, #24
 800586a:	4313      	orrs	r3, r2
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005884:	68b8      	ldr	r0, [r7, #8]
 8005886:	f7fa fce5 	bl	8000254 <strlen>
 800588a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	e022      	b.n	80058dc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e012      	b.n	80058c2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d109      	bne.n	80058bc <lwip_strnstr+0x44>
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	6978      	ldr	r0, [r7, #20]
 80058ae:	f00c fd5c 	bl	801236a <strncmp>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	e00f      	b.n	80058dc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	3301      	adds	r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <lwip_strnstr+0x62>
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	441a      	add	r2, r3
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	440b      	add	r3, r1
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d9e0      	bls.n	800589c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3718      	adds	r7, #24
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80058ee:	f000 f8d5 	bl	8005a9c <mem_init>
  memp_init();
 80058f2:	f000 fbdb 	bl	80060ac <memp_init>
  pbuf_init();
  netif_init();
 80058f6:	f000 fc93 	bl	8006220 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80058fa:	f007 fea9 	bl	800d650 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80058fe:	f001 fd03 	bl	8007308 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005902:	f007 fe1d 	bl	800d540 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <ptr_to_mem+0x20>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	4413      	add	r3, r2
}
 8005922:	4618      	mov	r0, r3
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	200004dc 	.word	0x200004dc

08005934 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a05      	ldr	r2, [pc, #20]	; (8005954 <mem_to_ptr+0x20>)
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	b29b      	uxth	r3, r3
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	200004dc 	.word	0x200004dc

08005958 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005960:	4b45      	ldr	r3, [pc, #276]	; (8005a78 <plug_holes+0x120>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d206      	bcs.n	8005978 <plug_holes+0x20>
 800596a:	4b44      	ldr	r3, [pc, #272]	; (8005a7c <plug_holes+0x124>)
 800596c:	f240 12df 	movw	r2, #479	; 0x1df
 8005970:	4943      	ldr	r1, [pc, #268]	; (8005a80 <plug_holes+0x128>)
 8005972:	4844      	ldr	r0, [pc, #272]	; (8005a84 <plug_holes+0x12c>)
 8005974:	f00c fca0 	bl	80122b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005978:	4b43      	ldr	r3, [pc, #268]	; (8005a88 <plug_holes+0x130>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d306      	bcc.n	8005990 <plug_holes+0x38>
 8005982:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <plug_holes+0x124>)
 8005984:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005988:	4940      	ldr	r1, [pc, #256]	; (8005a8c <plug_holes+0x134>)
 800598a:	483e      	ldr	r0, [pc, #248]	; (8005a84 <plug_holes+0x12c>)
 800598c:	f00c fc94 	bl	80122b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	791b      	ldrb	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <plug_holes+0x4e>
 8005998:	4b38      	ldr	r3, [pc, #224]	; (8005a7c <plug_holes+0x124>)
 800599a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800599e:	493c      	ldr	r1, [pc, #240]	; (8005a90 <plug_holes+0x138>)
 80059a0:	4838      	ldr	r0, [pc, #224]	; (8005a84 <plug_holes+0x12c>)
 80059a2:	f00c fc89 	bl	80122b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059ae:	d906      	bls.n	80059be <plug_holes+0x66>
 80059b0:	4b32      	ldr	r3, [pc, #200]	; (8005a7c <plug_holes+0x124>)
 80059b2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80059b6:	4937      	ldr	r1, [pc, #220]	; (8005a94 <plug_holes+0x13c>)
 80059b8:	4832      	ldr	r0, [pc, #200]	; (8005a84 <plug_holes+0x12c>)
 80059ba:	f00c fc7d 	bl	80122b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff ffa4 	bl	8005910 <ptr_to_mem>
 80059c8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d024      	beq.n	8005a1c <plug_holes+0xc4>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	791b      	ldrb	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d120      	bne.n	8005a1c <plug_holes+0xc4>
 80059da:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <plug_holes+0x130>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d01b      	beq.n	8005a1c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80059e4:	4b2c      	ldr	r3, [pc, #176]	; (8005a98 <plug_holes+0x140>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d102      	bne.n	80059f4 <plug_holes+0x9c>
      lfree = mem;
 80059ee:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <plug_holes+0x140>)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a04:	d00a      	beq.n	8005a1c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff ff80 	bl	8005910 <ptr_to_mem>
 8005a10:	4604      	mov	r4, r0
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ff8e 	bl	8005934 <mem_to_ptr>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	885b      	ldrh	r3, [r3, #2]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff75 	bl	8005910 <ptr_to_mem>
 8005a26:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d01f      	beq.n	8005a70 <plug_holes+0x118>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	791b      	ldrb	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11b      	bne.n	8005a70 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <plug_holes+0x140>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d102      	bne.n	8005a48 <plug_holes+0xf0>
      lfree = pmem;
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <plug_holes+0x140>)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	881a      	ldrh	r2, [r3, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a58:	d00a      	beq.n	8005a70 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ff56 	bl	8005910 <ptr_to_mem>
 8005a64:	4604      	mov	r4, r0
 8005a66:	68b8      	ldr	r0, [r7, #8]
 8005a68:	f7ff ff64 	bl	8005934 <mem_to_ptr>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	200004dc 	.word	0x200004dc
 8005a7c:	080133c4 	.word	0x080133c4
 8005a80:	080133f4 	.word	0x080133f4
 8005a84:	0801340c 	.word	0x0801340c
 8005a88:	200004e0 	.word	0x200004e0
 8005a8c:	08013434 	.word	0x08013434
 8005a90:	08013450 	.word	0x08013450
 8005a94:	0801346c 	.word	0x0801346c
 8005a98:	200004e4 	.word	0x200004e4

08005a9c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005aa2:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <mem_init+0x68>)
 8005aa4:	3303      	adds	r3, #3
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <mem_init+0x6c>)
 8005aae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <mem_init+0x6c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005abc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005aca:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005ace:	f7ff ff1f 	bl	8005910 <ptr_to_mem>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <mem_init+0x70>)
 8005ad6:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <mem_init+0x70>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2201      	movs	r2, #1
 8005ade:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <mem_init+0x70>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005ae8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <mem_init+0x70>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005af2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <mem_init+0x6c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a05      	ldr	r2, [pc, #20]	; (8005b10 <mem_init+0x74>)
 8005afa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20003c28 	.word	0x20003c28
 8005b08:	200004dc 	.word	0x200004dc
 8005b0c:	200004e0 	.word	0x200004e0
 8005b10:	200004e4 	.word	0x200004e4

08005b14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff09 	bl	8005934 <mem_to_ptr>
 8005b22:	4603      	mov	r3, r0
 8005b24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fef0 	bl	8005910 <ptr_to_mem>
 8005b30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	885b      	ldrh	r3, [r3, #2]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff feea 	bl	8005910 <ptr_to_mem>
 8005b3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b46:	d818      	bhi.n	8005b7a <mem_link_valid+0x66>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b50:	d813      	bhi.n	8005b7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005b56:	8afa      	ldrh	r2, [r7, #22]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d004      	beq.n	8005b66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	8afa      	ldrh	r2, [r7, #22]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d109      	bne.n	8005b7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <mem_link_valid+0x74>)
 8005b68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d006      	beq.n	8005b7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	885b      	ldrh	r3, [r3, #2]
 8005b74:	8afa      	ldrh	r2, [r7, #22]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d001      	beq.n	8005b7e <mem_link_valid+0x6a>
    return 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <mem_link_valid+0x6c>
  }
  return 1;
 8005b7e:	2301      	movs	r3, #1
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	200004e0 	.word	0x200004e0

08005b8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d04c      	beq.n	8005c34 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f003 0303 	and.w	r3, r3, #3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005ba4:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <mem_free+0xb0>)
 8005ba6:	f240 2273 	movw	r2, #627	; 0x273
 8005baa:	4925      	ldr	r1, [pc, #148]	; (8005c40 <mem_free+0xb4>)
 8005bac:	4825      	ldr	r0, [pc, #148]	; (8005c44 <mem_free+0xb8>)
 8005bae:	f00c fb83 	bl	80122b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005bb2:	e040      	b.n	8005c36 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3b08      	subs	r3, #8
 8005bb8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005bba:	4b23      	ldr	r3, [pc, #140]	; (8005c48 <mem_free+0xbc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d306      	bcc.n	8005bd2 <mem_free+0x46>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f103 020c 	add.w	r2, r3, #12
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <mem_free+0xc0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d907      	bls.n	8005be2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <mem_free+0xb0>)
 8005bd4:	f240 227f 	movw	r2, #639	; 0x27f
 8005bd8:	491d      	ldr	r1, [pc, #116]	; (8005c50 <mem_free+0xc4>)
 8005bda:	481a      	ldr	r0, [pc, #104]	; (8005c44 <mem_free+0xb8>)
 8005bdc:	f00c fb6c 	bl	80122b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005be0:	e029      	b.n	8005c36 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	791b      	ldrb	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <mem_free+0xb0>)
 8005bec:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005bf0:	4918      	ldr	r1, [pc, #96]	; (8005c54 <mem_free+0xc8>)
 8005bf2:	4814      	ldr	r0, [pc, #80]	; (8005c44 <mem_free+0xb8>)
 8005bf4:	f00c fb60 	bl	80122b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005bf8:	e01d      	b.n	8005c36 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f7ff ff8a 	bl	8005b14 <mem_link_valid>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005c06:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <mem_free+0xb0>)
 8005c08:	f240 2295 	movw	r2, #661	; 0x295
 8005c0c:	4912      	ldr	r1, [pc, #72]	; (8005c58 <mem_free+0xcc>)
 8005c0e:	480d      	ldr	r0, [pc, #52]	; (8005c44 <mem_free+0xb8>)
 8005c10:	f00c fb52 	bl	80122b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c14:	e00f      	b.n	8005c36 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <mem_free+0xd0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d202      	bcs.n	8005c2c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005c26:	4a0d      	ldr	r2, [pc, #52]	; (8005c5c <mem_free+0xd0>)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fe93 	bl	8005958 <plug_holes>
 8005c32:	e000      	b.n	8005c36 <mem_free+0xaa>
    return;
 8005c34:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	080133c4 	.word	0x080133c4
 8005c40:	08013498 	.word	0x08013498
 8005c44:	0801340c 	.word	0x0801340c
 8005c48:	200004dc 	.word	0x200004dc
 8005c4c:	200004e0 	.word	0x200004e0
 8005c50:	080134bc 	.word	0x080134bc
 8005c54:	080134d8 	.word	0x080134d8
 8005c58:	08013500 	.word	0x08013500
 8005c5c:	200004e4 	.word	0x200004e4

08005c60 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005c6c:	887b      	ldrh	r3, [r7, #2]
 8005c6e:	3303      	adds	r3, #3
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005c78:	8bfb      	ldrh	r3, [r7, #30]
 8005c7a:	2b0b      	cmp	r3, #11
 8005c7c:	d801      	bhi.n	8005c82 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005c7e:	230c      	movs	r3, #12
 8005c80:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005c82:	8bfb      	ldrh	r3, [r7, #30]
 8005c84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c88:	d803      	bhi.n	8005c92 <mem_trim+0x32>
 8005c8a:	8bfa      	ldrh	r2, [r7, #30]
 8005c8c:	887b      	ldrh	r3, [r7, #2]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d201      	bcs.n	8005c96 <mem_trim+0x36>
    return NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e0cc      	b.n	8005e30 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005c96:	4b68      	ldr	r3, [pc, #416]	; (8005e38 <mem_trim+0x1d8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d304      	bcc.n	8005caa <mem_trim+0x4a>
 8005ca0:	4b66      	ldr	r3, [pc, #408]	; (8005e3c <mem_trim+0x1dc>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d306      	bcc.n	8005cb8 <mem_trim+0x58>
 8005caa:	4b65      	ldr	r3, [pc, #404]	; (8005e40 <mem_trim+0x1e0>)
 8005cac:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005cb0:	4964      	ldr	r1, [pc, #400]	; (8005e44 <mem_trim+0x1e4>)
 8005cb2:	4865      	ldr	r0, [pc, #404]	; (8005e48 <mem_trim+0x1e8>)
 8005cb4:	f00c fb00 	bl	80122b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005cb8:	4b5f      	ldr	r3, [pc, #380]	; (8005e38 <mem_trim+0x1d8>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d304      	bcc.n	8005ccc <mem_trim+0x6c>
 8005cc2:	4b5e      	ldr	r3, [pc, #376]	; (8005e3c <mem_trim+0x1dc>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d301      	bcc.n	8005cd0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	e0af      	b.n	8005e30 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3b08      	subs	r3, #8
 8005cd4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005cd6:	69b8      	ldr	r0, [r7, #24]
 8005cd8:	f7ff fe2c 	bl	8005934 <mem_to_ptr>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	881a      	ldrh	r2, [r3, #0]
 8005ce4:	8afb      	ldrh	r3, [r7, #22]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b08      	subs	r3, #8
 8005cec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005cee:	8bfa      	ldrh	r2, [r7, #30]
 8005cf0:	8abb      	ldrh	r3, [r7, #20]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d906      	bls.n	8005d04 <mem_trim+0xa4>
 8005cf6:	4b52      	ldr	r3, [pc, #328]	; (8005e40 <mem_trim+0x1e0>)
 8005cf8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005cfc:	4953      	ldr	r1, [pc, #332]	; (8005e4c <mem_trim+0x1ec>)
 8005cfe:	4852      	ldr	r0, [pc, #328]	; (8005e48 <mem_trim+0x1e8>)
 8005d00:	f00c fada 	bl	80122b8 <iprintf>
  if (newsize > size) {
 8005d04:	8bfa      	ldrh	r2, [r7, #30]
 8005d06:	8abb      	ldrh	r3, [r7, #20]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d901      	bls.n	8005d10 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e08f      	b.n	8005e30 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005d10:	8bfa      	ldrh	r2, [r7, #30]
 8005d12:	8abb      	ldrh	r3, [r7, #20]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d101      	bne.n	8005d1c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	e089      	b.n	8005e30 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fdf5 	bl	8005910 <ptr_to_mem>
 8005d26:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	791b      	ldrb	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d13f      	bne.n	8005db0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d38:	d106      	bne.n	8005d48 <mem_trim+0xe8>
 8005d3a:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <mem_trim+0x1e0>)
 8005d3c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005d40:	4943      	ldr	r1, [pc, #268]	; (8005e50 <mem_trim+0x1f0>)
 8005d42:	4841      	ldr	r0, [pc, #260]	; (8005e48 <mem_trim+0x1e8>)
 8005d44:	f00c fab8 	bl	80122b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005d4e:	8afa      	ldrh	r2, [r7, #22]
 8005d50:	8bfb      	ldrh	r3, [r7, #30]
 8005d52:	4413      	add	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3308      	adds	r3, #8
 8005d58:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005d5a:	4b3e      	ldr	r3, [pc, #248]	; (8005e54 <mem_trim+0x1f4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d106      	bne.n	8005d72 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fdd2 	bl	8005910 <ptr_to_mem>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	4b39      	ldr	r3, [pc, #228]	; (8005e54 <mem_trim+0x1f4>)
 8005d70:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005d72:	89fb      	ldrh	r3, [r7, #14]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fdcb 	bl	8005910 <ptr_to_mem>
 8005d7a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	89ba      	ldrh	r2, [r7, #12]
 8005d86:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	8afa      	ldrh	r2, [r7, #22]
 8005d8c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	89fa      	ldrh	r2, [r7, #14]
 8005d92:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d9c:	d047      	beq.n	8005e2e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fdb4 	bl	8005910 <ptr_to_mem>
 8005da8:	4602      	mov	r2, r0
 8005daa:	89fb      	ldrh	r3, [r7, #14]
 8005dac:	8053      	strh	r3, [r2, #2]
 8005dae:	e03e      	b.n	8005e2e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005db0:	8bfb      	ldrh	r3, [r7, #30]
 8005db2:	f103 0214 	add.w	r2, r3, #20
 8005db6:	8abb      	ldrh	r3, [r7, #20]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d838      	bhi.n	8005e2e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005dbc:	8afa      	ldrh	r2, [r7, #22]
 8005dbe:	8bfb      	ldrh	r3, [r7, #30]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dd0:	d106      	bne.n	8005de0 <mem_trim+0x180>
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <mem_trim+0x1e0>)
 8005dd4:	f240 3216 	movw	r2, #790	; 0x316
 8005dd8:	491d      	ldr	r1, [pc, #116]	; (8005e50 <mem_trim+0x1f0>)
 8005dda:	481b      	ldr	r0, [pc, #108]	; (8005e48 <mem_trim+0x1e8>)
 8005ddc:	f00c fa6c 	bl	80122b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff fd94 	bl	8005910 <ptr_to_mem>
 8005de8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005dea:	4b1a      	ldr	r3, [pc, #104]	; (8005e54 <mem_trim+0x1f4>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d202      	bcs.n	8005dfa <mem_trim+0x19a>
      lfree = mem2;
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <mem_trim+0x1f4>)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	881a      	ldrh	r2, [r3, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	8afa      	ldrh	r2, [r7, #22]
 8005e0c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	89fa      	ldrh	r2, [r7, #14]
 8005e12:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e1c:	d007      	beq.n	8005e2e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fd74 	bl	8005910 <ptr_to_mem>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	89fb      	ldrh	r3, [r7, #14]
 8005e2c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005e2e:	687b      	ldr	r3, [r7, #4]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200004dc 	.word	0x200004dc
 8005e3c:	200004e0 	.word	0x200004e0
 8005e40:	080133c4 	.word	0x080133c4
 8005e44:	08013534 	.word	0x08013534
 8005e48:	0801340c 	.word	0x0801340c
 8005e4c:	0801354c 	.word	0x0801354c
 8005e50:	0801356c 	.word	0x0801356c
 8005e54:	200004e4 	.word	0x200004e4

08005e58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <mem_malloc+0x14>
    return NULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e0d9      	b.n	8006020 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	3303      	adds	r3, #3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005e78:	8bbb      	ldrh	r3, [r7, #28]
 8005e7a:	2b0b      	cmp	r3, #11
 8005e7c:	d801      	bhi.n	8005e82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005e7e:	230c      	movs	r3, #12
 8005e80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005e82:	8bbb      	ldrh	r3, [r7, #28]
 8005e84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e88:	d803      	bhi.n	8005e92 <mem_malloc+0x3a>
 8005e8a:	8bba      	ldrh	r2, [r7, #28]
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d201      	bcs.n	8005e96 <mem_malloc+0x3e>
    return NULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e0c4      	b.n	8006020 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e96:	4b64      	ldr	r3, [pc, #400]	; (8006028 <mem_malloc+0x1d0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fd4a 	bl	8005934 <mem_to_ptr>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	83fb      	strh	r3, [r7, #30]
 8005ea4:	e0b4      	b.n	8006010 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005ea6:	8bfb      	ldrh	r3, [r7, #30]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fd31 	bl	8005910 <ptr_to_mem>
 8005eae:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	791b      	ldrb	r3, [r3, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 80a4 	bne.w	8006002 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	8bfb      	ldrh	r3, [r7, #30]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	f1a3 0208 	sub.w	r2, r3, #8
 8005ec8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	f0c0 8099 	bcc.w	8006002 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	8bfb      	ldrh	r3, [r7, #30]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	f1a3 0208 	sub.w	r2, r3, #8
 8005ede:	8bbb      	ldrh	r3, [r7, #28]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d333      	bcc.n	8005f4e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005ee6:	8bfa      	ldrh	r2, [r7, #30]
 8005ee8:	8bbb      	ldrh	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3308      	adds	r3, #8
 8005ef0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005ef2:	8a7b      	ldrh	r3, [r7, #18]
 8005ef4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005ef8:	d106      	bne.n	8005f08 <mem_malloc+0xb0>
 8005efa:	4b4c      	ldr	r3, [pc, #304]	; (800602c <mem_malloc+0x1d4>)
 8005efc:	f240 3287 	movw	r2, #903	; 0x387
 8005f00:	494b      	ldr	r1, [pc, #300]	; (8006030 <mem_malloc+0x1d8>)
 8005f02:	484c      	ldr	r0, [pc, #304]	; (8006034 <mem_malloc+0x1dc>)
 8005f04:	f00c f9d8 	bl	80122b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005f08:	8a7b      	ldrh	r3, [r7, #18]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fd00 	bl	8005910 <ptr_to_mem>
 8005f10:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	881a      	ldrh	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8bfa      	ldrh	r2, [r7, #30]
 8005f24:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	8a7a      	ldrh	r2, [r7, #18]
 8005f2a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f3a:	d00b      	beq.n	8005f54 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff fce5 	bl	8005910 <ptr_to_mem>
 8005f46:	4602      	mov	r2, r0
 8005f48:	8a7b      	ldrh	r3, [r7, #18]
 8005f4a:	8053      	strh	r3, [r2, #2]
 8005f4c:	e002      	b.n	8005f54 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2201      	movs	r2, #1
 8005f52:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005f54:	4b34      	ldr	r3, [pc, #208]	; (8006028 <mem_malloc+0x1d0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d127      	bne.n	8005fae <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005f5e:	4b32      	ldr	r3, [pc, #200]	; (8006028 <mem_malloc+0x1d0>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005f64:	e005      	b.n	8005f72 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff fcd0 	bl	8005910 <ptr_to_mem>
 8005f70:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d004      	beq.n	8005f84 <mem_malloc+0x12c>
 8005f7a:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <mem_malloc+0x1e0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d1f0      	bne.n	8005f66 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005f84:	4a28      	ldr	r2, [pc, #160]	; (8006028 <mem_malloc+0x1d0>)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <mem_malloc+0x1d0>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b2a      	ldr	r3, [pc, #168]	; (8006038 <mem_malloc+0x1e0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d00b      	beq.n	8005fae <mem_malloc+0x156>
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <mem_malloc+0x1d0>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	791b      	ldrb	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d006      	beq.n	8005fae <mem_malloc+0x156>
 8005fa0:	4b22      	ldr	r3, [pc, #136]	; (800602c <mem_malloc+0x1d4>)
 8005fa2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005fa6:	4925      	ldr	r1, [pc, #148]	; (800603c <mem_malloc+0x1e4>)
 8005fa8:	4822      	ldr	r0, [pc, #136]	; (8006034 <mem_malloc+0x1dc>)
 8005faa:	f00c f985 	bl	80122b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005fae:	8bba      	ldrh	r2, [r7, #28]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	4a20      	ldr	r2, [pc, #128]	; (8006038 <mem_malloc+0x1e0>)
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d906      	bls.n	8005fcc <mem_malloc+0x174>
 8005fbe:	4b1b      	ldr	r3, [pc, #108]	; (800602c <mem_malloc+0x1d4>)
 8005fc0:	f240 32ba 	movw	r2, #954	; 0x3ba
 8005fc4:	491e      	ldr	r1, [pc, #120]	; (8006040 <mem_malloc+0x1e8>)
 8005fc6:	481b      	ldr	r0, [pc, #108]	; (8006034 <mem_malloc+0x1dc>)
 8005fc8:	f00c f976 	bl	80122b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <mem_malloc+0x18c>
 8005fd6:	4b15      	ldr	r3, [pc, #84]	; (800602c <mem_malloc+0x1d4>)
 8005fd8:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8005fdc:	4919      	ldr	r1, [pc, #100]	; (8006044 <mem_malloc+0x1ec>)
 8005fde:	4815      	ldr	r0, [pc, #84]	; (8006034 <mem_malloc+0x1dc>)
 8005fe0:	f00c f96a 	bl	80122b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d006      	beq.n	8005ffc <mem_malloc+0x1a4>
 8005fee:	4b0f      	ldr	r3, [pc, #60]	; (800602c <mem_malloc+0x1d4>)
 8005ff0:	f240 32be 	movw	r2, #958	; 0x3be
 8005ff4:	4914      	ldr	r1, [pc, #80]	; (8006048 <mem_malloc+0x1f0>)
 8005ff6:	480f      	ldr	r0, [pc, #60]	; (8006034 <mem_malloc+0x1dc>)
 8005ff8:	f00c f95e 	bl	80122b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	3308      	adds	r3, #8
 8006000:	e00e      	b.n	8006020 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006002:	8bfb      	ldrh	r3, [r7, #30]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fc83 	bl	8005910 <ptr_to_mem>
 800600a:	4603      	mov	r3, r0
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006010:	8bfa      	ldrh	r2, [r7, #30]
 8006012:	8bbb      	ldrh	r3, [r7, #28]
 8006014:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8006018:	429a      	cmp	r2, r3
 800601a:	f4ff af44 	bcc.w	8005ea6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	200004e4 	.word	0x200004e4
 800602c:	080133c4 	.word	0x080133c4
 8006030:	0801356c 	.word	0x0801356c
 8006034:	0801340c 	.word	0x0801340c
 8006038:	200004e0 	.word	0x200004e0
 800603c:	08013580 	.word	0x08013580
 8006040:	0801359c 	.word	0x0801359c
 8006044:	080135cc 	.word	0x080135cc
 8006048:	080135fc 	.word	0x080135fc

0800604c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	3303      	adds	r3, #3
 8006062:	f023 0303 	bic.w	r3, r3, #3
 8006066:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006068:	2300      	movs	r3, #0
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e011      	b.n	8006092 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	461a      	mov	r2, r3
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4413      	add	r3, r2
 800608a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	885b      	ldrh	r3, [r3, #2]
 8006096:	461a      	mov	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4293      	cmp	r3, r2
 800609c:	dbe7      	blt.n	800606e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80060b2:	2300      	movs	r3, #0
 80060b4:	80fb      	strh	r3, [r7, #6]
 80060b6:	e009      	b.n	80060cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80060b8:	88fb      	ldrh	r3, [r7, #6]
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <memp_init+0x30>)
 80060bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ffc3 	bl	800604c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	3301      	adds	r3, #1
 80060ca:	80fb      	strh	r3, [r7, #6]
 80060cc:	88fb      	ldrh	r3, [r7, #6]
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d9f2      	bls.n	80060b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80060d2:	bf00      	nop
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	0801e018 	.word	0x0801e018

080060e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d012      	beq.n	800611c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d006      	beq.n	8006118 <do_memp_malloc_pool+0x38>
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <do_memp_malloc_pool+0x48>)
 800610c:	f240 1219 	movw	r2, #281	; 0x119
 8006110:	4906      	ldr	r1, [pc, #24]	; (800612c <do_memp_malloc_pool+0x4c>)
 8006112:	4807      	ldr	r0, [pc, #28]	; (8006130 <do_memp_malloc_pool+0x50>)
 8006114:	f00c f8d0 	bl	80122b8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	e000      	b.n	800611e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	08013620 	.word	0x08013620
 800612c:	08013650 	.word	0x08013650
 8006130:	08013674 	.word	0x08013674

08006134 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b08      	cmp	r3, #8
 8006142:	d908      	bls.n	8006156 <memp_malloc+0x22>
 8006144:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <memp_malloc+0x3c>)
 8006146:	f240 1257 	movw	r2, #343	; 0x157
 800614a:	490a      	ldr	r1, [pc, #40]	; (8006174 <memp_malloc+0x40>)
 800614c:	480a      	ldr	r0, [pc, #40]	; (8006178 <memp_malloc+0x44>)
 800614e:	f00c f8b3 	bl	80122b8 <iprintf>
 8006152:	2300      	movs	r3, #0
 8006154:	e008      	b.n	8006168 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	4a08      	ldr	r2, [pc, #32]	; (800617c <memp_malloc+0x48>)
 800615a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff ffbe 	bl	80060e0 <do_memp_malloc_pool>
 8006164:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	08013620 	.word	0x08013620
 8006174:	080136b0 	.word	0x080136b0
 8006178:	08013674 	.word	0x08013674
 800617c:	0801e018 	.word	0x0801e018

08006180 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d006      	beq.n	80061a2 <do_memp_free_pool+0x22>
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <do_memp_free_pool+0x40>)
 8006196:	f240 126d 	movw	r2, #365	; 0x16d
 800619a:	490a      	ldr	r1, [pc, #40]	; (80061c4 <do_memp_free_pool+0x44>)
 800619c:	480a      	ldr	r0, [pc, #40]	; (80061c8 <do_memp_free_pool+0x48>)
 800619e:	f00c f88b 	bl	80122b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	08013620 	.word	0x08013620
 80061c4:	080136d0 	.word	0x080136d0
 80061c8:	08013674 	.word	0x08013674

080061cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d907      	bls.n	80061ee <memp_free+0x22>
 80061de:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <memp_free+0x44>)
 80061e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80061e4:	490b      	ldr	r1, [pc, #44]	; (8006214 <memp_free+0x48>)
 80061e6:	480c      	ldr	r0, [pc, #48]	; (8006218 <memp_free+0x4c>)
 80061e8:	f00c f866 	bl	80122b8 <iprintf>
 80061ec:	e00c      	b.n	8006208 <memp_free+0x3c>

  if (mem == NULL) {
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <memp_free+0x50>)
 80061f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff ffbe 	bl	8006180 <do_memp_free_pool>
 8006204:	e000      	b.n	8006208 <memp_free+0x3c>
    return;
 8006206:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	08013620 	.word	0x08013620
 8006214:	080136f0 	.word	0x080136f0
 8006218:	08013674 	.word	0x08013674
 800621c:	0801e018 	.word	0x0801e018

08006220 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006224:	bf00      	nop
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
	...

08006230 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <netif_add+0x26>
 8006244:	4b59      	ldr	r3, [pc, #356]	; (80063ac <netif_add+0x17c>)
 8006246:	f240 1227 	movw	r2, #295	; 0x127
 800624a:	4959      	ldr	r1, [pc, #356]	; (80063b0 <netif_add+0x180>)
 800624c:	4859      	ldr	r0, [pc, #356]	; (80063b4 <netif_add+0x184>)
 800624e:	f00c f833 	bl	80122b8 <iprintf>
 8006252:	2300      	movs	r3, #0
 8006254:	e0a6      	b.n	80063a4 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d108      	bne.n	800626e <netif_add+0x3e>
 800625c:	4b53      	ldr	r3, [pc, #332]	; (80063ac <netif_add+0x17c>)
 800625e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006262:	4955      	ldr	r1, [pc, #340]	; (80063b8 <netif_add+0x188>)
 8006264:	4853      	ldr	r0, [pc, #332]	; (80063b4 <netif_add+0x184>)
 8006266:	f00c f827 	bl	80122b8 <iprintf>
 800626a:	2300      	movs	r3, #0
 800626c:	e09a      	b.n	80063a4 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006274:	4b51      	ldr	r3, [pc, #324]	; (80063bc <netif_add+0x18c>)
 8006276:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800627e:	4b4f      	ldr	r3, [pc, #316]	; (80063bc <netif_add+0x18c>)
 8006280:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006288:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <netif_add+0x18c>)
 800628a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4a47      	ldr	r2, [pc, #284]	; (80063c0 <netif_add+0x190>)
 80062a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3320      	adds	r3, #32
 80062b6:	2204      	movs	r2, #4
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f00b fff4 	bl	80122a8 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 80062c6:	4b3f      	ldr	r3, [pc, #252]	; (80063c4 <netif_add+0x194>)
 80062c8:	781a      	ldrb	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f913 	bl	8006508 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	4798      	blx	r3
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <netif_add+0xc2>
    return NULL;
 80062ee:	2300      	movs	r3, #0
 80062f0:	e058      	b.n	80063a4 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062f8:	2bff      	cmp	r3, #255	; 0xff
 80062fa:	d103      	bne.n	8006304 <netif_add+0xd4>
        netif->num = 0;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006308:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <netif_add+0x198>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e02b      	b.n	8006368 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d106      	bne.n	8006326 <netif_add+0xf6>
 8006318:	4b24      	ldr	r3, [pc, #144]	; (80063ac <netif_add+0x17c>)
 800631a:	f240 128b 	movw	r2, #395	; 0x18b
 800631e:	492b      	ldr	r1, [pc, #172]	; (80063cc <netif_add+0x19c>)
 8006320:	4824      	ldr	r0, [pc, #144]	; (80063b4 <netif_add+0x184>)
 8006322:	f00b ffc9 	bl	80122b8 <iprintf>
        num_netifs++;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2bff      	cmp	r3, #255	; 0xff
 8006330:	dd06      	ble.n	8006340 <netif_add+0x110>
 8006332:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <netif_add+0x17c>)
 8006334:	f240 128d 	movw	r2, #397	; 0x18d
 8006338:	4925      	ldr	r1, [pc, #148]	; (80063d0 <netif_add+0x1a0>)
 800633a:	481e      	ldr	r0, [pc, #120]	; (80063b4 <netif_add+0x184>)
 800633c:	f00b ffbc 	bl	80122b8 <iprintf>
        if (netif2->num == netif->num) {
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800634c:	429a      	cmp	r2, r3
 800634e:	d108      	bne.n	8006362 <netif_add+0x132>
          netif->num++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006356:	3301      	adds	r3, #1
 8006358:	b2da      	uxtb	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006360:	e005      	b.n	800636e <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1d0      	bne.n	8006310 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1be      	bne.n	80062f2 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800637a:	2bfe      	cmp	r3, #254	; 0xfe
 800637c:	d103      	bne.n	8006386 <netif_add+0x156>
    netif_num = 0;
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <netif_add+0x194>)
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e006      	b.n	8006394 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800638c:	3301      	adds	r3, #1
 800638e:	b2da      	uxtb	r2, r3
 8006390:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <netif_add+0x194>)
 8006392:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006394:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <netif_add+0x198>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800639c:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <netif_add+0x198>)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80063a2:	68fb      	ldr	r3, [r7, #12]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	0801370c 	.word	0x0801370c
 80063b0:	080137a0 	.word	0x080137a0
 80063b4:	0801375c 	.word	0x0801375c
 80063b8:	080137bc 	.word	0x080137bc
 80063bc:	0801e08c 	.word	0x0801e08c
 80063c0:	080066f9 	.word	0x080066f9
 80063c4:	2000050c 	.word	0x2000050c
 80063c8:	20007164 	.word	0x20007164
 80063cc:	080137e0 	.word	0x080137e0
 80063d0:	080137f4 	.word	0x080137f4

080063d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f002 fd73 	bl	8008ecc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f007 fdbd 	bl	800df68 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <netif_do_set_ipaddr+0x20>
 800640a:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <netif_do_set_ipaddr+0x88>)
 800640c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8006410:	491c      	ldr	r1, [pc, #112]	; (8006484 <netif_do_set_ipaddr+0x8c>)
 8006412:	481d      	ldr	r0, [pc, #116]	; (8006488 <netif_do_set_ipaddr+0x90>)
 8006414:	f00b ff50 	bl	80122b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <netif_do_set_ipaddr+0x34>
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <netif_do_set_ipaddr+0x88>)
 8006420:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8006424:	4917      	ldr	r1, [pc, #92]	; (8006484 <netif_do_set_ipaddr+0x8c>)
 8006426:	4818      	ldr	r0, [pc, #96]	; (8006488 <netif_do_set_ipaddr+0x90>)
 8006428:	f00b ff46 	bl	80122b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3304      	adds	r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d01c      	beq.n	8006474 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3304      	adds	r3, #4
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800644a:	f107 0314 	add.w	r3, r7, #20
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff ffbf 	bl	80063d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <netif_do_set_ipaddr+0x6a>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	e000      	b.n	8006464 <netif_do_set_ipaddr+0x6c>
 8006462:	2300      	movs	r3, #0
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006468:	2101      	movs	r1, #1
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 f8d2 	bl	8006614 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006470:	2301      	movs	r3, #1
 8006472:	e000      	b.n	8006476 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	0801370c 	.word	0x0801370c
 8006484:	08013824 	.word	0x08013824
 8006488:	0801375c 	.word	0x0801375c

0800648c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3308      	adds	r3, #8
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d00a      	beq.n	80064bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <netif_do_set_netmask+0x26>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	e000      	b.n	80064b4 <netif_do_set_netmask+0x28>
 80064b2:	2300      	movs	r3, #0
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	330c      	adds	r3, #12
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d00a      	beq.n	80064fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <netif_do_set_gw+0x26>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	e000      	b.n	80064f2 <netif_do_set_gw+0x28>
 80064f0:	2300      	movs	r3, #0
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006524:	4b1c      	ldr	r3, [pc, #112]	; (8006598 <netif_set_addr+0x90>)
 8006526:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800652e:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <netif_set_addr+0x90>)
 8006530:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <netif_set_addr+0x90>)
 800653a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <netif_set_addr+0x42>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <netif_set_addr+0x46>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <netif_set_addr+0x48>
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d006      	beq.n	8006566 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006558:	f107 0310 	add.w	r3, r7, #16
 800655c:	461a      	mov	r2, r3
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff ff49 	bl	80063f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f7ff ff8e 	bl	800648c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f7ff ffa8 	bl	80064ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006580:	f107 0310 	add.w	r3, r7, #16
 8006584:	461a      	mov	r2, r3
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f7ff ff35 	bl	80063f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800658e:	bf00      	nop
 8006590:	3720      	adds	r7, #32
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	0801e08c 	.word	0x0801e08c

0800659c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80065a4:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <netif_set_default+0x1c>)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	20007168 	.word	0x20007168

080065bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <netif_set_up+0x1e>
 80065ca:	4b0f      	ldr	r3, [pc, #60]	; (8006608 <netif_set_up+0x4c>)
 80065cc:	f44f 7254 	mov.w	r2, #848	; 0x350
 80065d0:	490e      	ldr	r1, [pc, #56]	; (800660c <netif_set_up+0x50>)
 80065d2:	480f      	ldr	r0, [pc, #60]	; (8006610 <netif_set_up+0x54>)
 80065d4:	f00b fe70 	bl	80122b8 <iprintf>
 80065d8:	e013      	b.n	8006602 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10c      	bne.n	8006602 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	b2da      	uxtb	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80065fa:	2103      	movs	r1, #3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f809 	bl	8006614 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	0801370c 	.word	0x0801370c
 800660c:	08013894 	.word	0x08013894
 8006610:	0801375c 	.word	0x0801375c

08006614 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <netif_issue_reports+0x20>
 8006626:	4b18      	ldr	r3, [pc, #96]	; (8006688 <netif_issue_reports+0x74>)
 8006628:	f240 326d 	movw	r2, #877	; 0x36d
 800662c:	4917      	ldr	r1, [pc, #92]	; (800668c <netif_issue_reports+0x78>)
 800662e:	4818      	ldr	r0, [pc, #96]	; (8006690 <netif_issue_reports+0x7c>)
 8006630:	f00b fe42 	bl	80122b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01e      	beq.n	8006680 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006648:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800664c:	2b00      	cmp	r3, #0
 800664e:	d017      	beq.n	8006680 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d013      	beq.n	8006682 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00e      	beq.n	8006682 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f00a fa39 	bl	8010af0 <etharp_request>
 800667e:	e000      	b.n	8006682 <netif_issue_reports+0x6e>
    return;
 8006680:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	0801370c 	.word	0x0801370c
 800668c:	080138b0 	.word	0x080138b0
 8006690:	0801375c 	.word	0x0801375c

08006694 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d107      	bne.n	80066b2 <netif_set_down+0x1e>
 80066a2:	4b12      	ldr	r3, [pc, #72]	; (80066ec <netif_set_down+0x58>)
 80066a4:	f240 329b 	movw	r2, #923	; 0x39b
 80066a8:	4911      	ldr	r1, [pc, #68]	; (80066f0 <netif_set_down+0x5c>)
 80066aa:	4812      	ldr	r0, [pc, #72]	; (80066f4 <netif_set_down+0x60>)
 80066ac:	f00b fe04 	bl	80122b8 <iprintf>
 80066b0:	e019      	b.n	80066e6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d012      	beq.n	80066e6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f009 fdbf 	bl	8010264 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	0801370c 	.word	0x0801370c
 80066f0:	080138d4 	.word	0x080138d4
 80066f4:	0801375c 	.word	0x0801375c

080066f8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8006704:	f06f 030b 	mvn.w	r3, #11
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800671e:	79fb      	ldrb	r3, [r7, #7]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8006724:	4b0d      	ldr	r3, [pc, #52]	; (800675c <netif_get_by_index+0x48>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e00c      	b.n	8006746 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006732:	3301      	adds	r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	79fa      	ldrb	r2, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d101      	bne.n	8006740 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	e006      	b.n	800674e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ef      	bne.n	800672c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20007164 	.word	0x20007164

08006760 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <pbuf_free_ooseq+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <pbuf_free_ooseq+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	e00a      	b.n	800678a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f002 fbe3 	bl	8008f48 <tcp_free_ooseq>
      return;
 8006782:	e005      	b.n	8006790 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1f1      	bne.n	8006774 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	2000716c 	.word	0x2000716c
 800679c:	20007174 	.word	0x20007174

080067a0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80067a4:	4b03      	ldr	r3, [pc, #12]	; (80067b4 <pbuf_pool_is_empty+0x14>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80067aa:	bf00      	nop
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	2000716c 	.word	0x2000716c

080067b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4611      	mov	r1, r2
 80067c4:	461a      	mov	r2, r3
 80067c6:	460b      	mov	r3, r1
 80067c8:	80fb      	strh	r3, [r7, #6]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	68ba      	ldr	r2, [r7, #8]
 80067d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	88ba      	ldrh	r2, [r7, #4]
 80067e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80067e6:	8b3b      	ldrh	r3, [r7, #24]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7f3a      	ldrb	r2, [r7, #28]
 80067f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	73da      	strb	r2, [r3, #15]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	; 0x30
 8006810:	af02      	add	r7, sp, #8
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
 8006816:	460b      	mov	r3, r1
 8006818:	80bb      	strh	r3, [r7, #4]
 800681a:	4613      	mov	r3, r2
 800681c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800681e:	79fb      	ldrb	r3, [r7, #7]
 8006820:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006822:	887b      	ldrh	r3, [r7, #2]
 8006824:	2b41      	cmp	r3, #65	; 0x41
 8006826:	d00b      	beq.n	8006840 <pbuf_alloc+0x34>
 8006828:	2b41      	cmp	r3, #65	; 0x41
 800682a:	dc02      	bgt.n	8006832 <pbuf_alloc+0x26>
 800682c:	2b01      	cmp	r3, #1
 800682e:	d007      	beq.n	8006840 <pbuf_alloc+0x34>
 8006830:	e0c2      	b.n	80069b8 <pbuf_alloc+0x1ac>
 8006832:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006836:	d00b      	beq.n	8006850 <pbuf_alloc+0x44>
 8006838:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800683c:	d070      	beq.n	8006920 <pbuf_alloc+0x114>
 800683e:	e0bb      	b.n	80069b8 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006840:	887a      	ldrh	r2, [r7, #2]
 8006842:	88bb      	ldrh	r3, [r7, #4]
 8006844:	4619      	mov	r1, r3
 8006846:	2000      	movs	r0, #0
 8006848:	f000 f8d2 	bl	80069f0 <pbuf_alloc_reference>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800684e:	e0bd      	b.n	80069cc <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006858:	88bb      	ldrh	r3, [r7, #4]
 800685a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800685c:	2008      	movs	r0, #8
 800685e:	f7ff fc69 	bl	8006134 <memp_malloc>
 8006862:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800686a:	f7ff ff99 	bl	80067a0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006876:	f000 faa9 	bl	8006dcc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	e0a7      	b.n	80069ce <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800687e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006880:	3303      	adds	r3, #3
 8006882:	b29b      	uxth	r3, r3
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	b29b      	uxth	r3, r3
 800688a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800688e:	b29b      	uxth	r3, r3
 8006890:	8b7a      	ldrh	r2, [r7, #26]
 8006892:	4293      	cmp	r3, r2
 8006894:	bf28      	it	cs
 8006896:	4613      	movcs	r3, r2
 8006898:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800689a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800689c:	3310      	adds	r3, #16
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	3303      	adds	r3, #3
 80068a4:	f023 0303 	bic.w	r3, r3, #3
 80068a8:	4618      	mov	r0, r3
 80068aa:	89f9      	ldrh	r1, [r7, #14]
 80068ac:	8b7a      	ldrh	r2, [r7, #26]
 80068ae:	2300      	movs	r3, #0
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	887b      	ldrh	r3, [r7, #2]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	460b      	mov	r3, r1
 80068b8:	4601      	mov	r1, r0
 80068ba:	6938      	ldr	r0, [r7, #16]
 80068bc:	f7ff ff7c 	bl	80067b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <pbuf_alloc+0xce>
 80068cc:	4b42      	ldr	r3, [pc, #264]	; (80069d8 <pbuf_alloc+0x1cc>)
 80068ce:	f240 1201 	movw	r2, #257	; 0x101
 80068d2:	4942      	ldr	r1, [pc, #264]	; (80069dc <pbuf_alloc+0x1d0>)
 80068d4:	4842      	ldr	r0, [pc, #264]	; (80069e0 <pbuf_alloc+0x1d4>)
 80068d6:	f00b fcef 	bl	80122b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80068da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068dc:	3303      	adds	r3, #3
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80068e6:	d106      	bne.n	80068f6 <pbuf_alloc+0xea>
 80068e8:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <pbuf_alloc+0x1cc>)
 80068ea:	f240 1203 	movw	r2, #259	; 0x103
 80068ee:	493d      	ldr	r1, [pc, #244]	; (80069e4 <pbuf_alloc+0x1d8>)
 80068f0:	483b      	ldr	r0, [pc, #236]	; (80069e0 <pbuf_alloc+0x1d4>)
 80068f2:	f00b fce1 	bl	80122b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80068f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	e002      	b.n	8006908 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800690c:	8b7a      	ldrh	r2, [r7, #26]
 800690e:	89fb      	ldrh	r3, [r7, #14]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006918:	8b7b      	ldrh	r3, [r7, #26]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d19e      	bne.n	800685c <pbuf_alloc+0x50>
      break;
 800691e:	e055      	b.n	80069cc <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006922:	3303      	adds	r3, #3
 8006924:	b29b      	uxth	r3, r3
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	b29a      	uxth	r2, r3
 800692c:	88bb      	ldrh	r3, [r7, #4]
 800692e:	3303      	adds	r3, #3
 8006930:	b29b      	uxth	r3, r3
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	b29b      	uxth	r3, r3
 8006938:	4413      	add	r3, r2
 800693a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800693c:	8b3b      	ldrh	r3, [r7, #24]
 800693e:	3310      	adds	r3, #16
 8006940:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006942:	8b3a      	ldrh	r2, [r7, #24]
 8006944:	88bb      	ldrh	r3, [r7, #4]
 8006946:	3303      	adds	r3, #3
 8006948:	f023 0303 	bic.w	r3, r3, #3
 800694c:	429a      	cmp	r2, r3
 800694e:	d306      	bcc.n	800695e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006950:	8afa      	ldrh	r2, [r7, #22]
 8006952:	88bb      	ldrh	r3, [r7, #4]
 8006954:	3303      	adds	r3, #3
 8006956:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800695a:	429a      	cmp	r2, r3
 800695c:	d201      	bcs.n	8006962 <pbuf_alloc+0x156>
        return NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	e035      	b.n	80069ce <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006962:	8afb      	ldrh	r3, [r7, #22]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fa77 	bl	8005e58 <mem_malloc>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <pbuf_alloc+0x16a>
        return NULL;
 8006972:	2300      	movs	r3, #0
 8006974:	e02b      	b.n	80069ce <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006978:	3310      	adds	r3, #16
 800697a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697c:	4413      	add	r3, r2
 800697e:	3303      	adds	r3, #3
 8006980:	f023 0303 	bic.w	r3, r3, #3
 8006984:	4618      	mov	r0, r3
 8006986:	88b9      	ldrh	r1, [r7, #4]
 8006988:	88ba      	ldrh	r2, [r7, #4]
 800698a:	2300      	movs	r3, #0
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	887b      	ldrh	r3, [r7, #2]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	460b      	mov	r3, r1
 8006994:	4601      	mov	r1, r0
 8006996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006998:	f7ff ff0e 	bl	80067b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <pbuf_alloc+0x1be>
 80069a8:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <pbuf_alloc+0x1cc>)
 80069aa:	f240 1223 	movw	r2, #291	; 0x123
 80069ae:	490e      	ldr	r1, [pc, #56]	; (80069e8 <pbuf_alloc+0x1dc>)
 80069b0:	480b      	ldr	r0, [pc, #44]	; (80069e0 <pbuf_alloc+0x1d4>)
 80069b2:	f00b fc81 	bl	80122b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80069b6:	e008      	b.n	80069ca <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <pbuf_alloc+0x1cc>)
 80069ba:	f240 1227 	movw	r2, #295	; 0x127
 80069be:	490b      	ldr	r1, [pc, #44]	; (80069ec <pbuf_alloc+0x1e0>)
 80069c0:	4807      	ldr	r0, [pc, #28]	; (80069e0 <pbuf_alloc+0x1d4>)
 80069c2:	f00b fc79 	bl	80122b8 <iprintf>
      return NULL;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e001      	b.n	80069ce <pbuf_alloc+0x1c2>
      break;
 80069ca:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3728      	adds	r7, #40	; 0x28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	0801393c 	.word	0x0801393c
 80069dc:	0801396c 	.word	0x0801396c
 80069e0:	0801399c 	.word	0x0801399c
 80069e4:	080139c4 	.word	0x080139c4
 80069e8:	080139f8 	.word	0x080139f8
 80069ec:	08013a24 	.word	0x08013a24

080069f0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	807b      	strh	r3, [r7, #2]
 80069fc:	4613      	mov	r3, r2
 80069fe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006a00:	883b      	ldrh	r3, [r7, #0]
 8006a02:	2b41      	cmp	r3, #65	; 0x41
 8006a04:	d009      	beq.n	8006a1a <pbuf_alloc_reference+0x2a>
 8006a06:	883b      	ldrh	r3, [r7, #0]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d006      	beq.n	8006a1a <pbuf_alloc_reference+0x2a>
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	; (8006a4c <pbuf_alloc_reference+0x5c>)
 8006a0e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006a12:	490f      	ldr	r1, [pc, #60]	; (8006a50 <pbuf_alloc_reference+0x60>)
 8006a14:	480f      	ldr	r0, [pc, #60]	; (8006a54 <pbuf_alloc_reference+0x64>)
 8006a16:	f00b fc4f 	bl	80122b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006a1a:	2007      	movs	r0, #7
 8006a1c:	f7ff fb8a 	bl	8006134 <memp_malloc>
 8006a20:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e00b      	b.n	8006a44 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006a2c:	8879      	ldrh	r1, [r7, #2]
 8006a2e:	887a      	ldrh	r2, [r7, #2]
 8006a30:	2300      	movs	r3, #0
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	883b      	ldrh	r3, [r7, #0]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f7ff febb 	bl	80067b8 <pbuf_init_alloced_pbuf>
  return p;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	0801393c 	.word	0x0801393c
 8006a50:	08013a40 	.word	0x08013a40
 8006a54:	0801399c 	.word	0x0801399c

08006a58 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	607b      	str	r3, [r7, #4]
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]
 8006a64:	460b      	mov	r3, r1
 8006a66:	81bb      	strh	r3, [r7, #12]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006a70:	8a7b      	ldrh	r3, [r7, #18]
 8006a72:	3303      	adds	r3, #3
 8006a74:	f023 0203 	bic.w	r2, r3, #3
 8006a78:	89bb      	ldrh	r3, [r7, #12]
 8006a7a:	441a      	add	r2, r3
 8006a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d901      	bls.n	8006a86 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	e018      	b.n	8006ab8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006a8c:	8a7b      	ldrh	r3, [r7, #18]
 8006a8e:	3303      	adds	r3, #3
 8006a90:	f023 0303 	bic.w	r3, r3, #3
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	4413      	add	r3, r2
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	e001      	b.n	8006aa0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	89b9      	ldrh	r1, [r7, #12]
 8006aa4:	89ba      	ldrh	r2, [r7, #12]
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	897b      	ldrh	r3, [r7, #10]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	f7ff fe81 	bl	80067b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006ab6:	687b      	ldr	r3, [r7, #4]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <pbuf_realloc+0x20>
 8006ad2:	4b3a      	ldr	r3, [pc, #232]	; (8006bbc <pbuf_realloc+0xfc>)
 8006ad4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006ad8:	4939      	ldr	r1, [pc, #228]	; (8006bc0 <pbuf_realloc+0x100>)
 8006ada:	483a      	ldr	r0, [pc, #232]	; (8006bc4 <pbuf_realloc+0x104>)
 8006adc:	f00b fbec 	bl	80122b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	891b      	ldrh	r3, [r3, #8]
 8006ae4:	887a      	ldrh	r2, [r7, #2]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d264      	bcs.n	8006bb4 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	891a      	ldrh	r2, [r3, #8]
 8006aee:	887b      	ldrh	r3, [r7, #2]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006af4:	887b      	ldrh	r3, [r7, #2]
 8006af6:	817b      	strh	r3, [r7, #10]
  q = p;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006afc:	e018      	b.n	8006b30 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	895b      	ldrh	r3, [r3, #10]
 8006b02:	897a      	ldrh	r2, [r7, #10]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	891a      	ldrh	r2, [r3, #8]
 8006b0c:	893b      	ldrh	r3, [r7, #8]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <pbuf_realloc+0x70>
 8006b22:	4b26      	ldr	r3, [pc, #152]	; (8006bbc <pbuf_realloc+0xfc>)
 8006b24:	f240 12af 	movw	r2, #431	; 0x1af
 8006b28:	4927      	ldr	r1, [pc, #156]	; (8006bc8 <pbuf_realloc+0x108>)
 8006b2a:	4826      	ldr	r0, [pc, #152]	; (8006bc4 <pbuf_realloc+0x104>)
 8006b2c:	f00b fbc4 	bl	80122b8 <iprintf>
  while (rem_len > q->len) {
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	895b      	ldrh	r3, [r3, #10]
 8006b34:	897a      	ldrh	r2, [r7, #10]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d8e1      	bhi.n	8006afe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	7b1b      	ldrb	r3, [r3, #12]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d122      	bne.n	8006b8c <pbuf_realloc+0xcc>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	895b      	ldrh	r3, [r3, #10]
 8006b4a:	897a      	ldrh	r2, [r7, #10]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d01d      	beq.n	8006b8c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	7b5b      	ldrb	r3, [r3, #13]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d117      	bne.n	8006b8c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	461a      	mov	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	897b      	ldrh	r3, [r7, #10]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff f875 	bl	8005c60 <mem_trim>
 8006b76:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <pbuf_realloc+0xcc>
 8006b7e:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <pbuf_realloc+0xfc>)
 8006b80:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006b84:	4911      	ldr	r1, [pc, #68]	; (8006bcc <pbuf_realloc+0x10c>)
 8006b86:	480f      	ldr	r0, [pc, #60]	; (8006bc4 <pbuf_realloc+0x104>)
 8006b88:	f00b fb96 	bl	80122b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	897a      	ldrh	r2, [r7, #10]
 8006b90:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	895a      	ldrh	r2, [r3, #10]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d004      	beq.n	8006bac <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 f910 	bl	8006dcc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	e000      	b.n	8006bb6 <pbuf_realloc+0xf6>
    return;
 8006bb4:	bf00      	nop

}
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	0801393c 	.word	0x0801393c
 8006bc0:	08013a54 	.word	0x08013a54
 8006bc4:	0801399c 	.word	0x0801399c
 8006bc8:	08013a6c 	.word	0x08013a6c
 8006bcc:	08013a84 	.word	0x08013a84

08006bd0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d106      	bne.n	8006bf2 <pbuf_add_header_impl+0x22>
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <pbuf_add_header_impl+0xc4>)
 8006be6:	f240 12df 	movw	r2, #479	; 0x1df
 8006bea:	492b      	ldr	r1, [pc, #172]	; (8006c98 <pbuf_add_header_impl+0xc8>)
 8006bec:	482b      	ldr	r0, [pc, #172]	; (8006c9c <pbuf_add_header_impl+0xcc>)
 8006bee:	f00b fb63 	bl	80122b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <pbuf_add_header_impl+0x30>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfe:	d301      	bcc.n	8006c04 <pbuf_add_header_impl+0x34>
    return 1;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e043      	b.n	8006c8c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <pbuf_add_header_impl+0x3e>
    return 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e03e      	b.n	8006c8c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	891a      	ldrh	r2, [r3, #8]
 8006c16:	8a7b      	ldrh	r3, [r7, #18]
 8006c18:	4413      	add	r3, r2
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	8a7a      	ldrh	r2, [r7, #18]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d901      	bls.n	8006c26 <pbuf_add_header_impl+0x56>
    return 1;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e032      	b.n	8006c8c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	7b1b      	ldrb	r3, [r3, #12]
 8006c2a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006c2c:	8a3b      	ldrh	r3, [r7, #16]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00c      	beq.n	8006c50 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	425b      	negs	r3, r3
 8006c3e:	4413      	add	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3310      	adds	r3, #16
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d20d      	bcs.n	8006c68 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e01d      	b.n	8006c8c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	425b      	negs	r3, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e001      	b.n	8006c68 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e011      	b.n	8006c8c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	895a      	ldrh	r2, [r3, #10]
 8006c72:	8a7b      	ldrh	r3, [r7, #18]
 8006c74:	4413      	add	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	891a      	ldrh	r2, [r3, #8]
 8006c80:	8a7b      	ldrh	r3, [r7, #18]
 8006c82:	4413      	add	r3, r2
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	811a      	strh	r2, [r3, #8]


  return 0;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	0801393c 	.word	0x0801393c
 8006c98:	08013aa0 	.word	0x08013aa0
 8006c9c:	0801399c 	.word	0x0801399c

08006ca0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006caa:	2200      	movs	r2, #0
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ff8e 	bl	8006bd0 <pbuf_add_header_impl>
 8006cb4:	4603      	mov	r3, r0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <pbuf_remove_header+0x1e>
 8006cd0:	4b20      	ldr	r3, [pc, #128]	; (8006d54 <pbuf_remove_header+0x94>)
 8006cd2:	f240 224b 	movw	r2, #587	; 0x24b
 8006cd6:	4920      	ldr	r1, [pc, #128]	; (8006d58 <pbuf_remove_header+0x98>)
 8006cd8:	4820      	ldr	r0, [pc, #128]	; (8006d5c <pbuf_remove_header+0x9c>)
 8006cda:	f00b faed 	bl	80122b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <pbuf_remove_header+0x2c>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cea:	d301      	bcc.n	8006cf0 <pbuf_remove_header+0x30>
    return 1;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e02c      	b.n	8006d4a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <pbuf_remove_header+0x3a>
    return 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e027      	b.n	8006d4a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	895b      	ldrh	r3, [r3, #10]
 8006d02:	89fa      	ldrh	r2, [r7, #14]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d908      	bls.n	8006d1a <pbuf_remove_header+0x5a>
 8006d08:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <pbuf_remove_header+0x94>)
 8006d0a:	f240 2255 	movw	r2, #597	; 0x255
 8006d0e:	4914      	ldr	r1, [pc, #80]	; (8006d60 <pbuf_remove_header+0xa0>)
 8006d10:	4812      	ldr	r0, [pc, #72]	; (8006d5c <pbuf_remove_header+0x9c>)
 8006d12:	f00b fad1 	bl	80122b8 <iprintf>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e017      	b.n	8006d4a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	441a      	add	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	895a      	ldrh	r2, [r3, #10]
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	891a      	ldrh	r2, [r3, #8]
 8006d3e:	89fb      	ldrh	r3, [r7, #14]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	0801393c 	.word	0x0801393c
 8006d58:	08013aa0 	.word	0x08013aa0
 8006d5c:	0801399c 	.word	0x0801399c
 8006d60:	08013aac 	.word	0x08013aac

08006d64 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	807b      	strh	r3, [r7, #2]
 8006d70:	4613      	mov	r3, r2
 8006d72:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006d74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	da08      	bge.n	8006d8e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006d7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d80:	425b      	negs	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff9b 	bl	8006cc0 <pbuf_remove_header>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	e007      	b.n	8006d9e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006d8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d92:	787a      	ldrb	r2, [r7, #1]
 8006d94:	4619      	mov	r1, r3
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ff1a 	bl	8006bd0 <pbuf_add_header_impl>
 8006d9c:	4603      	mov	r3, r0
  }
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006db2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006db6:	2201      	movs	r2, #1
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7ff ffd2 	bl	8006d64 <pbuf_header_impl>
 8006dc0:	4603      	mov	r3, r0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <pbuf_free+0x22>
 8006de0:	4b38      	ldr	r3, [pc, #224]	; (8006ec4 <pbuf_free+0xf8>)
 8006de2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006de6:	4938      	ldr	r1, [pc, #224]	; (8006ec8 <pbuf_free+0xfc>)
 8006de8:	4838      	ldr	r0, [pc, #224]	; (8006ecc <pbuf_free+0x100>)
 8006dea:	f00b fa65 	bl	80122b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e063      	b.n	8006eba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006df6:	e05c      	b.n	8006eb2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	7b9b      	ldrb	r3, [r3, #14]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <pbuf_free+0x42>
 8006e00:	4b30      	ldr	r3, [pc, #192]	; (8006ec4 <pbuf_free+0xf8>)
 8006e02:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006e06:	4932      	ldr	r1, [pc, #200]	; (8006ed0 <pbuf_free+0x104>)
 8006e08:	4830      	ldr	r0, [pc, #192]	; (8006ecc <pbuf_free+0x100>)
 8006e0a:	f00b fa55 	bl	80122b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7b9b      	ldrb	r3, [r3, #14]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b2da      	uxtb	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	739a      	strb	r2, [r3, #14]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7b9b      	ldrb	r3, [r3, #14]
 8006e1e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006e20:	7dbb      	ldrb	r3, [r7, #22]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d143      	bne.n	8006eae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7b1b      	ldrb	r3, [r3, #12]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	7b5b      	ldrb	r3, [r3, #13]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d011      	beq.n	8006e66 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <pbuf_free+0x90>
 8006e4e:	4b1d      	ldr	r3, [pc, #116]	; (8006ec4 <pbuf_free+0xf8>)
 8006e50:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006e54:	491f      	ldr	r1, [pc, #124]	; (8006ed4 <pbuf_free+0x108>)
 8006e56:	481d      	ldr	r0, [pc, #116]	; (8006ecc <pbuf_free+0x100>)
 8006e58:	f00b fa2e 	bl	80122b8 <iprintf>
        pc->custom_free_function(p);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
 8006e64:	e01d      	b.n	8006ea2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d104      	bne.n	8006e76 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	2008      	movs	r0, #8
 8006e70:	f7ff f9ac 	bl	80061cc <memp_free>
 8006e74:	e015      	b.n	8006ea2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d104      	bne.n	8006e86 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	2007      	movs	r0, #7
 8006e80:	f7ff f9a4 	bl	80061cc <memp_free>
 8006e84:	e00d      	b.n	8006ea2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <pbuf_free+0xc8>
          mem_free(p);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fe fe7d 	bl	8005b8c <mem_free>
 8006e92:	e006      	b.n	8006ea2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006e94:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <pbuf_free+0xf8>)
 8006e96:	f240 320f 	movw	r2, #783	; 0x30f
 8006e9a:	490f      	ldr	r1, [pc, #60]	; (8006ed8 <pbuf_free+0x10c>)
 8006e9c:	480b      	ldr	r0, [pc, #44]	; (8006ecc <pbuf_free+0x100>)
 8006e9e:	f00b fa0b 	bl	80122b8 <iprintf>
        }
      }
      count++;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	607b      	str	r3, [r7, #4]
 8006eac:	e001      	b.n	8006eb2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d19f      	bne.n	8006df8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0801393c 	.word	0x0801393c
 8006ec8:	08013aa0 	.word	0x08013aa0
 8006ecc:	0801399c 	.word	0x0801399c
 8006ed0:	08013acc 	.word	0x08013acc
 8006ed4:	08013ae4 	.word	0x08013ae4
 8006ed8:	08013b08 	.word	0x08013b08

08006edc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006ee8:	e005      	b.n	8006ef6 <pbuf_clen+0x1a>
    ++len;
 8006eea:	89fb      	ldrh	r3, [r7, #14]
 8006eec:	3301      	adds	r3, #1
 8006eee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f6      	bne.n	8006eea <pbuf_clen+0xe>
  }
  return len;
 8006efc:	89fb      	ldrh	r3, [r7, #14]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d010      	beq.n	8006f3c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7b9b      	ldrb	r3, [r3, #14]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	7b9b      	ldrb	r3, [r3, #14]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <pbuf_ref+0x30>
 8006f2e:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <pbuf_ref+0x38>)
 8006f30:	f240 3242 	movw	r2, #834	; 0x342
 8006f34:	4904      	ldr	r1, [pc, #16]	; (8006f48 <pbuf_ref+0x3c>)
 8006f36:	4805      	ldr	r0, [pc, #20]	; (8006f4c <pbuf_ref+0x40>)
 8006f38:	f00b f9be 	bl	80122b8 <iprintf>
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	0801393c 	.word	0x0801393c
 8006f48:	08013b1c 	.word	0x08013b1c
 8006f4c:	0801399c 	.word	0x0801399c

08006f50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <pbuf_cat+0x16>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d107      	bne.n	8006f76 <pbuf_cat+0x26>
 8006f66:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <pbuf_cat+0x98>)
 8006f68:	f240 325a 	movw	r2, #858	; 0x35a
 8006f6c:	491f      	ldr	r1, [pc, #124]	; (8006fec <pbuf_cat+0x9c>)
 8006f6e:	4820      	ldr	r0, [pc, #128]	; (8006ff0 <pbuf_cat+0xa0>)
 8006f70:	f00b f9a2 	bl	80122b8 <iprintf>
 8006f74:	e034      	b.n	8006fe0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e00a      	b.n	8006f92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	891a      	ldrh	r2, [r3, #8]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	891b      	ldrh	r3, [r3, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	891a      	ldrh	r2, [r3, #8]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	895b      	ldrh	r3, [r3, #10]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d006      	beq.n	8006fb4 <pbuf_cat+0x64>
 8006fa6:	4b10      	ldr	r3, [pc, #64]	; (8006fe8 <pbuf_cat+0x98>)
 8006fa8:	f240 3262 	movw	r2, #866	; 0x362
 8006fac:	4911      	ldr	r1, [pc, #68]	; (8006ff4 <pbuf_cat+0xa4>)
 8006fae:	4810      	ldr	r0, [pc, #64]	; (8006ff0 <pbuf_cat+0xa0>)
 8006fb0:	f00b f982 	bl	80122b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <pbuf_cat+0x7a>
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <pbuf_cat+0x98>)
 8006fbe:	f240 3263 	movw	r2, #867	; 0x363
 8006fc2:	490d      	ldr	r1, [pc, #52]	; (8006ff8 <pbuf_cat+0xa8>)
 8006fc4:	480a      	ldr	r0, [pc, #40]	; (8006ff0 <pbuf_cat+0xa0>)
 8006fc6:	f00b f977 	bl	80122b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	891a      	ldrh	r2, [r3, #8]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	891b      	ldrh	r3, [r3, #8]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	0801393c 	.word	0x0801393c
 8006fec:	08013b30 	.word	0x08013b30
 8006ff0:	0801399c 	.word	0x0801399c
 8006ff4:	08013b68 	.word	0x08013b68
 8006ff8:	08013b98 	.word	0x08013b98

08006ffc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff ffa1 	bl	8006f50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800700e:	6838      	ldr	r0, [r7, #0]
 8007010:	f7ff ff7c 	bl	8006f0c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	2300      	movs	r3, #0
 800702c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <pbuf_copy+0x2a>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d005      	beq.n	8007046 <pbuf_copy+0x2a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	891a      	ldrh	r2, [r3, #8]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	891b      	ldrh	r3, [r3, #8]
 8007042:	429a      	cmp	r2, r3
 8007044:	d209      	bcs.n	800705a <pbuf_copy+0x3e>
 8007046:	4b57      	ldr	r3, [pc, #348]	; (80071a4 <pbuf_copy+0x188>)
 8007048:	f240 32ca 	movw	r2, #970	; 0x3ca
 800704c:	4956      	ldr	r1, [pc, #344]	; (80071a8 <pbuf_copy+0x18c>)
 800704e:	4857      	ldr	r0, [pc, #348]	; (80071ac <pbuf_copy+0x190>)
 8007050:	f00b f932 	bl	80122b8 <iprintf>
 8007054:	f06f 030f 	mvn.w	r3, #15
 8007058:	e09f      	b.n	800719a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	895b      	ldrh	r3, [r3, #10]
 800705e:	461a      	mov	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1ad2      	subs	r2, r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	895b      	ldrh	r3, [r3, #10]
 8007068:	4619      	mov	r1, r3
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1acb      	subs	r3, r1, r3
 800706e:	429a      	cmp	r2, r3
 8007070:	d306      	bcc.n	8007080 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	895b      	ldrh	r3, [r3, #10]
 8007076:	461a      	mov	r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	e005      	b.n	800708c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	895b      	ldrh	r3, [r3, #10]
 8007084:	461a      	mov	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	1ad3      	subs	r3, r2, r3
 800708a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	18d0      	adds	r0, r2, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4619      	mov	r1, r3
 80070a0:	f00b f8f7 	bl	8012292 <memcpy>
    offset_to += len;
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	895b      	ldrh	r3, [r3, #10]
 80070b8:	461a      	mov	r2, r3
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	4293      	cmp	r3, r2
 80070be:	d906      	bls.n	80070ce <pbuf_copy+0xb2>
 80070c0:	4b38      	ldr	r3, [pc, #224]	; (80071a4 <pbuf_copy+0x188>)
 80070c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80070c6:	493a      	ldr	r1, [pc, #232]	; (80071b0 <pbuf_copy+0x194>)
 80070c8:	4838      	ldr	r0, [pc, #224]	; (80071ac <pbuf_copy+0x190>)
 80070ca:	f00b f8f5 	bl	80122b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	895b      	ldrh	r3, [r3, #10]
 80070d2:	461a      	mov	r2, r3
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d906      	bls.n	80070e8 <pbuf_copy+0xcc>
 80070da:	4b32      	ldr	r3, [pc, #200]	; (80071a4 <pbuf_copy+0x188>)
 80070dc:	f240 32da 	movw	r2, #986	; 0x3da
 80070e0:	4934      	ldr	r1, [pc, #208]	; (80071b4 <pbuf_copy+0x198>)
 80070e2:	4832      	ldr	r0, [pc, #200]	; (80071ac <pbuf_copy+0x190>)
 80070e4:	f00b f8e8 	bl	80122b8 <iprintf>
    if (offset_from >= p_from->len) {
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	895b      	ldrh	r3, [r3, #10]
 80070ec:	461a      	mov	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d304      	bcc.n	80070fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	895b      	ldrh	r3, [r3, #10]
 8007102:	461a      	mov	r2, r3
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4293      	cmp	r3, r2
 8007108:	d114      	bne.n	8007134 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10c      	bne.n	8007134 <pbuf_copy+0x118>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d009      	beq.n	8007134 <pbuf_copy+0x118>
 8007120:	4b20      	ldr	r3, [pc, #128]	; (80071a4 <pbuf_copy+0x188>)
 8007122:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007126:	4924      	ldr	r1, [pc, #144]	; (80071b8 <pbuf_copy+0x19c>)
 8007128:	4820      	ldr	r0, [pc, #128]	; (80071ac <pbuf_copy+0x190>)
 800712a:	f00b f8c5 	bl	80122b8 <iprintf>
 800712e:	f06f 030f 	mvn.w	r3, #15
 8007132:	e032      	b.n	800719a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d013      	beq.n	8007162 <pbuf_copy+0x146>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	895a      	ldrh	r2, [r3, #10]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	891b      	ldrh	r3, [r3, #8]
 8007142:	429a      	cmp	r2, r3
 8007144:	d10d      	bne.n	8007162 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <pbuf_copy+0x146>
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <pbuf_copy+0x188>)
 8007150:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8007154:	4919      	ldr	r1, [pc, #100]	; (80071bc <pbuf_copy+0x1a0>)
 8007156:	4815      	ldr	r0, [pc, #84]	; (80071ac <pbuf_copy+0x190>)
 8007158:	f00b f8ae 	bl	80122b8 <iprintf>
 800715c:	f06f 0305 	mvn.w	r3, #5
 8007160:	e01b      	b.n	800719a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d013      	beq.n	8007190 <pbuf_copy+0x174>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	895a      	ldrh	r2, [r3, #10]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	891b      	ldrh	r3, [r3, #8]
 8007170:	429a      	cmp	r2, r3
 8007172:	d10d      	bne.n	8007190 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <pbuf_copy+0x174>
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <pbuf_copy+0x188>)
 800717e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007182:	490e      	ldr	r1, [pc, #56]	; (80071bc <pbuf_copy+0x1a0>)
 8007184:	4809      	ldr	r0, [pc, #36]	; (80071ac <pbuf_copy+0x190>)
 8007186:	f00b f897 	bl	80122b8 <iprintf>
 800718a:	f06f 0305 	mvn.w	r3, #5
 800718e:	e004      	b.n	800719a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f47f af61 	bne.w	800705a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	0801393c 	.word	0x0801393c
 80071a8:	08013be4 	.word	0x08013be4
 80071ac:	0801399c 	.word	0x0801399c
 80071b0:	08013c14 	.word	0x08013c14
 80071b4:	08013c2c 	.word	0x08013c2c
 80071b8:	08013c48 	.word	0x08013c48
 80071bc:	08013c58 	.word	0x08013c58

080071c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	460b      	mov	r3, r1
 80071d0:	80fb      	strh	r3, [r7, #6]
 80071d2:	4613      	mov	r3, r2
 80071d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d108      	bne.n	80071f6 <pbuf_copy_partial+0x36>
 80071e4:	4b2b      	ldr	r3, [pc, #172]	; (8007294 <pbuf_copy_partial+0xd4>)
 80071e6:	f240 420a 	movw	r2, #1034	; 0x40a
 80071ea:	492b      	ldr	r1, [pc, #172]	; (8007298 <pbuf_copy_partial+0xd8>)
 80071ec:	482b      	ldr	r0, [pc, #172]	; (800729c <pbuf_copy_partial+0xdc>)
 80071ee:	f00b f863 	bl	80122b8 <iprintf>
 80071f2:	2300      	movs	r3, #0
 80071f4:	e04a      	b.n	800728c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d108      	bne.n	800720e <pbuf_copy_partial+0x4e>
 80071fc:	4b25      	ldr	r3, [pc, #148]	; (8007294 <pbuf_copy_partial+0xd4>)
 80071fe:	f240 420b 	movw	r2, #1035	; 0x40b
 8007202:	4927      	ldr	r1, [pc, #156]	; (80072a0 <pbuf_copy_partial+0xe0>)
 8007204:	4825      	ldr	r0, [pc, #148]	; (800729c <pbuf_copy_partial+0xdc>)
 8007206:	f00b f857 	bl	80122b8 <iprintf>
 800720a:	2300      	movs	r3, #0
 800720c:	e03e      	b.n	800728c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	e034      	b.n	800727e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007214:	88bb      	ldrh	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <pbuf_copy_partial+0x70>
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	88ba      	ldrh	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d305      	bcc.n	8007230 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	895b      	ldrh	r3, [r3, #10]
 8007228:	88ba      	ldrh	r2, [r7, #4]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	80bb      	strh	r3, [r7, #4]
 800722e:	e023      	b.n	8007278 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	895a      	ldrh	r2, [r3, #10]
 8007234:	88bb      	ldrh	r3, [r7, #4]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800723a:	8b3a      	ldrh	r2, [r7, #24]
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	429a      	cmp	r2, r3
 8007240:	d901      	bls.n	8007246 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007246:	8b7b      	ldrh	r3, [r7, #26]
 8007248:	68ba      	ldr	r2, [r7, #8]
 800724a:	18d0      	adds	r0, r2, r3
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	88bb      	ldrh	r3, [r7, #4]
 8007252:	4413      	add	r3, r2
 8007254:	8b3a      	ldrh	r2, [r7, #24]
 8007256:	4619      	mov	r1, r3
 8007258:	f00b f81b 	bl	8012292 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800725c:	8afa      	ldrh	r2, [r7, #22]
 800725e:	8b3b      	ldrh	r3, [r7, #24]
 8007260:	4413      	add	r3, r2
 8007262:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007264:	8b7a      	ldrh	r2, [r7, #26]
 8007266:	8b3b      	ldrh	r3, [r7, #24]
 8007268:	4413      	add	r3, r2
 800726a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800726c:	88fa      	ldrh	r2, [r7, #6]
 800726e:	8b3b      	ldrh	r3, [r7, #24]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	61fb      	str	r3, [r7, #28]
 800727e:	88fb      	ldrh	r3, [r7, #6]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <pbuf_copy_partial+0xca>
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1c4      	bne.n	8007214 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800728a:	8afb      	ldrh	r3, [r7, #22]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	0801393c 	.word	0x0801393c
 8007298:	08013c84 	.word	0x08013c84
 800729c:	0801399c 	.word	0x0801399c
 80072a0:	08013ca4 	.word	0x08013ca4

080072a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	4603      	mov	r3, r0
 80072ac:	603a      	str	r2, [r7, #0]
 80072ae:	71fb      	strb	r3, [r7, #7]
 80072b0:	460b      	mov	r3, r1
 80072b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	8919      	ldrh	r1, [r3, #8]
 80072b8:	88ba      	ldrh	r2, [r7, #4]
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff faa5 	bl	800680c <pbuf_alloc>
 80072c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <pbuf_clone+0x2a>
    return NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	e011      	b.n	80072f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff fea3 	bl	800701c <pbuf_copy>
 80072d6:	4603      	mov	r3, r0
 80072d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80072da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d006      	beq.n	80072f0 <pbuf_clone+0x4c>
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <pbuf_clone+0x58>)
 80072e4:	f240 5224 	movw	r2, #1316	; 0x524
 80072e8:	4905      	ldr	r1, [pc, #20]	; (8007300 <pbuf_clone+0x5c>)
 80072ea:	4806      	ldr	r0, [pc, #24]	; (8007304 <pbuf_clone+0x60>)
 80072ec:	f00a ffe4 	bl	80122b8 <iprintf>
  return q;
 80072f0:	68fb      	ldr	r3, [r7, #12]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	0801393c 	.word	0x0801393c
 8007300:	08013db0 	.word	0x08013db0
 8007304:	0801399c 	.word	0x0801399c

08007308 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800730c:	f00a ffec 	bl	80122e8 <rand>
 8007310:	4603      	mov	r3, r0
 8007312:	b29b      	uxth	r3, r3
 8007314:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007318:	b29b      	uxth	r3, r3
 800731a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800731e:	b29a      	uxth	r2, r3
 8007320:	4b01      	ldr	r3, [pc, #4]	; (8007328 <tcp_init+0x20>)
 8007322:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007324:	bf00      	nop
 8007326:	bd80      	pop	{r7, pc}
 8007328:	2000000a 	.word	0x2000000a

0800732c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7d1b      	ldrb	r3, [r3, #20]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d105      	bne.n	8007348 <tcp_free+0x1c>
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <tcp_free+0x2c>)
 800733e:	22d4      	movs	r2, #212	; 0xd4
 8007340:	4906      	ldr	r1, [pc, #24]	; (800735c <tcp_free+0x30>)
 8007342:	4807      	ldr	r0, [pc, #28]	; (8007360 <tcp_free+0x34>)
 8007344:	f00a ffb8 	bl	80122b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	2001      	movs	r0, #1
 800734c:	f7fe ff3e 	bl	80061cc <memp_free>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	08013e3c 	.word	0x08013e3c
 800735c:	08013e6c 	.word	0x08013e6c
 8007360:	08013e80 	.word	0x08013e80

08007364 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7d1b      	ldrb	r3, [r3, #20]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d105      	bne.n	8007380 <tcp_free_listen+0x1c>
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <tcp_free_listen+0x2c>)
 8007376:	22df      	movs	r2, #223	; 0xdf
 8007378:	4906      	ldr	r1, [pc, #24]	; (8007394 <tcp_free_listen+0x30>)
 800737a:	4807      	ldr	r0, [pc, #28]	; (8007398 <tcp_free_listen+0x34>)
 800737c:	f00a ff9c 	bl	80122b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	2002      	movs	r0, #2
 8007384:	f7fe ff22 	bl	80061cc <memp_free>
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	08013e3c 	.word	0x08013e3c
 8007394:	08013ea8 	.word	0x08013ea8
 8007398:	08013e80 	.word	0x08013e80

0800739c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80073a0:	f001 f852 	bl	8008448 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80073a4:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <tcp_tmr+0x28>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <tcp_tmr+0x28>)
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	4b04      	ldr	r3, [pc, #16]	; (80073c4 <tcp_tmr+0x28>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80073bc:	f000 fd06 	bl	8007dcc <tcp_slowtmr>
  }
}
 80073c0:	bf00      	nop
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	2000050d 	.word	0x2000050d

080073c8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d105      	bne.n	80073e4 <tcp_remove_listener+0x1c>
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <tcp_remove_listener+0x48>)
 80073da:	22ff      	movs	r2, #255	; 0xff
 80073dc:	490d      	ldr	r1, [pc, #52]	; (8007414 <tcp_remove_listener+0x4c>)
 80073de:	480e      	ldr	r0, [pc, #56]	; (8007418 <tcp_remove_listener+0x50>)
 80073e0:	f00a ff6a 	bl	80122b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	e00a      	b.n	8007400 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d102      	bne.n	80073fa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f1      	bne.n	80073ea <tcp_remove_listener+0x22>
    }
  }
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	08013e3c 	.word	0x08013e3c
 8007414:	08013ec4 	.word	0x08013ec4
 8007418:	08013e80 	.word	0x08013e80

0800741c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <tcp_listen_closed+0x1c>
 800742a:	4b14      	ldr	r3, [pc, #80]	; (800747c <tcp_listen_closed+0x60>)
 800742c:	f240 1211 	movw	r2, #273	; 0x111
 8007430:	4913      	ldr	r1, [pc, #76]	; (8007480 <tcp_listen_closed+0x64>)
 8007432:	4814      	ldr	r0, [pc, #80]	; (8007484 <tcp_listen_closed+0x68>)
 8007434:	f00a ff40 	bl	80122b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7d1b      	ldrb	r3, [r3, #20]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d006      	beq.n	800744e <tcp_listen_closed+0x32>
 8007440:	4b0e      	ldr	r3, [pc, #56]	; (800747c <tcp_listen_closed+0x60>)
 8007442:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007446:	4910      	ldr	r1, [pc, #64]	; (8007488 <tcp_listen_closed+0x6c>)
 8007448:	480e      	ldr	r0, [pc, #56]	; (8007484 <tcp_listen_closed+0x68>)
 800744a:	f00a ff35 	bl	80122b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800744e:	2301      	movs	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
 8007452:	e00b      	b.n	800746c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007454:	4a0d      	ldr	r2, [pc, #52]	; (800748c <tcp_listen_closed+0x70>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4618      	mov	r0, r3
 8007462:	f7ff ffb1 	bl	80073c8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3301      	adds	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d9f0      	bls.n	8007454 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	08013e3c 	.word	0x08013e3c
 8007480:	08013eec 	.word	0x08013eec
 8007484:	08013e80 	.word	0x08013e80
 8007488:	08013ef8 	.word	0x08013ef8
 800748c:	0801e054 	.word	0x0801e054

08007490 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007490:	b5b0      	push	{r4, r5, r7, lr}
 8007492:	b088      	sub	sp, #32
 8007494:	af04      	add	r7, sp, #16
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <tcp_close_shutdown+0x20>
 80074a2:	4b61      	ldr	r3, [pc, #388]	; (8007628 <tcp_close_shutdown+0x198>)
 80074a4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80074a8:	4960      	ldr	r1, [pc, #384]	; (800762c <tcp_close_shutdown+0x19c>)
 80074aa:	4861      	ldr	r0, [pc, #388]	; (8007630 <tcp_close_shutdown+0x1a0>)
 80074ac:	f00a ff04 	bl	80122b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d066      	beq.n	8007584 <tcp_close_shutdown+0xf4>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	7d1b      	ldrb	r3, [r3, #20]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d003      	beq.n	80074c6 <tcp_close_shutdown+0x36>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7d1b      	ldrb	r3, [r3, #20]
 80074c2:	2b07      	cmp	r3, #7
 80074c4:	d15e      	bne.n	8007584 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <tcp_close_shutdown+0x48>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80074d6:	d055      	beq.n	8007584 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8b5b      	ldrh	r3, [r3, #26]
 80074dc:	f003 0310 	and.w	r3, r3, #16
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d106      	bne.n	80074f2 <tcp_close_shutdown+0x62>
 80074e4:	4b50      	ldr	r3, [pc, #320]	; (8007628 <tcp_close_shutdown+0x198>)
 80074e6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80074ea:	4952      	ldr	r1, [pc, #328]	; (8007634 <tcp_close_shutdown+0x1a4>)
 80074ec:	4850      	ldr	r0, [pc, #320]	; (8007630 <tcp_close_shutdown+0x1a0>)
 80074ee:	f00a fee3 	bl	80122b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80074fa:	687d      	ldr	r5, [r7, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3304      	adds	r3, #4
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	8ad2      	ldrh	r2, [r2, #22]
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	8b09      	ldrh	r1, [r1, #24]
 8007508:	9102      	str	r1, [sp, #8]
 800750a:	9201      	str	r2, [sp, #4]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	462b      	mov	r3, r5
 8007510:	4622      	mov	r2, r4
 8007512:	4601      	mov	r1, r0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f005 fd91 	bl	800d03c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 fb60 	bl	8008be0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007520:	4b45      	ldr	r3, [pc, #276]	; (8007638 <tcp_close_shutdown+0x1a8>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d105      	bne.n	8007536 <tcp_close_shutdown+0xa6>
 800752a:	4b43      	ldr	r3, [pc, #268]	; (8007638 <tcp_close_shutdown+0x1a8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	4a41      	ldr	r2, [pc, #260]	; (8007638 <tcp_close_shutdown+0x1a8>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	e013      	b.n	800755e <tcp_close_shutdown+0xce>
 8007536:	4b40      	ldr	r3, [pc, #256]	; (8007638 <tcp_close_shutdown+0x1a8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e00c      	b.n	8007558 <tcp_close_shutdown+0xc8>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	429a      	cmp	r2, r3
 8007546:	d104      	bne.n	8007552 <tcp_close_shutdown+0xc2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	60da      	str	r2, [r3, #12]
 8007550:	e005      	b.n	800755e <tcp_close_shutdown+0xce>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1ef      	bne.n	800753e <tcp_close_shutdown+0xae>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	4b35      	ldr	r3, [pc, #212]	; (800763c <tcp_close_shutdown+0x1ac>)
 8007566:	2201      	movs	r2, #1
 8007568:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800756a:	4b35      	ldr	r3, [pc, #212]	; (8007640 <tcp_close_shutdown+0x1b0>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d102      	bne.n	800757a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007574:	f003 fff2 	bl	800b55c <tcp_trigger_input_pcb_close>
 8007578:	e002      	b.n	8007580 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fed6 	bl	800732c <tcp_free>
      }
      return ERR_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e04d      	b.n	8007620 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	7d1b      	ldrb	r3, [r3, #20]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d02d      	beq.n	80075e8 <tcp_close_shutdown+0x158>
 800758c:	2b02      	cmp	r3, #2
 800758e:	d036      	beq.n	80075fe <tcp_close_shutdown+0x16e>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d13f      	bne.n	8007614 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	8adb      	ldrh	r3, [r3, #22]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d021      	beq.n	80075e0 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800759c:	4b29      	ldr	r3, [pc, #164]	; (8007644 <tcp_close_shutdown+0x1b4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d105      	bne.n	80075b2 <tcp_close_shutdown+0x122>
 80075a6:	4b27      	ldr	r3, [pc, #156]	; (8007644 <tcp_close_shutdown+0x1b4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	4a25      	ldr	r2, [pc, #148]	; (8007644 <tcp_close_shutdown+0x1b4>)
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e013      	b.n	80075da <tcp_close_shutdown+0x14a>
 80075b2:	4b24      	ldr	r3, [pc, #144]	; (8007644 <tcp_close_shutdown+0x1b4>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60bb      	str	r3, [r7, #8]
 80075b8:	e00c      	b.n	80075d4 <tcp_close_shutdown+0x144>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d104      	bne.n	80075ce <tcp_close_shutdown+0x13e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	60da      	str	r2, [r3, #12]
 80075cc:	e005      	b.n	80075da <tcp_close_shutdown+0x14a>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1ef      	bne.n	80075ba <tcp_close_shutdown+0x12a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fea3 	bl	800732c <tcp_free>
      break;
 80075e6:	e01a      	b.n	800761e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f7ff ff17 	bl	800741c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	4815      	ldr	r0, [pc, #84]	; (8007648 <tcp_close_shutdown+0x1b8>)
 80075f2:	f001 fb45 	bl	8008c80 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff feb4 	bl	8007364 <tcp_free_listen>
      break;
 80075fc:	e00f      	b.n	800761e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	480d      	ldr	r0, [pc, #52]	; (8007638 <tcp_close_shutdown+0x1a8>)
 8007602:	f001 fb3d 	bl	8008c80 <tcp_pcb_remove>
 8007606:	4b0d      	ldr	r3, [pc, #52]	; (800763c <tcp_close_shutdown+0x1ac>)
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff fe8d 	bl	800732c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007612:	e004      	b.n	800761e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f819 	bl	800764c <tcp_close_shutdown_fin>
 800761a:	4603      	mov	r3, r0
 800761c:	e000      	b.n	8007620 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3710      	adds	r7, #16
 8007624:	46bd      	mov	sp, r7
 8007626:	bdb0      	pop	{r4, r5, r7, pc}
 8007628:	08013e3c 	.word	0x08013e3c
 800762c:	08013f10 	.word	0x08013f10
 8007630:	08013e80 	.word	0x08013e80
 8007634:	08013f30 	.word	0x08013f30
 8007638:	20007174 	.word	0x20007174
 800763c:	20007170 	.word	0x20007170
 8007640:	20007188 	.word	0x20007188
 8007644:	20007180 	.word	0x20007180
 8007648:	2000717c 	.word	0x2000717c

0800764c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <tcp_close_shutdown_fin+0x1c>
 800765a:	4b2c      	ldr	r3, [pc, #176]	; (800770c <tcp_close_shutdown_fin+0xc0>)
 800765c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007660:	492b      	ldr	r1, [pc, #172]	; (8007710 <tcp_close_shutdown_fin+0xc4>)
 8007662:	482c      	ldr	r0, [pc, #176]	; (8007714 <tcp_close_shutdown_fin+0xc8>)
 8007664:	f00a fe28 	bl	80122b8 <iprintf>

  switch (pcb->state) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7d1b      	ldrb	r3, [r3, #20]
 800766c:	2b04      	cmp	r3, #4
 800766e:	d010      	beq.n	8007692 <tcp_close_shutdown_fin+0x46>
 8007670:	2b07      	cmp	r3, #7
 8007672:	d01b      	beq.n	80076ac <tcp_close_shutdown_fin+0x60>
 8007674:	2b03      	cmp	r3, #3
 8007676:	d126      	bne.n	80076c6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f004 fddb 	bl	800c234 <tcp_send_fin>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11f      	bne.n	80076ca <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2205      	movs	r2, #5
 800768e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007690:	e01b      	b.n	80076ca <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f004 fdce 	bl	800c234 <tcp_send_fin>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d114      	bne.n	80076ce <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2205      	movs	r2, #5
 80076a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80076aa:	e010      	b.n	80076ce <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f004 fdc1 	bl	800c234 <tcp_send_fin>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80076b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2209      	movs	r2, #9
 80076c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80076c4:	e005      	b.n	80076d2 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	e01c      	b.n	8007704 <tcp_close_shutdown_fin+0xb8>
      break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <tcp_close_shutdown_fin+0x88>
      break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <tcp_close_shutdown_fin+0x88>
      break;
 80076d2:	bf00      	nop
  }

  if (err == ERR_OK) {
 80076d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f004 fee7 	bl	800c4b0 <tcp_output>
 80076e2:	e00d      	b.n	8007700 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80076e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ec:	d108      	bne.n	8007700 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8b5b      	ldrh	r3, [r3, #26]
 80076f2:	f043 0308 	orr.w	r3, r3, #8
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	e001      	b.n	8007704 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8007700:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	08013e3c 	.word	0x08013e3c
 8007710:	08013eec 	.word	0x08013eec
 8007714:	08013e80 	.word	0x08013e80

08007718 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <tcp_close+0x22>
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <tcp_close+0x4c>)
 8007728:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800772c:	490e      	ldr	r1, [pc, #56]	; (8007768 <tcp_close+0x50>)
 800772e:	480f      	ldr	r0, [pc, #60]	; (800776c <tcp_close+0x54>)
 8007730:	f00a fdc2 	bl	80122b8 <iprintf>
 8007734:	f06f 030f 	mvn.w	r3, #15
 8007738:	e00f      	b.n	800775a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7d1b      	ldrb	r3, [r3, #20]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d006      	beq.n	8007750 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8b5b      	ldrh	r3, [r3, #26]
 8007746:	f043 0310 	orr.w	r3, r3, #16
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007750:	2101      	movs	r1, #1
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fe9c 	bl	8007490 <tcp_close_shutdown>
 8007758:	4603      	mov	r3, r0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	08013e3c 	.word	0x08013e3c
 8007768:	08013f4c 	.word	0x08013f4c
 800776c:	08013e80 	.word	0x08013e80

08007770 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08e      	sub	sp, #56	; 0x38
 8007774:	af04      	add	r7, sp, #16
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d107      	bne.n	8007790 <tcp_abandon+0x20>
 8007780:	4b52      	ldr	r3, [pc, #328]	; (80078cc <tcp_abandon+0x15c>)
 8007782:	f240 223d 	movw	r2, #573	; 0x23d
 8007786:	4952      	ldr	r1, [pc, #328]	; (80078d0 <tcp_abandon+0x160>)
 8007788:	4852      	ldr	r0, [pc, #328]	; (80078d4 <tcp_abandon+0x164>)
 800778a:	f00a fd95 	bl	80122b8 <iprintf>
 800778e:	e099      	b.n	80078c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7d1b      	ldrb	r3, [r3, #20]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d106      	bne.n	80077a6 <tcp_abandon+0x36>
 8007798:	4b4c      	ldr	r3, [pc, #304]	; (80078cc <tcp_abandon+0x15c>)
 800779a:	f240 2241 	movw	r2, #577	; 0x241
 800779e:	494e      	ldr	r1, [pc, #312]	; (80078d8 <tcp_abandon+0x168>)
 80077a0:	484c      	ldr	r0, [pc, #304]	; (80078d4 <tcp_abandon+0x164>)
 80077a2:	f00a fd89 	bl	80122b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	7d1b      	ldrb	r3, [r3, #20]
 80077aa:	2b0a      	cmp	r3, #10
 80077ac:	d107      	bne.n	80077be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	484a      	ldr	r0, [pc, #296]	; (80078dc <tcp_abandon+0x16c>)
 80077b2:	f001 fa65 	bl	8008c80 <tcp_pcb_remove>
    tcp_free(pcb);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff fdb8 	bl	800732c <tcp_free>
 80077bc:	e082      	b.n	80078c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	7d1b      	ldrb	r3, [r3, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d126      	bne.n	8007836 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8adb      	ldrh	r3, [r3, #22]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d02e      	beq.n	800784e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80077f0:	4b3b      	ldr	r3, [pc, #236]	; (80078e0 <tcp_abandon+0x170>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d105      	bne.n	8007806 <tcp_abandon+0x96>
 80077fa:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <tcp_abandon+0x170>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4a37      	ldr	r2, [pc, #220]	; (80078e0 <tcp_abandon+0x170>)
 8007802:	6013      	str	r3, [r2, #0]
 8007804:	e013      	b.n	800782e <tcp_abandon+0xbe>
 8007806:	4b36      	ldr	r3, [pc, #216]	; (80078e0 <tcp_abandon+0x170>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	e00c      	b.n	8007828 <tcp_abandon+0xb8>
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d104      	bne.n	8007822 <tcp_abandon+0xb2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	e005      	b.n	800782e <tcp_abandon+0xbe>
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1ef      	bne.n	800780e <tcp_abandon+0x9e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	60da      	str	r2, [r3, #12]
 8007834:	e00b      	b.n	800784e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8adb      	ldrh	r3, [r3, #22]
 800783e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4828      	ldr	r0, [pc, #160]	; (80078e4 <tcp_abandon+0x174>)
 8007844:	f001 fa1c 	bl	8008c80 <tcp_pcb_remove>
 8007848:	4b27      	ldr	r3, [pc, #156]	; (80078e8 <tcp_abandon+0x178>)
 800784a:	2201      	movs	r2, #1
 800784c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fed4 	bl	8008608 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786c:	4618      	mov	r0, r3
 800786e:	f000 fecb 	bl	8008608 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fec2 	bl	8008608 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00e      	beq.n	80078a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3304      	adds	r3, #4
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	8b12      	ldrh	r2, [r2, #24]
 8007894:	9202      	str	r2, [sp, #8]
 8007896:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007898:	9201      	str	r2, [sp, #4]
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	460b      	mov	r3, r1
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	69b9      	ldr	r1, [r7, #24]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f005 fbca 	bl	800d03c <tcp_rst>
    }
    last_state = pcb->state;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7d1b      	ldrb	r3, [r3, #20]
 80078ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff fd3c 	bl	800732c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d004      	beq.n	80078c4 <tcp_abandon+0x154>
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f06f 010c 	mvn.w	r1, #12
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	4798      	blx	r3
  }
}
 80078c4:	3728      	adds	r7, #40	; 0x28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	08013e3c 	.word	0x08013e3c
 80078d0:	08013f80 	.word	0x08013f80
 80078d4:	08013e80 	.word	0x08013e80
 80078d8:	08013f9c 	.word	0x08013f9c
 80078dc:	20007184 	.word	0x20007184
 80078e0:	20007180 	.word	0x20007180
 80078e4:	20007174 	.word	0x20007174
 80078e8:	20007170 	.word	0x20007170

080078ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80078f4:	2101      	movs	r1, #1
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff ff3a 	bl	8007770 <tcp_abandon>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b088      	sub	sp, #32
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	4613      	mov	r3, r2
 8007910:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007912:	2304      	movs	r3, #4
 8007914:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800791c:	4b3e      	ldr	r3, [pc, #248]	; (8007a18 <tcp_bind+0x114>)
 800791e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <tcp_bind+0x36>
 8007926:	4b3d      	ldr	r3, [pc, #244]	; (8007a1c <tcp_bind+0x118>)
 8007928:	f240 22a9 	movw	r2, #681	; 0x2a9
 800792c:	493c      	ldr	r1, [pc, #240]	; (8007a20 <tcp_bind+0x11c>)
 800792e:	483d      	ldr	r0, [pc, #244]	; (8007a24 <tcp_bind+0x120>)
 8007930:	f00a fcc2 	bl	80122b8 <iprintf>
 8007934:	f06f 030f 	mvn.w	r3, #15
 8007938:	e06a      	b.n	8007a10 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	7d1b      	ldrb	r3, [r3, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <tcp_bind+0x52>
 8007942:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <tcp_bind+0x118>)
 8007944:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007948:	4937      	ldr	r1, [pc, #220]	; (8007a28 <tcp_bind+0x124>)
 800794a:	4836      	ldr	r0, [pc, #216]	; (8007a24 <tcp_bind+0x120>)
 800794c:	f00a fcb4 	bl	80122b8 <iprintf>
 8007950:	f06f 0305 	mvn.w	r3, #5
 8007954:	e05c      	b.n	8007a10 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007956:	88fb      	ldrh	r3, [r7, #6]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d109      	bne.n	8007970 <tcp_bind+0x6c>
    port = tcp_new_port();
 800795c:	f000 f9f0 	bl	8007d40 <tcp_new_port>
 8007960:	4603      	mov	r3, r0
 8007962:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007964:	88fb      	ldrh	r3, [r7, #6]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d135      	bne.n	80079d6 <tcp_bind+0xd2>
      return ERR_BUF;
 800796a:	f06f 0301 	mvn.w	r3, #1
 800796e:	e04f      	b.n	8007a10 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e02b      	b.n	80079ce <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007976:	4a2d      	ldr	r2, [pc, #180]	; (8007a2c <tcp_bind+0x128>)
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	e01e      	b.n	80079c2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	8adb      	ldrh	r3, [r3, #22]
 8007988:	88fa      	ldrh	r2, [r7, #6]
 800798a:	429a      	cmp	r2, r3
 800798c:	d116      	bne.n	80079bc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800798e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00c      	beq.n	80079b6 <tcp_bind+0xb2>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d102      	bne.n	80079bc <tcp_bind+0xb8>
              return ERR_USE;
 80079b6:	f06f 0307 	mvn.w	r3, #7
 80079ba:	e029      	b.n	8007a10 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1dd      	bne.n	8007984 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	69fa      	ldr	r2, [r7, #28]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	dbcf      	blt.n	8007976 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00c      	beq.n	80079f6 <tcp_bind+0xf2>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <tcp_bind+0xec>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	e000      	b.n	80079f2 <tcp_bind+0xee>
 80079f0:	2300      	movs	r3, #0
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	88fa      	ldrh	r2, [r7, #6]
 80079fa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80079fc:	4b0c      	ldr	r3, [pc, #48]	; (8007a30 <tcp_bind+0x12c>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	60da      	str	r2, [r3, #12]
 8007a04:	4a0a      	ldr	r2, [pc, #40]	; (8007a30 <tcp_bind+0x12c>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	f005 fcd9 	bl	800d3c0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3720      	adds	r7, #32
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	0801e08c 	.word	0x0801e08c
 8007a1c:	08013e3c 	.word	0x08013e3c
 8007a20:	08013fd0 	.word	0x08013fd0
 8007a24:	08013e80 	.word	0x08013e80
 8007a28:	08013fe8 	.word	0x08013fe8
 8007a2c:	0801e054 	.word	0x0801e054
 8007a30:	20007180 	.word	0x20007180

08007a34 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d106      	bne.n	8007a56 <tcp_accept_null+0x22>
 8007a48:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <tcp_accept_null+0x34>)
 8007a4a:	f240 320f 	movw	r2, #783	; 0x30f
 8007a4e:	4907      	ldr	r1, [pc, #28]	; (8007a6c <tcp_accept_null+0x38>)
 8007a50:	4807      	ldr	r0, [pc, #28]	; (8007a70 <tcp_accept_null+0x3c>)
 8007a52:	f00a fc31 	bl	80122b8 <iprintf>

  tcp_abort(pcb);
 8007a56:	68b8      	ldr	r0, [r7, #8]
 8007a58:	f7ff ff48 	bl	80078ec <tcp_abort>

  return ERR_ABRT;
 8007a5c:	f06f 030c 	mvn.w	r3, #12
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	08013e3c 	.word	0x08013e3c
 8007a6c:	08014010 	.word	0x08014010
 8007a70:	08013e80 	.word	0x08013e80

08007a74 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	2200      	movs	r2, #0
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f806 	bl	8007a98 <tcp_listen_with_backlog_and_err>
 8007a8c:	4603      	mov	r3, r0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d109      	bne.n	8007ac4 <tcp_listen_with_backlog_and_err+0x2c>
 8007ab0:	4b47      	ldr	r3, [pc, #284]	; (8007bd0 <tcp_listen_with_backlog_and_err+0x138>)
 8007ab2:	f240 3259 	movw	r2, #857	; 0x359
 8007ab6:	4947      	ldr	r1, [pc, #284]	; (8007bd4 <tcp_listen_with_backlog_and_err+0x13c>)
 8007ab8:	4847      	ldr	r0, [pc, #284]	; (8007bd8 <tcp_listen_with_backlog_and_err+0x140>)
 8007aba:	f00a fbfd 	bl	80122b8 <iprintf>
 8007abe:	23f0      	movs	r3, #240	; 0xf0
 8007ac0:	76fb      	strb	r3, [r7, #27]
 8007ac2:	e079      	b.n	8007bb8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	7d1b      	ldrb	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <tcp_listen_with_backlog_and_err+0x48>
 8007acc:	4b40      	ldr	r3, [pc, #256]	; (8007bd0 <tcp_listen_with_backlog_and_err+0x138>)
 8007ace:	f240 325a 	movw	r2, #858	; 0x35a
 8007ad2:	4942      	ldr	r1, [pc, #264]	; (8007bdc <tcp_listen_with_backlog_and_err+0x144>)
 8007ad4:	4840      	ldr	r0, [pc, #256]	; (8007bd8 <tcp_listen_with_backlog_and_err+0x140>)
 8007ad6:	f00a fbef 	bl	80122b8 <iprintf>
 8007ada:	23f1      	movs	r3, #241	; 0xf1
 8007adc:	76fb      	strb	r3, [r7, #27]
 8007ade:	e06b      	b.n	8007bb8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	7d1b      	ldrb	r3, [r3, #20]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d104      	bne.n	8007af2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007aec:	23f7      	movs	r3, #247	; 0xf7
 8007aee:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007af0:	e062      	b.n	8007bb8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007af2:	2002      	movs	r0, #2
 8007af4:	f7fe fb1e 	bl	8006134 <memp_malloc>
 8007af8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007b00:	23ff      	movs	r3, #255	; 0xff
 8007b02:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007b04:	e058      	b.n	8007bb8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	691a      	ldr	r2, [r3, #16]
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8ada      	ldrh	r2, [r3, #22]
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	7d5a      	ldrb	r2, [r3, #21]
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	7a5a      	ldrb	r2, [r3, #9]
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	7ada      	ldrb	r2, [r3, #11]
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	7a9a      	ldrb	r2, [r3, #10]
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8adb      	ldrh	r3, [r3, #22]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d021      	beq.n	8007b96 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007b52:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <tcp_listen_with_backlog_and_err+0x148>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d105      	bne.n	8007b68 <tcp_listen_with_backlog_and_err+0xd0>
 8007b5c:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <tcp_listen_with_backlog_and_err+0x148>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	4a1f      	ldr	r2, [pc, #124]	; (8007be0 <tcp_listen_with_backlog_and_err+0x148>)
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	e013      	b.n	8007b90 <tcp_listen_with_backlog_and_err+0xf8>
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <tcp_listen_with_backlog_and_err+0x148>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	617b      	str	r3, [r7, #20]
 8007b6e:	e00c      	b.n	8007b8a <tcp_listen_with_backlog_and_err+0xf2>
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d104      	bne.n	8007b84 <tcp_listen_with_backlog_and_err+0xec>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	e005      	b.n	8007b90 <tcp_listen_with_backlog_and_err+0xf8>
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ef      	bne.n	8007b70 <tcp_listen_with_backlog_and_err+0xd8>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff fbc8 	bl	800732c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	4a11      	ldr	r2, [pc, #68]	; (8007be4 <tcp_listen_with_backlog_and_err+0x14c>)
 8007ba0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007ba2:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <tcp_listen_with_backlog_and_err+0x150>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	60da      	str	r2, [r3, #12]
 8007baa:	4a0f      	ldr	r2, [pc, #60]	; (8007be8 <tcp_listen_with_backlog_and_err+0x150>)
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	f005 fc06 	bl	800d3c0 <tcp_timer_needed>
  res = ERR_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7efa      	ldrb	r2, [r7, #27]
 8007bc2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3720      	adds	r7, #32
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	08013e3c 	.word	0x08013e3c
 8007bd4:	08014030 	.word	0x08014030
 8007bd8:	08013e80 	.word	0x08013e80
 8007bdc:	08014060 	.word	0x08014060
 8007be0:	20007180 	.word	0x20007180
 8007be4:	08007a35 	.word	0x08007a35
 8007be8:	2000717c 	.word	0x2000717c

08007bec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <tcp_update_rcv_ann_wnd+0x1c>
 8007bfa:	4b25      	ldr	r3, [pc, #148]	; (8007c90 <tcp_update_rcv_ann_wnd+0xa4>)
 8007bfc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007c00:	4924      	ldr	r1, [pc, #144]	; (8007c94 <tcp_update_rcv_ann_wnd+0xa8>)
 8007c02:	4825      	ldr	r0, [pc, #148]	; (8007c98 <tcp_update_rcv_ann_wnd+0xac>)
 8007c04:	f00a fb58 	bl	80122b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007c10:	4413      	add	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007c1c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007c20:	bf28      	it	cs
 8007c22:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007c26:	b292      	uxth	r2, r2
 8007c28:	4413      	add	r3, r2
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db08      	blt.n	8007c44 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	e020      	b.n	8007c86 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	dd03      	ble.n	8007c5a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c58:	e014      	b.n	8007c84 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c6c:	d306      	bcc.n	8007c7c <tcp_update_rcv_ann_wnd+0x90>
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <tcp_update_rcv_ann_wnd+0xa4>)
 8007c70:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007c74:	4909      	ldr	r1, [pc, #36]	; (8007c9c <tcp_update_rcv_ann_wnd+0xb0>)
 8007c76:	4808      	ldr	r0, [pc, #32]	; (8007c98 <tcp_update_rcv_ann_wnd+0xac>)
 8007c78:	f00a fb1e 	bl	80122b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007c84:	2300      	movs	r3, #0
  }
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	08013e3c 	.word	0x08013e3c
 8007c94:	08014098 	.word	0x08014098
 8007c98:	08013e80 	.word	0x08013e80
 8007c9c:	080140bc 	.word	0x080140bc

08007ca0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <tcp_recved+0x22>
 8007cb2:	4b1f      	ldr	r3, [pc, #124]	; (8007d30 <tcp_recved+0x90>)
 8007cb4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007cb8:	491e      	ldr	r1, [pc, #120]	; (8007d34 <tcp_recved+0x94>)
 8007cba:	481f      	ldr	r0, [pc, #124]	; (8007d38 <tcp_recved+0x98>)
 8007cbc:	f00a fafc 	bl	80122b8 <iprintf>
 8007cc0:	e032      	b.n	8007d28 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7d1b      	ldrb	r3, [r3, #20]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d106      	bne.n	8007cd8 <tcp_recved+0x38>
 8007cca:	4b19      	ldr	r3, [pc, #100]	; (8007d30 <tcp_recved+0x90>)
 8007ccc:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007cd0:	491a      	ldr	r1, [pc, #104]	; (8007d3c <tcp_recved+0x9c>)
 8007cd2:	4819      	ldr	r0, [pc, #100]	; (8007d38 <tcp_recved+0x98>)
 8007cd4:	f00a faf0 	bl	80122b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	4413      	add	r3, r2
 8007ce0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007ce2:	89fb      	ldrh	r3, [r7, #14]
 8007ce4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007ce8:	d804      	bhi.n	8007cf4 <tcp_recved+0x54>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cee:	89fa      	ldrh	r2, [r7, #14]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d204      	bcs.n	8007cfe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007cfa:	851a      	strh	r2, [r3, #40]	; 0x28
 8007cfc:	e002      	b.n	8007d04 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	89fa      	ldrh	r2, [r7, #14]
 8007d02:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff71 	bl	8007bec <tcp_update_rcv_ann_wnd>
 8007d0a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007d12:	d309      	bcc.n	8007d28 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	8b5b      	ldrh	r3, [r3, #26]
 8007d18:	f043 0302 	orr.w	r3, r3, #2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f004 fbc4 	bl	800c4b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	08013e3c 	.word	0x08013e3c
 8007d34:	080140d8 	.word	0x080140d8
 8007d38:	08013e80 	.word	0x08013e80
 8007d3c:	080140f0 	.word	0x080140f0

08007d40 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007d4a:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <tcp_new_port+0x84>)
 8007d4c:	881b      	ldrh	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <tcp_new_port+0x84>)
 8007d54:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <tcp_new_port+0x84>)
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d103      	bne.n	8007d6a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007d62:	4b18      	ldr	r3, [pc, #96]	; (8007dc4 <tcp_new_port+0x84>)
 8007d64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007d68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	71fb      	strb	r3, [r7, #7]
 8007d6e:	e01e      	b.n	8007dae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <tcp_new_port+0x88>)
 8007d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	e011      	b.n	8007da2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	8ada      	ldrh	r2, [r3, #22]
 8007d82:	4b10      	ldr	r3, [pc, #64]	; (8007dc4 <tcp_new_port+0x84>)
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d108      	bne.n	8007d9c <tcp_new_port+0x5c>
        n++;
 8007d8a:	88bb      	ldrh	r3, [r7, #4]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007d90:	88bb      	ldrh	r3, [r7, #4]
 8007d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d96:	d3d8      	bcc.n	8007d4a <tcp_new_port+0xa>
          return 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e00d      	b.n	8007db8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	603b      	str	r3, [r7, #0]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1ea      	bne.n	8007d7e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	3301      	adds	r3, #1
 8007dac:	71fb      	strb	r3, [r7, #7]
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d9dd      	bls.n	8007d70 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007db4:	4b03      	ldr	r3, [pc, #12]	; (8007dc4 <tcp_new_port+0x84>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	2000000a 	.word	0x2000000a
 8007dc8:	0801e054 	.word	0x0801e054

08007dcc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007dcc:	b5b0      	push	{r4, r5, r7, lr}
 8007dce:	b090      	sub	sp, #64	; 0x40
 8007dd0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007dd8:	4b94      	ldr	r3, [pc, #592]	; (800802c <tcp_slowtmr+0x260>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	4a93      	ldr	r2, [pc, #588]	; (800802c <tcp_slowtmr+0x260>)
 8007de0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007de2:	4b93      	ldr	r3, [pc, #588]	; (8008030 <tcp_slowtmr+0x264>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b91      	ldr	r3, [pc, #580]	; (8008030 <tcp_slowtmr+0x264>)
 8007dec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007df2:	4b90      	ldr	r3, [pc, #576]	; (8008034 <tcp_slowtmr+0x268>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007df8:	e29d      	b.n	8008336 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	7d1b      	ldrb	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d106      	bne.n	8007e10 <tcp_slowtmr+0x44>
 8007e02:	4b8d      	ldr	r3, [pc, #564]	; (8008038 <tcp_slowtmr+0x26c>)
 8007e04:	f240 42be 	movw	r2, #1214	; 0x4be
 8007e08:	498c      	ldr	r1, [pc, #560]	; (800803c <tcp_slowtmr+0x270>)
 8007e0a:	488d      	ldr	r0, [pc, #564]	; (8008040 <tcp_slowtmr+0x274>)
 8007e0c:	f00a fa54 	bl	80122b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	7d1b      	ldrb	r3, [r3, #20]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d106      	bne.n	8007e26 <tcp_slowtmr+0x5a>
 8007e18:	4b87      	ldr	r3, [pc, #540]	; (8008038 <tcp_slowtmr+0x26c>)
 8007e1a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007e1e:	4989      	ldr	r1, [pc, #548]	; (8008044 <tcp_slowtmr+0x278>)
 8007e20:	4887      	ldr	r0, [pc, #540]	; (8008040 <tcp_slowtmr+0x274>)
 8007e22:	f00a fa49 	bl	80122b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	7d1b      	ldrb	r3, [r3, #20]
 8007e2a:	2b0a      	cmp	r3, #10
 8007e2c:	d106      	bne.n	8007e3c <tcp_slowtmr+0x70>
 8007e2e:	4b82      	ldr	r3, [pc, #520]	; (8008038 <tcp_slowtmr+0x26c>)
 8007e30:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007e34:	4984      	ldr	r1, [pc, #528]	; (8008048 <tcp_slowtmr+0x27c>)
 8007e36:	4882      	ldr	r0, [pc, #520]	; (8008040 <tcp_slowtmr+0x274>)
 8007e38:	f00a fa3e 	bl	80122b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	7f9a      	ldrb	r2, [r3, #30]
 8007e40:	4b7b      	ldr	r3, [pc, #492]	; (8008030 <tcp_slowtmr+0x264>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d105      	bne.n	8007e54 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007e52:	e270      	b.n	8008336 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007e54:	4b76      	ldr	r3, [pc, #472]	; (8008030 <tcp_slowtmr+0x264>)
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	7d1b      	ldrb	r3, [r3, #20]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d10a      	bne.n	8007e86 <tcp_slowtmr+0xba>
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d905      	bls.n	8007e86 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7e:	3301      	adds	r3, #1
 8007e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e84:	e11e      	b.n	80080c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e8c:	2b0b      	cmp	r3, #11
 8007e8e:	d905      	bls.n	8007e9c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e94:	3301      	adds	r3, #1
 8007e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e9a:	e113      	b.n	80080c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d075      	beq.n	8007f92 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <tcp_slowtmr+0xf0>
 8007eae:	4b62      	ldr	r3, [pc, #392]	; (8008038 <tcp_slowtmr+0x26c>)
 8007eb0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007eb4:	4965      	ldr	r1, [pc, #404]	; (800804c <tcp_slowtmr+0x280>)
 8007eb6:	4862      	ldr	r0, [pc, #392]	; (8008040 <tcp_slowtmr+0x274>)
 8007eb8:	f00a f9fe 	bl	80122b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d106      	bne.n	8007ed2 <tcp_slowtmr+0x106>
 8007ec4:	4b5c      	ldr	r3, [pc, #368]	; (8008038 <tcp_slowtmr+0x26c>)
 8007ec6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007eca:	4961      	ldr	r1, [pc, #388]	; (8008050 <tcp_slowtmr+0x284>)
 8007ecc:	485c      	ldr	r0, [pc, #368]	; (8008040 <tcp_slowtmr+0x274>)
 8007ece:	f00a f9f3 	bl	80122b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007ed8:	2b0b      	cmp	r3, #11
 8007eda:	d905      	bls.n	8007ee8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ee6:	e0ed      	b.n	80080c4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	4a58      	ldr	r2, [pc, #352]	; (8008054 <tcp_slowtmr+0x288>)
 8007ef2:	5cd3      	ldrb	r3, [r2, r3]
 8007ef4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007efc:	7c7a      	ldrb	r2, [r7, #17]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d907      	bls.n	8007f12 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007f08:	3301      	adds	r3, #1
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007f18:	7c7a      	ldrb	r2, [r7, #17]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	f200 80d2 	bhi.w	80080c4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007f20:	2301      	movs	r3, #1
 8007f22:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d108      	bne.n	8007f40 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f30:	f005 f978 	bl	800d224 <tcp_zero_window_probe>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d014      	beq.n	8007f64 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]
 8007f3e:	e011      	b.n	8007f64 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f46:	4619      	mov	r1, r3
 8007f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f4a:	f004 f82b 	bl	800bfa4 <tcp_split_unsent_seg>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d107      	bne.n	8007f64 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f56:	f004 faab 	bl	800c4b0 <tcp_output>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 80ac 	beq.w	80080c4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007f7a:	2b06      	cmp	r3, #6
 8007f7c:	f200 80a2 	bhi.w	80080c4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007f90:	e098      	b.n	80080c4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db0f      	blt.n	8007fbc <tcp_slowtmr+0x1f0>
 8007f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007fa2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d008      	beq.n	8007fbc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	b21a      	sxth	r2, r3
 8007fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	db7b      	blt.n	80080c4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fce:	f004 fd67 	bl	800caa0 <tcp_rexmit_rto_prepare>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <tcp_slowtmr+0x21c>
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d171      	bne.n	80080c4 <tcp_slowtmr+0x2f8>
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d06d      	beq.n	80080c4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	7d1b      	ldrb	r3, [r3, #20]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d03a      	beq.n	8008066 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ff6:	2b0c      	cmp	r3, #12
 8007ff8:	bf28      	it	cs
 8007ffa:	230c      	movcs	r3, #12
 8007ffc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008004:	10db      	asrs	r3, r3, #3
 8008006:	b21b      	sxth	r3, r3
 8008008:	461a      	mov	r2, r3
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008010:	4413      	add	r3, r2
 8008012:	7efa      	ldrb	r2, [r7, #27]
 8008014:	4910      	ldr	r1, [pc, #64]	; (8008058 <tcp_slowtmr+0x28c>)
 8008016:	5c8a      	ldrb	r2, [r1, r2]
 8008018:	4093      	lsls	r3, r2
 800801a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008022:	4293      	cmp	r3, r2
 8008024:	dc1a      	bgt.n	800805c <tcp_slowtmr+0x290>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	b21a      	sxth	r2, r3
 800802a:	e019      	b.n	8008060 <tcp_slowtmr+0x294>
 800802c:	20007178 	.word	0x20007178
 8008030:	2000050e 	.word	0x2000050e
 8008034:	20007174 	.word	0x20007174
 8008038:	08013e3c 	.word	0x08013e3c
 800803c:	08014180 	.word	0x08014180
 8008040:	08013e80 	.word	0x08013e80
 8008044:	080141ac 	.word	0x080141ac
 8008048:	080141d8 	.word	0x080141d8
 800804c:	08014208 	.word	0x08014208
 8008050:	0801423c 	.word	0x0801423c
 8008054:	0801e04c 	.word	0x0801e04c
 8008058:	0801e03c 	.word	0x0801e03c
 800805c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008068:	2200      	movs	r2, #0
 800806a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008078:	4293      	cmp	r3, r2
 800807a:	bf28      	it	cs
 800807c:	4613      	movcs	r3, r2
 800807e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008080:	8a7b      	ldrh	r3, [r7, #18]
 8008082:	085b      	lsrs	r3, r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008096:	005b      	lsls	r3, r3, #1
 8008098:	b29b      	uxth	r3, r3
 800809a:	429a      	cmp	r2, r3
 800809c:	d206      	bcs.n	80080ac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800809e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80080b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80080be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80080c0:	f004 fd5e 	bl	800cb80 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	7d1b      	ldrb	r3, [r3, #20]
 80080c8:	2b06      	cmp	r3, #6
 80080ca:	d111      	bne.n	80080f0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80080cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ce:	8b5b      	ldrh	r3, [r3, #26]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00b      	beq.n	80080f0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80080d8:	4b9c      	ldr	r3, [pc, #624]	; (800834c <tcp_slowtmr+0x580>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b28      	cmp	r3, #40	; 0x28
 80080e4:	d904      	bls.n	80080f0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80080e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80080ea:	3301      	adds	r3, #1
 80080ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80080f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f2:	7a5b      	ldrb	r3, [r3, #9]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d04a      	beq.n	8008192 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008100:	2b04      	cmp	r3, #4
 8008102:	d003      	beq.n	800810c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8008104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008106:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008108:	2b07      	cmp	r3, #7
 800810a:	d142      	bne.n	8008192 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800810c:	4b8f      	ldr	r3, [pc, #572]	; (800834c <tcp_slowtmr+0x580>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008118:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800811c:	4b8c      	ldr	r3, [pc, #560]	; (8008350 <tcp_slowtmr+0x584>)
 800811e:	440b      	add	r3, r1
 8008120:	498c      	ldr	r1, [pc, #560]	; (8008354 <tcp_slowtmr+0x588>)
 8008122:	fba1 1303 	umull	r1, r3, r1, r3
 8008126:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008128:	429a      	cmp	r2, r3
 800812a:	d90a      	bls.n	8008142 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800812c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008130:	3301      	adds	r3, #1
 8008132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8008136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800813a:	3301      	adds	r3, #1
 800813c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008140:	e027      	b.n	8008192 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008142:	4b82      	ldr	r3, [pc, #520]	; (800834c <tcp_slowtmr+0x580>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008158:	4618      	mov	r0, r3
 800815a:	4b7f      	ldr	r3, [pc, #508]	; (8008358 <tcp_slowtmr+0x58c>)
 800815c:	fb03 f300 	mul.w	r3, r3, r0
 8008160:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008162:	497c      	ldr	r1, [pc, #496]	; (8008354 <tcp_slowtmr+0x588>)
 8008164:	fba1 1303 	umull	r1, r3, r1, r3
 8008168:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800816a:	429a      	cmp	r2, r3
 800816c:	d911      	bls.n	8008192 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800816e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008170:	f005 f818 	bl	800d1a4 <tcp_keepalive>
 8008174:	4603      	mov	r3, r0
 8008176:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800817a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800817e:	2b00      	cmp	r3, #0
 8008180:	d107      	bne.n	8008192 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008188:	3301      	adds	r3, #1
 800818a:	b2da      	uxtb	r2, r3
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008196:	2b00      	cmp	r3, #0
 8008198:	d011      	beq.n	80081be <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800819a:	4b6c      	ldr	r3, [pc, #432]	; (800834c <tcp_slowtmr+0x580>)
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80081aa:	4619      	mov	r1, r3
 80081ac:	460b      	mov	r3, r1
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	440b      	add	r3, r1
 80081b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d302      	bcc.n	80081be <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80081b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081ba:	f000 fec5 	bl	8008f48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	7d1b      	ldrb	r3, [r3, #20]
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d10b      	bne.n	80081de <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80081c6:	4b61      	ldr	r3, [pc, #388]	; (800834c <tcp_slowtmr+0x580>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b28      	cmp	r3, #40	; 0x28
 80081d2:	d904      	bls.n	80081de <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80081d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081d8:	3301      	adds	r3, #1
 80081da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	7d1b      	ldrb	r3, [r3, #20]
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	d10b      	bne.n	80081fe <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80081e6:	4b59      	ldr	r3, [pc, #356]	; (800834c <tcp_slowtmr+0x580>)
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2bf0      	cmp	r3, #240	; 0xf0
 80081f2:	d904      	bls.n	80081fe <tcp_slowtmr+0x432>
        ++pcb_remove;
 80081f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081f8:	3301      	adds	r3, #1
 80081fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80081fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008202:	2b00      	cmp	r3, #0
 8008204:	d060      	beq.n	80082c8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800820e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008210:	f000 fce6 	bl	8008be0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008216:	2b00      	cmp	r3, #0
 8008218:	d010      	beq.n	800823c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800821a:	4b50      	ldr	r3, [pc, #320]	; (800835c <tcp_slowtmr+0x590>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008220:	429a      	cmp	r2, r3
 8008222:	d106      	bne.n	8008232 <tcp_slowtmr+0x466>
 8008224:	4b4e      	ldr	r3, [pc, #312]	; (8008360 <tcp_slowtmr+0x594>)
 8008226:	f240 526d 	movw	r2, #1389	; 0x56d
 800822a:	494e      	ldr	r1, [pc, #312]	; (8008364 <tcp_slowtmr+0x598>)
 800822c:	484e      	ldr	r0, [pc, #312]	; (8008368 <tcp_slowtmr+0x59c>)
 800822e:	f00a f843 	bl	80122b8 <iprintf>
        prev->next = pcb->next;
 8008232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008234:	68da      	ldr	r2, [r3, #12]
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e00f      	b.n	800825c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800823c:	4b47      	ldr	r3, [pc, #284]	; (800835c <tcp_slowtmr+0x590>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008242:	429a      	cmp	r2, r3
 8008244:	d006      	beq.n	8008254 <tcp_slowtmr+0x488>
 8008246:	4b46      	ldr	r3, [pc, #280]	; (8008360 <tcp_slowtmr+0x594>)
 8008248:	f240 5271 	movw	r2, #1393	; 0x571
 800824c:	4947      	ldr	r1, [pc, #284]	; (800836c <tcp_slowtmr+0x5a0>)
 800824e:	4846      	ldr	r0, [pc, #280]	; (8008368 <tcp_slowtmr+0x59c>)
 8008250:	f00a f832 	bl	80122b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	4a40      	ldr	r2, [pc, #256]	; (800835c <tcp_slowtmr+0x590>)
 800825a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800825c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008260:	2b00      	cmp	r3, #0
 8008262:	d013      	beq.n	800828c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800826c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800826e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008270:	3304      	adds	r3, #4
 8008272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008274:	8ad2      	ldrh	r2, [r2, #22]
 8008276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008278:	8b09      	ldrh	r1, [r1, #24]
 800827a:	9102      	str	r1, [sp, #8]
 800827c:	9201      	str	r2, [sp, #4]
 800827e:	9300      	str	r3, [sp, #0]
 8008280:	462b      	mov	r3, r5
 8008282:	4622      	mov	r2, r4
 8008284:	4601      	mov	r1, r0
 8008286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008288:	f004 fed8 	bl	800d03c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800828c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	7d1b      	ldrb	r3, [r3, #20]
 8008296:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800829c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80082a2:	6838      	ldr	r0, [r7, #0]
 80082a4:	f7ff f842 	bl	800732c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80082a8:	4b31      	ldr	r3, [pc, #196]	; (8008370 <tcp_slowtmr+0x5a4>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <tcp_slowtmr+0x4f2>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f06f 010c 	mvn.w	r1, #12
 80082ba:	68b8      	ldr	r0, [r7, #8]
 80082bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80082be:	4b2c      	ldr	r3, [pc, #176]	; (8008370 <tcp_slowtmr+0x5a4>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d037      	beq.n	8008336 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80082c6:	e592      	b.n	8007dee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	7f1b      	ldrb	r3, [r3, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	7f1a      	ldrb	r2, [r3, #28]
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	7f5b      	ldrb	r3, [r3, #29]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d325      	bcc.n	8008336 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80082f0:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <tcp_slowtmr+0x5a4>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00b      	beq.n	8008318 <tcp_slowtmr+0x54c>
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008308:	6912      	ldr	r2, [r2, #16]
 800830a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	4603      	mov	r3, r0
 8008312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008316:	e002      	b.n	800831e <tcp_slowtmr+0x552>
 8008318:	2300      	movs	r3, #0
 800831a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800831e:	4b14      	ldr	r3, [pc, #80]	; (8008370 <tcp_slowtmr+0x5a4>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d000      	beq.n	8008328 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8008326:	e562      	b.n	8007dee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008328:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8008330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008332:	f004 f8bd 	bl	800c4b0 <tcp_output>
  while (pcb != NULL) {
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	2b00      	cmp	r3, #0
 800833a:	f47f ad5e 	bne.w	8007dfa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8008342:	4b0c      	ldr	r3, [pc, #48]	; (8008374 <tcp_slowtmr+0x5a8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008348:	e069      	b.n	800841e <tcp_slowtmr+0x652>
 800834a:	bf00      	nop
 800834c:	20007178 	.word	0x20007178
 8008350:	000a4cb8 	.word	0x000a4cb8
 8008354:	10624dd3 	.word	0x10624dd3
 8008358:	000124f8 	.word	0x000124f8
 800835c:	20007174 	.word	0x20007174
 8008360:	08013e3c 	.word	0x08013e3c
 8008364:	08014274 	.word	0x08014274
 8008368:	08013e80 	.word	0x08013e80
 800836c:	080142a0 	.word	0x080142a0
 8008370:	20007170 	.word	0x20007170
 8008374:	20007184 	.word	0x20007184
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837a:	7d1b      	ldrb	r3, [r3, #20]
 800837c:	2b0a      	cmp	r3, #10
 800837e:	d006      	beq.n	800838e <tcp_slowtmr+0x5c2>
 8008380:	4b2a      	ldr	r3, [pc, #168]	; (800842c <tcp_slowtmr+0x660>)
 8008382:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008386:	492a      	ldr	r1, [pc, #168]	; (8008430 <tcp_slowtmr+0x664>)
 8008388:	482a      	ldr	r0, [pc, #168]	; (8008434 <tcp_slowtmr+0x668>)
 800838a:	f009 ff95 	bl	80122b8 <iprintf>
    pcb_remove = 0;
 800838e:	2300      	movs	r3, #0
 8008390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008394:	4b28      	ldr	r3, [pc, #160]	; (8008438 <tcp_slowtmr+0x66c>)
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2bf0      	cmp	r3, #240	; 0xf0
 80083a0:	d904      	bls.n	80083ac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80083a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083a6:	3301      	adds	r3, #1
 80083a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d02f      	beq.n	8008414 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80083b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b6:	f000 fc13 	bl	8008be0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d010      	beq.n	80083e2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <tcp_slowtmr+0x670>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d106      	bne.n	80083d8 <tcp_slowtmr+0x60c>
 80083ca:	4b18      	ldr	r3, [pc, #96]	; (800842c <tcp_slowtmr+0x660>)
 80083cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80083d0:	491b      	ldr	r1, [pc, #108]	; (8008440 <tcp_slowtmr+0x674>)
 80083d2:	4818      	ldr	r0, [pc, #96]	; (8008434 <tcp_slowtmr+0x668>)
 80083d4:	f009 ff70 	bl	80122b8 <iprintf>
        prev->next = pcb->next;
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	68da      	ldr	r2, [r3, #12]
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	60da      	str	r2, [r3, #12]
 80083e0:	e00f      	b.n	8008402 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <tcp_slowtmr+0x670>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d006      	beq.n	80083fa <tcp_slowtmr+0x62e>
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <tcp_slowtmr+0x660>)
 80083ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80083f2:	4914      	ldr	r1, [pc, #80]	; (8008444 <tcp_slowtmr+0x678>)
 80083f4:	480f      	ldr	r0, [pc, #60]	; (8008434 <tcp_slowtmr+0x668>)
 80083f6:	f009 ff5f 	bl	80122b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	4a0f      	ldr	r2, [pc, #60]	; (800843c <tcp_slowtmr+0x670>)
 8008400:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800840c:	69f8      	ldr	r0, [r7, #28]
 800840e:	f7fe ff8d 	bl	800732c <tcp_free>
 8008412:	e004      	b.n	800841e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800841e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1a9      	bne.n	8008378 <tcp_slowtmr+0x5ac>
    }
  }
}
 8008424:	bf00      	nop
 8008426:	3730      	adds	r7, #48	; 0x30
 8008428:	46bd      	mov	sp, r7
 800842a:	bdb0      	pop	{r4, r5, r7, pc}
 800842c:	08013e3c 	.word	0x08013e3c
 8008430:	080142cc 	.word	0x080142cc
 8008434:	08013e80 	.word	0x08013e80
 8008438:	20007178 	.word	0x20007178
 800843c:	20007184 	.word	0x20007184
 8008440:	080142fc 	.word	0x080142fc
 8008444:	08014324 	.word	0x08014324

08008448 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800844e:	4b2d      	ldr	r3, [pc, #180]	; (8008504 <tcp_fasttmr+0xbc>)
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	b2da      	uxtb	r2, r3
 8008456:	4b2b      	ldr	r3, [pc, #172]	; (8008504 <tcp_fasttmr+0xbc>)
 8008458:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800845a:	4b2b      	ldr	r3, [pc, #172]	; (8008508 <tcp_fasttmr+0xc0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008460:	e048      	b.n	80084f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7f9a      	ldrb	r2, [r3, #30]
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <tcp_fasttmr+0xbc>)
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d03f      	beq.n	80084ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800846e:	4b25      	ldr	r3, [pc, #148]	; (8008504 <tcp_fasttmr+0xbc>)
 8008470:	781a      	ldrb	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	8b5b      	ldrh	r3, [r3, #26]
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d010      	beq.n	80084a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	8b5b      	ldrh	r3, [r3, #26]
 8008486:	f043 0302 	orr.w	r3, r3, #2
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f004 f80d 	bl	800c4b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	8b5b      	ldrh	r3, [r3, #26]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	b29a      	uxth	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8b5b      	ldrh	r3, [r3, #26]
 80084a8:	f003 0308 	and.w	r3, r3, #8
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	8b5b      	ldrh	r3, [r3, #26]
 80084b4:	f023 0308 	bic.w	r3, r3, #8
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff f8c4 	bl	800764c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00a      	beq.n	80084e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80084d2:	4b0e      	ldr	r3, [pc, #56]	; (800850c <tcp_fasttmr+0xc4>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f819 	bl	8008510 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80084de:	4b0b      	ldr	r3, [pc, #44]	; (800850c <tcp_fasttmr+0xc4>)
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d000      	beq.n	80084e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80084e6:	e7b8      	b.n	800845a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	e002      	b.n	80084f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1b3      	bne.n	8008462 <tcp_fasttmr+0x1a>
    }
  }
}
 80084fa:	bf00      	nop
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	2000050e 	.word	0x2000050e
 8008508:	20007174 	.word	0x20007174
 800850c:	20007170 	.word	0x20007170

08008510 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008510:	b590      	push	{r4, r7, lr}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d109      	bne.n	8008532 <tcp_process_refused_data+0x22>
 800851e:	4b37      	ldr	r3, [pc, #220]	; (80085fc <tcp_process_refused_data+0xec>)
 8008520:	f240 6209 	movw	r2, #1545	; 0x609
 8008524:	4936      	ldr	r1, [pc, #216]	; (8008600 <tcp_process_refused_data+0xf0>)
 8008526:	4837      	ldr	r0, [pc, #220]	; (8008604 <tcp_process_refused_data+0xf4>)
 8008528:	f009 fec6 	bl	80122b8 <iprintf>
 800852c:	f06f 030f 	mvn.w	r3, #15
 8008530:	e060      	b.n	80085f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008536:	7b5b      	ldrb	r3, [r3, #13]
 8008538:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800853e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00b      	beq.n	8008568 <tcp_process_refused_data+0x58>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6918      	ldr	r0, [r3, #16]
 800855a:	2300      	movs	r3, #0
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	47a0      	blx	r4
 8008562:	4603      	mov	r3, r0
 8008564:	73fb      	strb	r3, [r7, #15]
 8008566:	e007      	b.n	8008578 <tcp_process_refused_data+0x68>
 8008568:	2300      	movs	r3, #0
 800856a:	68ba      	ldr	r2, [r7, #8]
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	2000      	movs	r0, #0
 8008570:	f000 f8c0 	bl	80086f4 <tcp_recv_null>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d12a      	bne.n	80085d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008580:	7bbb      	ldrb	r3, [r7, #14]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	d033      	beq.n	80085f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800858e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008592:	d005      	beq.n	80085a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008598:	3301      	adds	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00b      	beq.n	80085c2 <tcp_process_refused_data+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6918      	ldr	r0, [r3, #16]
 80085b4:	2300      	movs	r3, #0
 80085b6:	2200      	movs	r2, #0
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	47a0      	blx	r4
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]
 80085c0:	e001      	b.n	80085c6 <tcp_process_refused_data+0xb6>
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80085c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ca:	f113 0f0d 	cmn.w	r3, #13
 80085ce:	d110      	bne.n	80085f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80085d0:	f06f 030c 	mvn.w	r3, #12
 80085d4:	e00e      	b.n	80085f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80085d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085da:	f113 0f0d 	cmn.w	r3, #13
 80085de:	d102      	bne.n	80085e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80085e0:	f06f 030c 	mvn.w	r3, #12
 80085e4:	e006      	b.n	80085f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80085ec:	f06f 0304 	mvn.w	r3, #4
 80085f0:	e000      	b.n	80085f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd90      	pop	{r4, r7, pc}
 80085fc:	08013e3c 	.word	0x08013e3c
 8008600:	0801434c 	.word	0x0801434c
 8008604:	08013e80 	.word	0x08013e80

08008608 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008610:	e007      	b.n	8008622 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f809 	bl	8008630 <tcp_seg_free>
    seg = next;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f4      	bne.n	8008612 <tcp_segs_free+0xa>
  }
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b082      	sub	sp, #8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d00c      	beq.n	8008658 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d004      	beq.n	8008650 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	4618      	mov	r0, r3
 800864c:	f7fe fbbe 	bl	8006dcc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	2003      	movs	r0, #3
 8008654:	f7fd fdba 	bl	80061cc <memp_free>
  }
}
 8008658:	bf00      	nop
 800865a:	3708      	adds	r7, #8
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d107      	bne.n	8008682 <tcp_setprio+0x22>
 8008672:	4b07      	ldr	r3, [pc, #28]	; (8008690 <tcp_setprio+0x30>)
 8008674:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008678:	4906      	ldr	r1, [pc, #24]	; (8008694 <tcp_setprio+0x34>)
 800867a:	4807      	ldr	r0, [pc, #28]	; (8008698 <tcp_setprio+0x38>)
 800867c:	f009 fe1c 	bl	80122b8 <iprintf>
 8008680:	e002      	b.n	8008688 <tcp_setprio+0x28>

  pcb->prio = prio;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	755a      	strb	r2, [r3, #21]
}
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	08013e3c 	.word	0x08013e3c
 8008694:	08014374 	.word	0x08014374
 8008698:	08013e80 	.word	0x08013e80

0800869c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <tcp_seg_copy+0x1c>
 80086aa:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <tcp_seg_copy+0x4c>)
 80086ac:	f240 6282 	movw	r2, #1666	; 0x682
 80086b0:	490e      	ldr	r1, [pc, #56]	; (80086ec <tcp_seg_copy+0x50>)
 80086b2:	480f      	ldr	r0, [pc, #60]	; (80086f0 <tcp_seg_copy+0x54>)
 80086b4:	f009 fe00 	bl	80122b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80086b8:	2003      	movs	r0, #3
 80086ba:	f7fd fd3b 	bl	8006134 <memp_malloc>
 80086be:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <tcp_seg_copy+0x2e>
    return NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	e00a      	b.n	80086e0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80086ca:	2210      	movs	r2, #16
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f009 fddf 	bl	8012292 <memcpy>
  pbuf_ref(cseg->p);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fc17 	bl	8006f0c <pbuf_ref>
  return cseg;
 80086de:	68fb      	ldr	r3, [r7, #12]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	08013e3c 	.word	0x08013e3c
 80086ec:	08014390 	.word	0x08014390
 80086f0:	08013e80 	.word	0x08013e80

080086f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d109      	bne.n	800871c <tcp_recv_null+0x28>
 8008708:	4b12      	ldr	r3, [pc, #72]	; (8008754 <tcp_recv_null+0x60>)
 800870a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800870e:	4912      	ldr	r1, [pc, #72]	; (8008758 <tcp_recv_null+0x64>)
 8008710:	4812      	ldr	r0, [pc, #72]	; (800875c <tcp_recv_null+0x68>)
 8008712:	f009 fdd1 	bl	80122b8 <iprintf>
 8008716:	f06f 030f 	mvn.w	r3, #15
 800871a:	e016      	b.n	800874a <tcp_recv_null+0x56>

  if (p != NULL) {
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	891b      	ldrh	r3, [r3, #8]
 8008726:	4619      	mov	r1, r3
 8008728:	68b8      	ldr	r0, [r7, #8]
 800872a:	f7ff fab9 	bl	8007ca0 <tcp_recved>
    pbuf_free(p);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fe fb4c 	bl	8006dcc <pbuf_free>
 8008734:	e008      	b.n	8008748 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8008736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800873e:	68b8      	ldr	r0, [r7, #8]
 8008740:	f7fe ffea 	bl	8007718 <tcp_close>
 8008744:	4603      	mov	r3, r0
 8008746:	e000      	b.n	800874a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	08013e3c 	.word	0x08013e3c
 8008758:	080143ac 	.word	0x080143ac
 800875c:	08013e80 	.word	0x08013e80

08008760 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	4603      	mov	r3, r0
 8008768:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800876a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876e:	2b00      	cmp	r3, #0
 8008770:	db01      	blt.n	8008776 <tcp_kill_prio+0x16>
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	e000      	b.n	8008778 <tcp_kill_prio+0x18>
 8008776:	237f      	movs	r3, #127	; 0x7f
 8008778:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d034      	beq.n	80087ea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	3b01      	subs	r3, #1
 8008784:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800878a:	2300      	movs	r3, #0
 800878c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800878e:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <tcp_kill_prio+0x94>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e01f      	b.n	80087d6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	7d5b      	ldrb	r3, [r3, #21]
 800879a:	7afa      	ldrb	r2, [r7, #11]
 800879c:	429a      	cmp	r2, r3
 800879e:	d80c      	bhi.n	80087ba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80087a4:	7afa      	ldrb	r2, [r7, #11]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d112      	bne.n	80087d0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80087aa:	4b13      	ldr	r3, [pc, #76]	; (80087f8 <tcp_kill_prio+0x98>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d80a      	bhi.n	80087d0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80087ba:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <tcp_kill_prio+0x98>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	6a1b      	ldr	r3, [r3, #32]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	7d5b      	ldrb	r3, [r3, #21]
 80087ce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1dc      	bne.n	8008796 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80087e2:	6938      	ldr	r0, [r7, #16]
 80087e4:	f7ff f882 	bl	80078ec <tcp_abort>
 80087e8:	e000      	b.n	80087ec <tcp_kill_prio+0x8c>
    return;
 80087ea:	bf00      	nop
  }
}
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20007174 	.word	0x20007174
 80087f8:	20007178 	.word	0x20007178

080087fc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	4603      	mov	r3, r0
 8008804:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	2b08      	cmp	r3, #8
 800880a:	d009      	beq.n	8008820 <tcp_kill_state+0x24>
 800880c:	79fb      	ldrb	r3, [r7, #7]
 800880e:	2b09      	cmp	r3, #9
 8008810:	d006      	beq.n	8008820 <tcp_kill_state+0x24>
 8008812:	4b1a      	ldr	r3, [pc, #104]	; (800887c <tcp_kill_state+0x80>)
 8008814:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008818:	4919      	ldr	r1, [pc, #100]	; (8008880 <tcp_kill_state+0x84>)
 800881a:	481a      	ldr	r0, [pc, #104]	; (8008884 <tcp_kill_state+0x88>)
 800881c:	f009 fd4c 	bl	80122b8 <iprintf>

  inactivity = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008828:	4b17      	ldr	r3, [pc, #92]	; (8008888 <tcp_kill_state+0x8c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	617b      	str	r3, [r7, #20]
 800882e:	e017      	b.n	8008860 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	7d1b      	ldrb	r3, [r3, #20]
 8008834:	79fa      	ldrb	r2, [r7, #7]
 8008836:	429a      	cmp	r2, r3
 8008838:	d10f      	bne.n	800885a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800883a:	4b14      	ldr	r3, [pc, #80]	; (800888c <tcp_kill_state+0x90>)
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	429a      	cmp	r2, r3
 8008848:	d807      	bhi.n	800885a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800884a:	4b10      	ldr	r3, [pc, #64]	; (800888c <tcp_kill_state+0x90>)
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	617b      	str	r3, [r7, #20]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e4      	bne.n	8008830 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800886c:	2100      	movs	r1, #0
 800886e:	6938      	ldr	r0, [r7, #16]
 8008870:	f7fe ff7e 	bl	8007770 <tcp_abandon>
  }
}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	08013e3c 	.word	0x08013e3c
 8008880:	080143c8 	.word	0x080143c8
 8008884:	08013e80 	.word	0x08013e80
 8008888:	20007174 	.word	0x20007174
 800888c:	20007178 	.word	0x20007178

08008890 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800889e:	4b12      	ldr	r3, [pc, #72]	; (80088e8 <tcp_kill_timewait+0x58>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	e012      	b.n	80088cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80088a6:	4b11      	ldr	r3, [pc, #68]	; (80088ec <tcp_kill_timewait+0x5c>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d807      	bhi.n	80088c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80088b6:	4b0d      	ldr	r3, [pc, #52]	; (80088ec <tcp_kill_timewait+0x5c>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6a1b      	ldr	r3, [r3, #32]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e9      	bne.n	80088a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d002      	beq.n	80088de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80088d8:	68b8      	ldr	r0, [r7, #8]
 80088da:	f7ff f807 	bl	80078ec <tcp_abort>
  }
}
 80088de:	bf00      	nop
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	20007184 	.word	0x20007184
 80088ec:	20007178 	.word	0x20007178

080088f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <tcp_handle_closepend+0x48>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80088fc:	e014      	b.n	8008928 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	8b5b      	ldrh	r3, [r3, #26]
 8008908:	f003 0308 	and.w	r3, r3, #8
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8b5b      	ldrh	r3, [r3, #26]
 8008914:	f023 0308 	bic.w	r3, r3, #8
 8008918:	b29a      	uxth	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fe fe94 	bl	800764c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1e7      	bne.n	80088fe <tcp_handle_closepend+0xe>
  }
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20007174 	.word	0x20007174

0800893c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008946:	2001      	movs	r0, #1
 8008948:	f7fd fbf4 	bl	8006134 <memp_malloc>
 800894c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d126      	bne.n	80089a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008954:	f7ff ffcc 	bl	80088f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008958:	f7ff ff9a 	bl	8008890 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800895c:	2001      	movs	r0, #1
 800895e:	f7fd fbe9 	bl	8006134 <memp_malloc>
 8008962:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d11b      	bne.n	80089a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800896a:	2009      	movs	r0, #9
 800896c:	f7ff ff46 	bl	80087fc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008970:	2001      	movs	r0, #1
 8008972:	f7fd fbdf 	bl	8006134 <memp_malloc>
 8008976:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d111      	bne.n	80089a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800897e:	2008      	movs	r0, #8
 8008980:	f7ff ff3c 	bl	80087fc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008984:	2001      	movs	r0, #1
 8008986:	f7fd fbd5 	bl	8006134 <memp_malloc>
 800898a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d107      	bne.n	80089a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff fee3 	bl	8008760 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800899a:	2001      	movs	r0, #1
 800899c:	f7fd fbca 	bl	8006134 <memp_malloc>
 80089a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d03f      	beq.n	8008a28 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80089a8:	229c      	movs	r2, #156	; 0x9c
 80089aa:	2100      	movs	r1, #0
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f009 fc7b 	bl	80122a8 <memset>
    pcb->prio = prio;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	79fa      	ldrb	r2, [r7, #7]
 80089b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80089be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80089c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	22ff      	movs	r2, #255	; 0xff
 80089d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80089de:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2206      	movs	r2, #6
 80089e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2206      	movs	r2, #6
 80089ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089f4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80089fe:	4b0d      	ldr	r3, [pc, #52]	; (8008a34 <tcp_alloc+0xf8>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008a06:	4b0c      	ldr	r3, [pc, #48]	; (8008a38 <tcp_alloc+0xfc>)
 8008a08:	781a      	ldrb	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008a14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <tcp_alloc+0x100>)
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a07      	ldr	r2, [pc, #28]	; (8008a40 <tcp_alloc+0x104>)
 8008a24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008a28:	68fb      	ldr	r3, [r7, #12]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	20007178 	.word	0x20007178
 8008a38:	2000050e 	.word	0x2000050e
 8008a3c:	080086f5 	.word	0x080086f5
 8008a40:	006ddd00 	.word	0x006ddd00

08008a44 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008a4e:	2040      	movs	r0, #64	; 0x40
 8008a50:	f7ff ff74 	bl	800893c <tcp_alloc>
 8008a54:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	611a      	str	r2, [r3, #16]
  }
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
	...

08008a84 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00e      	beq.n	8008ab2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	7d1b      	ldrb	r3, [r3, #20]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d106      	bne.n	8008aaa <tcp_recv+0x26>
 8008a9c:	4b07      	ldr	r3, [pc, #28]	; (8008abc <tcp_recv+0x38>)
 8008a9e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008aa2:	4907      	ldr	r1, [pc, #28]	; (8008ac0 <tcp_recv+0x3c>)
 8008aa4:	4807      	ldr	r0, [pc, #28]	; (8008ac4 <tcp_recv+0x40>)
 8008aa6:	f009 fc07 	bl	80122b8 <iprintf>
    pcb->recv = recv;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	08013e3c 	.word	0x08013e3c
 8008ac0:	080143d8 	.word	0x080143d8
 8008ac4:	08013e80 	.word	0x08013e80

08008ac8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00e      	beq.n	8008af6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7d1b      	ldrb	r3, [r3, #20]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d106      	bne.n	8008aee <tcp_sent+0x26>
 8008ae0:	4b07      	ldr	r3, [pc, #28]	; (8008b00 <tcp_sent+0x38>)
 8008ae2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008ae6:	4907      	ldr	r1, [pc, #28]	; (8008b04 <tcp_sent+0x3c>)
 8008ae8:	4807      	ldr	r0, [pc, #28]	; (8008b08 <tcp_sent+0x40>)
 8008aea:	f009 fbe5 	bl	80122b8 <iprintf>
    pcb->sent = sent;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	08013e3c 	.word	0x08013e3c
 8008b04:	08014400 	.word	0x08014400
 8008b08:	08013e80 	.word	0x08013e80

08008b0c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7d1b      	ldrb	r3, [r3, #20]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <tcp_err+0x26>
 8008b24:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <tcp_err+0x38>)
 8008b26:	f640 020d 	movw	r2, #2061	; 0x80d
 8008b2a:	4907      	ldr	r1, [pc, #28]	; (8008b48 <tcp_err+0x3c>)
 8008b2c:	4807      	ldr	r0, [pc, #28]	; (8008b4c <tcp_err+0x40>)
 8008b2e:	f009 fbc3 	bl	80122b8 <iprintf>
    pcb->errf = err;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	08013e3c 	.word	0x08013e3c
 8008b48:	08014428 	.word	0x08014428
 8008b4c:	08013e80 	.word	0x08013e80

08008b50 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <tcp_accept+0x22>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7d1b      	ldrb	r3, [r3, #20]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d104      	bne.n	8008b72 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	619a      	str	r2, [r3, #24]
  }
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d107      	bne.n	8008ba4 <tcp_poll+0x24>
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <tcp_poll+0x50>)
 8008b96:	f640 023d 	movw	r2, #2109	; 0x83d
 8008b9a:	490e      	ldr	r1, [pc, #56]	; (8008bd4 <tcp_poll+0x54>)
 8008b9c:	480e      	ldr	r0, [pc, #56]	; (8008bd8 <tcp_poll+0x58>)
 8008b9e:	f009 fb8b 	bl	80122b8 <iprintf>
 8008ba2:	e011      	b.n	8008bc8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	7d1b      	ldrb	r3, [r3, #20]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d106      	bne.n	8008bba <tcp_poll+0x3a>
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <tcp_poll+0x50>)
 8008bae:	f640 023e 	movw	r2, #2110	; 0x83e
 8008bb2:	490a      	ldr	r1, [pc, #40]	; (8008bdc <tcp_poll+0x5c>)
 8008bb4:	4808      	ldr	r0, [pc, #32]	; (8008bd8 <tcp_poll+0x58>)
 8008bb6:	f009 fb7f 	bl	80122b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	79fa      	ldrb	r2, [r7, #7]
 8008bc6:	775a      	strb	r2, [r3, #29]
}
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	08013e3c 	.word	0x08013e3c
 8008bd4:	08014450 	.word	0x08014450
 8008bd8:	08013e80 	.word	0x08013e80
 8008bdc:	08014468 	.word	0x08014468

08008be0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b082      	sub	sp, #8
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <tcp_pcb_purge+0x1e>
 8008bee:	4b21      	ldr	r3, [pc, #132]	; (8008c74 <tcp_pcb_purge+0x94>)
 8008bf0:	f640 0251 	movw	r2, #2129	; 0x851
 8008bf4:	4920      	ldr	r1, [pc, #128]	; (8008c78 <tcp_pcb_purge+0x98>)
 8008bf6:	4821      	ldr	r0, [pc, #132]	; (8008c7c <tcp_pcb_purge+0x9c>)
 8008bf8:	f009 fb5e 	bl	80122b8 <iprintf>
 8008bfc:	e037      	b.n	8008c6e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7d1b      	ldrb	r3, [r3, #20]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d033      	beq.n	8008c6e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008c0a:	2b0a      	cmp	r3, #10
 8008c0c:	d02f      	beq.n	8008c6e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d02b      	beq.n	8008c6e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe f8d2 	bl	8006dcc <pbuf_free>
      pcb->refused_data = NULL;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f986 	bl	8008f48 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c42:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff fcdd 	bl	8008608 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff fcd8 	bl	8008608 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	08013e3c 	.word	0x08013e3c
 8008c78:	08014488 	.word	0x08014488
 8008c7c:	08013e80 	.word	0x08013e80

08008c80 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <tcp_pcb_remove+0x1e>
 8008c90:	4b3e      	ldr	r3, [pc, #248]	; (8008d8c <tcp_pcb_remove+0x10c>)
 8008c92:	f640 0283 	movw	r2, #2179	; 0x883
 8008c96:	493e      	ldr	r1, [pc, #248]	; (8008d90 <tcp_pcb_remove+0x110>)
 8008c98:	483e      	ldr	r0, [pc, #248]	; (8008d94 <tcp_pcb_remove+0x114>)
 8008c9a:	f009 fb0d 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d106      	bne.n	8008cb2 <tcp_pcb_remove+0x32>
 8008ca4:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <tcp_pcb_remove+0x10c>)
 8008ca6:	f640 0284 	movw	r2, #2180	; 0x884
 8008caa:	493b      	ldr	r1, [pc, #236]	; (8008d98 <tcp_pcb_remove+0x118>)
 8008cac:	4839      	ldr	r0, [pc, #228]	; (8008d94 <tcp_pcb_remove+0x114>)
 8008cae:	f009 fb03 	bl	80122b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d105      	bne.n	8008cc8 <tcp_pcb_remove+0x48>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e013      	b.n	8008cf0 <tcp_pcb_remove+0x70>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60fb      	str	r3, [r7, #12]
 8008cce:	e00c      	b.n	8008cea <tcp_pcb_remove+0x6a>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d104      	bne.n	8008ce4 <tcp_pcb_remove+0x64>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	e005      	b.n	8008cf0 <tcp_pcb_remove+0x70>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	60fb      	str	r3, [r7, #12]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1ef      	bne.n	8008cd0 <tcp_pcb_remove+0x50>
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008cf6:	6838      	ldr	r0, [r7, #0]
 8008cf8:	f7ff ff72 	bl	8008be0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	7d1b      	ldrb	r3, [r3, #20]
 8008d00:	2b0a      	cmp	r3, #10
 8008d02:	d013      	beq.n	8008d2c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d00f      	beq.n	8008d2c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	8b5b      	ldrh	r3, [r3, #26]
 8008d10:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d009      	beq.n	8008d2c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	8b5b      	ldrh	r3, [r3, #26]
 8008d1c:	f043 0302 	orr.w	r3, r3, #2
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008d26:	6838      	ldr	r0, [r7, #0]
 8008d28:	f003 fbc2 	bl	800c4b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	7d1b      	ldrb	r3, [r3, #20]
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d020      	beq.n	8008d76 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d006      	beq.n	8008d4a <tcp_pcb_remove+0xca>
 8008d3c:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <tcp_pcb_remove+0x10c>)
 8008d3e:	f640 0293 	movw	r2, #2195	; 0x893
 8008d42:	4916      	ldr	r1, [pc, #88]	; (8008d9c <tcp_pcb_remove+0x11c>)
 8008d44:	4813      	ldr	r0, [pc, #76]	; (8008d94 <tcp_pcb_remove+0x114>)
 8008d46:	f009 fab7 	bl	80122b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d006      	beq.n	8008d60 <tcp_pcb_remove+0xe0>
 8008d52:	4b0e      	ldr	r3, [pc, #56]	; (8008d8c <tcp_pcb_remove+0x10c>)
 8008d54:	f640 0294 	movw	r2, #2196	; 0x894
 8008d58:	4911      	ldr	r1, [pc, #68]	; (8008da0 <tcp_pcb_remove+0x120>)
 8008d5a:	480e      	ldr	r0, [pc, #56]	; (8008d94 <tcp_pcb_remove+0x114>)
 8008d5c:	f009 faac 	bl	80122b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d006      	beq.n	8008d76 <tcp_pcb_remove+0xf6>
 8008d68:	4b08      	ldr	r3, [pc, #32]	; (8008d8c <tcp_pcb_remove+0x10c>)
 8008d6a:	f640 0296 	movw	r2, #2198	; 0x896
 8008d6e:	490d      	ldr	r1, [pc, #52]	; (8008da4 <tcp_pcb_remove+0x124>)
 8008d70:	4808      	ldr	r0, [pc, #32]	; (8008d94 <tcp_pcb_remove+0x114>)
 8008d72:	f009 faa1 	bl	80122b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	08013e3c 	.word	0x08013e3c
 8008d90:	080144a4 	.word	0x080144a4
 8008d94:	08013e80 	.word	0x08013e80
 8008d98:	080144c0 	.word	0x080144c0
 8008d9c:	080144e0 	.word	0x080144e0
 8008da0:	080144f8 	.word	0x080144f8
 8008da4:	08014514 	.word	0x08014514

08008da8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <tcp_next_iss+0x1c>
 8008db6:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <tcp_next_iss+0x38>)
 8008db8:	f640 02af 	movw	r2, #2223	; 0x8af
 8008dbc:	4909      	ldr	r1, [pc, #36]	; (8008de4 <tcp_next_iss+0x3c>)
 8008dbe:	480a      	ldr	r0, [pc, #40]	; (8008de8 <tcp_next_iss+0x40>)
 8008dc0:	f009 fa7a 	bl	80122b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <tcp_next_iss+0x44>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <tcp_next_iss+0x48>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4413      	add	r3, r2
 8008dce:	4a07      	ldr	r2, [pc, #28]	; (8008dec <tcp_next_iss+0x44>)
 8008dd0:	6013      	str	r3, [r2, #0]
  return iss;
 8008dd2:	4b06      	ldr	r3, [pc, #24]	; (8008dec <tcp_next_iss+0x44>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	08013e3c 	.word	0x08013e3c
 8008de4:	0801452c 	.word	0x0801452c
 8008de8:	08013e80 	.word	0x08013e80
 8008dec:	2000000c 	.word	0x2000000c
 8008df0:	20007178 	.word	0x20007178

08008df4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d106      	bne.n	8008e16 <tcp_eff_send_mss_netif+0x22>
 8008e08:	4b14      	ldr	r3, [pc, #80]	; (8008e5c <tcp_eff_send_mss_netif+0x68>)
 8008e0a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008e0e:	4914      	ldr	r1, [pc, #80]	; (8008e60 <tcp_eff_send_mss_netif+0x6c>)
 8008e10:	4814      	ldr	r0, [pc, #80]	; (8008e64 <tcp_eff_send_mss_netif+0x70>)
 8008e12:	f009 fa51 	bl	80122b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008e1c:	89fb      	ldrh	r3, [r7, #14]
 8008e1e:	e019      	b.n	8008e54 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008e24:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008e26:	8afb      	ldrh	r3, [r7, #22]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d012      	beq.n	8008e52 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008e2c:	2328      	movs	r3, #40	; 0x28
 8008e2e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008e30:	8afa      	ldrh	r2, [r7, #22]
 8008e32:	8abb      	ldrh	r3, [r7, #20]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d904      	bls.n	8008e42 <tcp_eff_send_mss_netif+0x4e>
 8008e38:	8afa      	ldrh	r2, [r7, #22]
 8008e3a:	8abb      	ldrh	r3, [r7, #20]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	e000      	b.n	8008e44 <tcp_eff_send_mss_netif+0x50>
 8008e42:	2300      	movs	r3, #0
 8008e44:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008e46:	8a7a      	ldrh	r2, [r7, #18]
 8008e48:	89fb      	ldrh	r3, [r7, #14]
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	bf28      	it	cs
 8008e4e:	4613      	movcs	r3, r2
 8008e50:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008e52:	89fb      	ldrh	r3, [r7, #14]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	08013e3c 	.word	0x08013e3c
 8008e60:	08014548 	.word	0x08014548
 8008e64:	08013e80 	.word	0x08013e80

08008e68 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d119      	bne.n	8008eb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008e7c:	4b10      	ldr	r3, [pc, #64]	; (8008ec0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008e7e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008e82:	4910      	ldr	r1, [pc, #64]	; (8008ec4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008e84:	4810      	ldr	r0, [pc, #64]	; (8008ec8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008e86:	f009 fa17 	bl	80122b8 <iprintf>

  while (pcb != NULL) {
 8008e8a:	e011      	b.n	8008eb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d108      	bne.n	8008eaa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7fe fd24 	bl	80078ec <tcp_abort>
      pcb = next;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	e002      	b.n	8008eb0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1ea      	bne.n	8008e8c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	08013e3c 	.word	0x08013e3c
 8008ec4:	08014570 	.word	0x08014570
 8008ec8:	08013e80 	.word	0x08013e80

08008ecc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d02a      	beq.n	8008f32 <tcp_netif_ip_addr_changed+0x66>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d026      	beq.n	8008f32 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008ee4:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <tcp_netif_ip_addr_changed+0x70>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ffbc 	bl	8008e68 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <tcp_netif_ip_addr_changed+0x74>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff ffb6 	bl	8008e68 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d017      	beq.n	8008f32 <tcp_netif_ip_addr_changed+0x66>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d013      	beq.n	8008f32 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f0a:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <tcp_netif_ip_addr_changed+0x78>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e00c      	b.n	8008f2c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d103      	bne.n	8008f26 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1ef      	bne.n	8008f12 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008f32:	bf00      	nop
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20007174 	.word	0x20007174
 8008f40:	20007180 	.word	0x20007180
 8008f44:	2000717c 	.word	0x2000717c

08008f48 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff fb53 	bl	8008608 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008f70:	b590      	push	{r4, r7, lr}
 8008f72:	b08d      	sub	sp, #52	; 0x34
 8008f74:	af04      	add	r7, sp, #16
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d105      	bne.n	8008f8c <tcp_input+0x1c>
 8008f80:	4b9b      	ldr	r3, [pc, #620]	; (80091f0 <tcp_input+0x280>)
 8008f82:	2283      	movs	r2, #131	; 0x83
 8008f84:	499b      	ldr	r1, [pc, #620]	; (80091f4 <tcp_input+0x284>)
 8008f86:	489c      	ldr	r0, [pc, #624]	; (80091f8 <tcp_input+0x288>)
 8008f88:	f009 f996 	bl	80122b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	4a9a      	ldr	r2, [pc, #616]	; (80091fc <tcp_input+0x28c>)
 8008f92:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	895b      	ldrh	r3, [r3, #10]
 8008f98:	2b13      	cmp	r3, #19
 8008f9a:	f240 83c4 	bls.w	8009726 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008f9e:	4b98      	ldr	r3, [pc, #608]	; (8009200 <tcp_input+0x290>)
 8008fa0:	695a      	ldr	r2, [r3, #20]
 8008fa2:	4b97      	ldr	r3, [pc, #604]	; (8009200 <tcp_input+0x290>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f008 f9f3 	bl	8011394 <ip4_addr_isbroadcast_u32>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f040 83ba 	bne.w	800972a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008fb6:	4b92      	ldr	r3, [pc, #584]	; (8009200 <tcp_input+0x290>)
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008fbe:	2be0      	cmp	r3, #224	; 0xe0
 8008fc0:	f000 83b3 	beq.w	800972a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008fc4:	4b8d      	ldr	r3, [pc, #564]	; (80091fc <tcp_input+0x28c>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	899b      	ldrh	r3, [r3, #12]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7fc fc25 	bl	800581c <lwip_htons>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	0b1b      	lsrs	r3, r3, #12
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008fde:	7cbb      	ldrb	r3, [r7, #18]
 8008fe0:	2b13      	cmp	r3, #19
 8008fe2:	f240 83a2 	bls.w	800972a <tcp_input+0x7ba>
 8008fe6:	7cbb      	ldrb	r3, [r7, #18]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	891b      	ldrh	r3, [r3, #8]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	f200 839b 	bhi.w	800972a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008ff4:	7cbb      	ldrb	r3, [r7, #18]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	3b14      	subs	r3, #20
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	4b81      	ldr	r3, [pc, #516]	; (8009204 <tcp_input+0x294>)
 8008ffe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009000:	4b81      	ldr	r3, [pc, #516]	; (8009208 <tcp_input+0x298>)
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	895a      	ldrh	r2, [r3, #10]
 800900a:	7cbb      	ldrb	r3, [r7, #18]
 800900c:	b29b      	uxth	r3, r3
 800900e:	429a      	cmp	r2, r3
 8009010:	d309      	bcc.n	8009026 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009012:	4b7c      	ldr	r3, [pc, #496]	; (8009204 <tcp_input+0x294>)
 8009014:	881a      	ldrh	r2, [r3, #0]
 8009016:	4b7d      	ldr	r3, [pc, #500]	; (800920c <tcp_input+0x29c>)
 8009018:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800901a:	7cbb      	ldrb	r3, [r7, #18]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7fd fe4e 	bl	8006cc0 <pbuf_remove_header>
 8009024:	e04e      	b.n	80090c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <tcp_input+0xca>
 800902e:	4b70      	ldr	r3, [pc, #448]	; (80091f0 <tcp_input+0x280>)
 8009030:	22c2      	movs	r2, #194	; 0xc2
 8009032:	4977      	ldr	r1, [pc, #476]	; (8009210 <tcp_input+0x2a0>)
 8009034:	4870      	ldr	r0, [pc, #448]	; (80091f8 <tcp_input+0x288>)
 8009036:	f009 f93f 	bl	80122b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800903a:	2114      	movs	r1, #20
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7fd fe3f 	bl	8006cc0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	895a      	ldrh	r2, [r3, #10]
 8009046:	4b71      	ldr	r3, [pc, #452]	; (800920c <tcp_input+0x29c>)
 8009048:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800904a:	4b6e      	ldr	r3, [pc, #440]	; (8009204 <tcp_input+0x294>)
 800904c:	881a      	ldrh	r2, [r3, #0]
 800904e:	4b6f      	ldr	r3, [pc, #444]	; (800920c <tcp_input+0x29c>)
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009056:	4b6d      	ldr	r3, [pc, #436]	; (800920c <tcp_input+0x29c>)
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	4619      	mov	r1, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f7fd fe2f 	bl	8006cc0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	895b      	ldrh	r3, [r3, #10]
 8009068:	8a3a      	ldrh	r2, [r7, #16]
 800906a:	429a      	cmp	r2, r3
 800906c:	f200 835f 	bhi.w	800972e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	4a64      	ldr	r2, [pc, #400]	; (8009208 <tcp_input+0x298>)
 8009078:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	8a3a      	ldrh	r2, [r7, #16]
 8009080:	4611      	mov	r1, r2
 8009082:	4618      	mov	r0, r3
 8009084:	f7fd fe1c 	bl	8006cc0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	891a      	ldrh	r2, [r3, #8]
 800908c:	8a3b      	ldrh	r3, [r7, #16]
 800908e:	1ad3      	subs	r3, r2, r3
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	895b      	ldrh	r3, [r3, #10]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d005      	beq.n	80090aa <tcp_input+0x13a>
 800909e:	4b54      	ldr	r3, [pc, #336]	; (80091f0 <tcp_input+0x280>)
 80090a0:	22df      	movs	r2, #223	; 0xdf
 80090a2:	495c      	ldr	r1, [pc, #368]	; (8009214 <tcp_input+0x2a4>)
 80090a4:	4854      	ldr	r0, [pc, #336]	; (80091f8 <tcp_input+0x288>)
 80090a6:	f009 f907 	bl	80122b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	891a      	ldrh	r2, [r3, #8]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	891b      	ldrh	r3, [r3, #8]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d005      	beq.n	80090c4 <tcp_input+0x154>
 80090b8:	4b4d      	ldr	r3, [pc, #308]	; (80091f0 <tcp_input+0x280>)
 80090ba:	22e0      	movs	r2, #224	; 0xe0
 80090bc:	4956      	ldr	r1, [pc, #344]	; (8009218 <tcp_input+0x2a8>)
 80090be:	484e      	ldr	r0, [pc, #312]	; (80091f8 <tcp_input+0x288>)
 80090c0:	f009 f8fa 	bl	80122b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80090c4:	4b4d      	ldr	r3, [pc, #308]	; (80091fc <tcp_input+0x28c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	881b      	ldrh	r3, [r3, #0]
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	4b4b      	ldr	r3, [pc, #300]	; (80091fc <tcp_input+0x28c>)
 80090ce:	681c      	ldr	r4, [r3, #0]
 80090d0:	4610      	mov	r0, r2
 80090d2:	f7fc fba3 	bl	800581c <lwip_htons>
 80090d6:	4603      	mov	r3, r0
 80090d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80090da:	4b48      	ldr	r3, [pc, #288]	; (80091fc <tcp_input+0x28c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	4b46      	ldr	r3, [pc, #280]	; (80091fc <tcp_input+0x28c>)
 80090e4:	681c      	ldr	r4, [r3, #0]
 80090e6:	4610      	mov	r0, r2
 80090e8:	f7fc fb98 	bl	800581c <lwip_htons>
 80090ec:	4603      	mov	r3, r0
 80090ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80090f0:	4b42      	ldr	r3, [pc, #264]	; (80091fc <tcp_input+0x28c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	4b41      	ldr	r3, [pc, #260]	; (80091fc <tcp_input+0x28c>)
 80090f8:	681c      	ldr	r4, [r3, #0]
 80090fa:	4610      	mov	r0, r2
 80090fc:	f7fc fba3 	bl	8005846 <lwip_htonl>
 8009100:	4603      	mov	r3, r0
 8009102:	6063      	str	r3, [r4, #4]
 8009104:	6863      	ldr	r3, [r4, #4]
 8009106:	4a45      	ldr	r2, [pc, #276]	; (800921c <tcp_input+0x2ac>)
 8009108:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800910a:	4b3c      	ldr	r3, [pc, #240]	; (80091fc <tcp_input+0x28c>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	4b3a      	ldr	r3, [pc, #232]	; (80091fc <tcp_input+0x28c>)
 8009112:	681c      	ldr	r4, [r3, #0]
 8009114:	4610      	mov	r0, r2
 8009116:	f7fc fb96 	bl	8005846 <lwip_htonl>
 800911a:	4603      	mov	r3, r0
 800911c:	60a3      	str	r3, [r4, #8]
 800911e:	68a3      	ldr	r3, [r4, #8]
 8009120:	4a3f      	ldr	r2, [pc, #252]	; (8009220 <tcp_input+0x2b0>)
 8009122:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8009124:	4b35      	ldr	r3, [pc, #212]	; (80091fc <tcp_input+0x28c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	89db      	ldrh	r3, [r3, #14]
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b33      	ldr	r3, [pc, #204]	; (80091fc <tcp_input+0x28c>)
 800912e:	681c      	ldr	r4, [r3, #0]
 8009130:	4610      	mov	r0, r2
 8009132:	f7fc fb73 	bl	800581c <lwip_htons>
 8009136:	4603      	mov	r3, r0
 8009138:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800913a:	4b30      	ldr	r3, [pc, #192]	; (80091fc <tcp_input+0x28c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	899b      	ldrh	r3, [r3, #12]
 8009140:	b29b      	uxth	r3, r3
 8009142:	4618      	mov	r0, r3
 8009144:	f7fc fb6a 	bl	800581c <lwip_htons>
 8009148:	4603      	mov	r3, r0
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009150:	b2da      	uxtb	r2, r3
 8009152:	4b34      	ldr	r3, [pc, #208]	; (8009224 <tcp_input+0x2b4>)
 8009154:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	891a      	ldrh	r2, [r3, #8]
 800915a:	4b33      	ldr	r3, [pc, #204]	; (8009228 <tcp_input+0x2b8>)
 800915c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800915e:	4b31      	ldr	r3, [pc, #196]	; (8009224 <tcp_input+0x2b4>)
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00c      	beq.n	8009184 <tcp_input+0x214>
    tcplen++;
 800916a:	4b2f      	ldr	r3, [pc, #188]	; (8009228 <tcp_input+0x2b8>)
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	4b2d      	ldr	r3, [pc, #180]	; (8009228 <tcp_input+0x2b8>)
 8009174:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	891a      	ldrh	r2, [r3, #8]
 800917a:	4b2b      	ldr	r3, [pc, #172]	; (8009228 <tcp_input+0x2b8>)
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	429a      	cmp	r2, r3
 8009180:	f200 82d7 	bhi.w	8009732 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009184:	2300      	movs	r3, #0
 8009186:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009188:	4b28      	ldr	r3, [pc, #160]	; (800922c <tcp_input+0x2bc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	61fb      	str	r3, [r7, #28]
 800918e:	e09d      	b.n	80092cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	7d1b      	ldrb	r3, [r3, #20]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d105      	bne.n	80091a4 <tcp_input+0x234>
 8009198:	4b15      	ldr	r3, [pc, #84]	; (80091f0 <tcp_input+0x280>)
 800919a:	22fb      	movs	r2, #251	; 0xfb
 800919c:	4924      	ldr	r1, [pc, #144]	; (8009230 <tcp_input+0x2c0>)
 800919e:	4816      	ldr	r0, [pc, #88]	; (80091f8 <tcp_input+0x288>)
 80091a0:	f009 f88a 	bl	80122b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	7d1b      	ldrb	r3, [r3, #20]
 80091a8:	2b0a      	cmp	r3, #10
 80091aa:	d105      	bne.n	80091b8 <tcp_input+0x248>
 80091ac:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <tcp_input+0x280>)
 80091ae:	22fc      	movs	r2, #252	; 0xfc
 80091b0:	4920      	ldr	r1, [pc, #128]	; (8009234 <tcp_input+0x2c4>)
 80091b2:	4811      	ldr	r0, [pc, #68]	; (80091f8 <tcp_input+0x288>)
 80091b4:	f009 f880 	bl	80122b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	7d1b      	ldrb	r3, [r3, #20]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d105      	bne.n	80091cc <tcp_input+0x25c>
 80091c0:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <tcp_input+0x280>)
 80091c2:	22fd      	movs	r2, #253	; 0xfd
 80091c4:	491c      	ldr	r1, [pc, #112]	; (8009238 <tcp_input+0x2c8>)
 80091c6:	480c      	ldr	r0, [pc, #48]	; (80091f8 <tcp_input+0x288>)
 80091c8:	f009 f876 	bl	80122b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	7a1b      	ldrb	r3, [r3, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d033      	beq.n	800923c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	7a1a      	ldrb	r2, [r3, #8]
 80091d8:	4b09      	ldr	r3, [pc, #36]	; (8009200 <tcp_input+0x290>)
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091e0:	3301      	adds	r3, #1
 80091e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d029      	beq.n	800923c <tcp_input+0x2cc>
      prev = pcb;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	61bb      	str	r3, [r7, #24]
      continue;
 80091ec:	e06b      	b.n	80092c6 <tcp_input+0x356>
 80091ee:	bf00      	nop
 80091f0:	080145a4 	.word	0x080145a4
 80091f4:	080145d8 	.word	0x080145d8
 80091f8:	080145f0 	.word	0x080145f0
 80091fc:	20000520 	.word	0x20000520
 8009200:	20003c10 	.word	0x20003c10
 8009204:	20000524 	.word	0x20000524
 8009208:	20000528 	.word	0x20000528
 800920c:	20000526 	.word	0x20000526
 8009210:	08014618 	.word	0x08014618
 8009214:	08014628 	.word	0x08014628
 8009218:	08014634 	.word	0x08014634
 800921c:	20000530 	.word	0x20000530
 8009220:	20000534 	.word	0x20000534
 8009224:	2000053c 	.word	0x2000053c
 8009228:	2000053a 	.word	0x2000053a
 800922c:	20007174 	.word	0x20007174
 8009230:	08014654 	.word	0x08014654
 8009234:	0801467c 	.word	0x0801467c
 8009238:	080146a8 	.word	0x080146a8
    }

    if (pcb->remote_port == tcphdr->src &&
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	8b1a      	ldrh	r2, [r3, #24]
 8009240:	4b94      	ldr	r3, [pc, #592]	; (8009494 <tcp_input+0x524>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	429a      	cmp	r2, r3
 800924a:	d13a      	bne.n	80092c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	8ada      	ldrh	r2, [r3, #22]
 8009250:	4b90      	ldr	r3, [pc, #576]	; (8009494 <tcp_input+0x524>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	885b      	ldrh	r3, [r3, #2]
 8009256:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009258:	429a      	cmp	r2, r3
 800925a:	d132      	bne.n	80092c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	4b8d      	ldr	r3, [pc, #564]	; (8009498 <tcp_input+0x528>)
 8009262:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009264:	429a      	cmp	r2, r3
 8009266:	d12c      	bne.n	80092c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	4b8a      	ldr	r3, [pc, #552]	; (8009498 <tcp_input+0x528>)
 800926e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009270:	429a      	cmp	r2, r3
 8009272:	d126      	bne.n	80092c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	429a      	cmp	r2, r3
 800927c:	d106      	bne.n	800928c <tcp_input+0x31c>
 800927e:	4b87      	ldr	r3, [pc, #540]	; (800949c <tcp_input+0x52c>)
 8009280:	f240 120d 	movw	r2, #269	; 0x10d
 8009284:	4986      	ldr	r1, [pc, #536]	; (80094a0 <tcp_input+0x530>)
 8009286:	4887      	ldr	r0, [pc, #540]	; (80094a4 <tcp_input+0x534>)
 8009288:	f009 f816 	bl	80122b8 <iprintf>
      if (prev != NULL) {
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00a      	beq.n	80092a8 <tcp_input+0x338>
        prev->next = pcb->next;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	68da      	ldr	r2, [r3, #12]
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800929a:	4b83      	ldr	r3, [pc, #524]	; (80094a8 <tcp_input+0x538>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80092a2:	4a81      	ldr	r2, [pc, #516]	; (80094a8 <tcp_input+0x538>)
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80092a8:	69fb      	ldr	r3, [r7, #28]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d111      	bne.n	80092d6 <tcp_input+0x366>
 80092b2:	4b7a      	ldr	r3, [pc, #488]	; (800949c <tcp_input+0x52c>)
 80092b4:	f240 1215 	movw	r2, #277	; 0x115
 80092b8:	497c      	ldr	r1, [pc, #496]	; (80094ac <tcp_input+0x53c>)
 80092ba:	487a      	ldr	r0, [pc, #488]	; (80094a4 <tcp_input+0x534>)
 80092bc:	f008 fffc 	bl	80122b8 <iprintf>
      break;
 80092c0:	e009      	b.n	80092d6 <tcp_input+0x366>
    }
    prev = pcb;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f47f af5e 	bne.w	8009190 <tcp_input+0x220>
 80092d4:	e000      	b.n	80092d8 <tcp_input+0x368>
      break;
 80092d6:	bf00      	nop
  }

  if (pcb == NULL) {
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f040 8095 	bne.w	800940a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092e0:	4b73      	ldr	r3, [pc, #460]	; (80094b0 <tcp_input+0x540>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	e03f      	b.n	8009368 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	7d1b      	ldrb	r3, [r3, #20]
 80092ec:	2b0a      	cmp	r3, #10
 80092ee:	d006      	beq.n	80092fe <tcp_input+0x38e>
 80092f0:	4b6a      	ldr	r3, [pc, #424]	; (800949c <tcp_input+0x52c>)
 80092f2:	f240 121f 	movw	r2, #287	; 0x11f
 80092f6:	496f      	ldr	r1, [pc, #444]	; (80094b4 <tcp_input+0x544>)
 80092f8:	486a      	ldr	r0, [pc, #424]	; (80094a4 <tcp_input+0x534>)
 80092fa:	f008 ffdd 	bl	80122b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	7a1b      	ldrb	r3, [r3, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d009      	beq.n	800931a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	7a1a      	ldrb	r2, [r3, #8]
 800930a:	4b63      	ldr	r3, [pc, #396]	; (8009498 <tcp_input+0x528>)
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009312:	3301      	adds	r3, #1
 8009314:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009316:	429a      	cmp	r2, r3
 8009318:	d122      	bne.n	8009360 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800931a:	69fb      	ldr	r3, [r7, #28]
 800931c:	8b1a      	ldrh	r2, [r3, #24]
 800931e:	4b5d      	ldr	r3, [pc, #372]	; (8009494 <tcp_input+0x524>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	881b      	ldrh	r3, [r3, #0]
 8009324:	b29b      	uxth	r3, r3
 8009326:	429a      	cmp	r2, r3
 8009328:	d11b      	bne.n	8009362 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	8ada      	ldrh	r2, [r3, #22]
 800932e:	4b59      	ldr	r3, [pc, #356]	; (8009494 <tcp_input+0x524>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	885b      	ldrh	r3, [r3, #2]
 8009334:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009336:	429a      	cmp	r2, r3
 8009338:	d113      	bne.n	8009362 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	4b56      	ldr	r3, [pc, #344]	; (8009498 <tcp_input+0x528>)
 8009340:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009342:	429a      	cmp	r2, r3
 8009344:	d10d      	bne.n	8009362 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b53      	ldr	r3, [pc, #332]	; (8009498 <tcp_input+0x528>)
 800934c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800934e:	429a      	cmp	r2, r3
 8009350:	d107      	bne.n	8009362 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009352:	69f8      	ldr	r0, [r7, #28]
 8009354:	f000 fb52 	bl	80099fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7fd fd37 	bl	8006dcc <pbuf_free>
        return;
 800935e:	e1ee      	b.n	800973e <tcp_input+0x7ce>
        continue;
 8009360:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1bc      	bne.n	80092e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009372:	4b51      	ldr	r3, [pc, #324]	; (80094b8 <tcp_input+0x548>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	617b      	str	r3, [r7, #20]
 8009378:	e02a      	b.n	80093d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	7a1b      	ldrb	r3, [r3, #8]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	7a1a      	ldrb	r2, [r3, #8]
 8009386:	4b44      	ldr	r3, [pc, #272]	; (8009498 <tcp_input+0x528>)
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800938e:	3301      	adds	r3, #1
 8009390:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009392:	429a      	cmp	r2, r3
 8009394:	d002      	beq.n	800939c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	61bb      	str	r3, [r7, #24]
        continue;
 800939a:	e016      	b.n	80093ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	8ada      	ldrh	r2, [r3, #22]
 80093a0:	4b3c      	ldr	r3, [pc, #240]	; (8009494 <tcp_input+0x524>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	885b      	ldrh	r3, [r3, #2]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d10c      	bne.n	80093c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	4b39      	ldr	r3, [pc, #228]	; (8009498 <tcp_input+0x528>)
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d00f      	beq.n	80093d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00d      	beq.n	80093da <tcp_input+0x46a>
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d009      	beq.n	80093da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1d1      	bne.n	800937a <tcp_input+0x40a>
 80093d6:	e000      	b.n	80093da <tcp_input+0x46a>
            break;
 80093d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d014      	beq.n	800940a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80093ee:	4b32      	ldr	r3, [pc, #200]	; (80094b8 <tcp_input+0x548>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80093f6:	4a30      	ldr	r2, [pc, #192]	; (80094b8 <tcp_input+0x548>)
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80093fc:	6978      	ldr	r0, [r7, #20]
 80093fe:	f000 f9ff 	bl	8009800 <tcp_listen_input>
      }
      pbuf_free(p);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fd fce2 	bl	8006dcc <pbuf_free>
      return;
 8009408:	e199      	b.n	800973e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 8160 	beq.w	80096d2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009412:	4b2a      	ldr	r3, [pc, #168]	; (80094bc <tcp_input+0x54c>)
 8009414:	2200      	movs	r2, #0
 8009416:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	891a      	ldrh	r2, [r3, #8]
 800941c:	4b27      	ldr	r3, [pc, #156]	; (80094bc <tcp_input+0x54c>)
 800941e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009420:	4a26      	ldr	r2, [pc, #152]	; (80094bc <tcp_input+0x54c>)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009426:	4b1b      	ldr	r3, [pc, #108]	; (8009494 <tcp_input+0x524>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a24      	ldr	r2, [pc, #144]	; (80094bc <tcp_input+0x54c>)
 800942c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800942e:	4b24      	ldr	r3, [pc, #144]	; (80094c0 <tcp_input+0x550>)
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009434:	4b23      	ldr	r3, [pc, #140]	; (80094c4 <tcp_input+0x554>)
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800943a:	4b23      	ldr	r3, [pc, #140]	; (80094c8 <tcp_input+0x558>)
 800943c:	2200      	movs	r2, #0
 800943e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009440:	4b22      	ldr	r3, [pc, #136]	; (80094cc <tcp_input+0x55c>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	f003 0308 	and.w	r3, r3, #8
 8009448:	2b00      	cmp	r3, #0
 800944a:	d006      	beq.n	800945a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	7b5b      	ldrb	r3, [r3, #13]
 8009450:	f043 0301 	orr.w	r3, r3, #1
 8009454:	b2da      	uxtb	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800945e:	2b00      	cmp	r3, #0
 8009460:	d038      	beq.n	80094d4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009462:	69f8      	ldr	r0, [r7, #28]
 8009464:	f7ff f854 	bl	8008510 <tcp_process_refused_data>
 8009468:	4603      	mov	r3, r0
 800946a:	f113 0f0d 	cmn.w	r3, #13
 800946e:	d007      	beq.n	8009480 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009474:	2b00      	cmp	r3, #0
 8009476:	d02d      	beq.n	80094d4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009478:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <tcp_input+0x560>)
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d029      	beq.n	80094d4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009484:	2b00      	cmp	r3, #0
 8009486:	f040 8104 	bne.w	8009692 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800948a:	69f8      	ldr	r0, [r7, #28]
 800948c:	f003 fe28 	bl	800d0e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009490:	e0ff      	b.n	8009692 <tcp_input+0x722>
 8009492:	bf00      	nop
 8009494:	20000520 	.word	0x20000520
 8009498:	20003c10 	.word	0x20003c10
 800949c:	080145a4 	.word	0x080145a4
 80094a0:	080146d0 	.word	0x080146d0
 80094a4:	080145f0 	.word	0x080145f0
 80094a8:	20007174 	.word	0x20007174
 80094ac:	080146fc 	.word	0x080146fc
 80094b0:	20007184 	.word	0x20007184
 80094b4:	08014728 	.word	0x08014728
 80094b8:	2000717c 	.word	0x2000717c
 80094bc:	20000510 	.word	0x20000510
 80094c0:	20000540 	.word	0x20000540
 80094c4:	2000053d 	.word	0x2000053d
 80094c8:	20000538 	.word	0x20000538
 80094cc:	2000053c 	.word	0x2000053c
 80094d0:	2000053a 	.word	0x2000053a
      }
    }
    tcp_input_pcb = pcb;
 80094d4:	4a9b      	ldr	r2, [pc, #620]	; (8009744 <tcp_input+0x7d4>)
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80094da:	69f8      	ldr	r0, [r7, #28]
 80094dc:	f000 fb0a 	bl	8009af4 <tcp_process>
 80094e0:	4603      	mov	r3, r0
 80094e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80094e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094e8:	f113 0f0d 	cmn.w	r3, #13
 80094ec:	f000 80d3 	beq.w	8009696 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80094f0:	4b95      	ldr	r3, [pc, #596]	; (8009748 <tcp_input+0x7d8>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d015      	beq.n	8009528 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009502:	2b00      	cmp	r3, #0
 8009504:	d008      	beq.n	8009518 <tcp_input+0x5a8>
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950c:	69fa      	ldr	r2, [r7, #28]
 800950e:	6912      	ldr	r2, [r2, #16]
 8009510:	f06f 010d 	mvn.w	r1, #13
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009518:	69f9      	ldr	r1, [r7, #28]
 800951a:	488c      	ldr	r0, [pc, #560]	; (800974c <tcp_input+0x7dc>)
 800951c:	f7ff fbb0 	bl	8008c80 <tcp_pcb_remove>
        tcp_free(pcb);
 8009520:	69f8      	ldr	r0, [r7, #28]
 8009522:	f7fd ff03 	bl	800732c <tcp_free>
 8009526:	e0c1      	b.n	80096ac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800952c:	4b88      	ldr	r3, [pc, #544]	; (8009750 <tcp_input+0x7e0>)
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01d      	beq.n	8009570 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009534:	4b86      	ldr	r3, [pc, #536]	; (8009750 <tcp_input+0x7e0>)
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <tcp_input+0x5ea>
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800954a:	69fa      	ldr	r2, [r7, #28]
 800954c:	6910      	ldr	r0, [r2, #16]
 800954e:	89fa      	ldrh	r2, [r7, #14]
 8009550:	69f9      	ldr	r1, [r7, #28]
 8009552:	4798      	blx	r3
 8009554:	4603      	mov	r3, r0
 8009556:	74fb      	strb	r3, [r7, #19]
 8009558:	e001      	b.n	800955e <tcp_input+0x5ee>
 800955a:	2300      	movs	r3, #0
 800955c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800955e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009562:	f113 0f0d 	cmn.w	r3, #13
 8009566:	f000 8098 	beq.w	800969a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800956a:	4b79      	ldr	r3, [pc, #484]	; (8009750 <tcp_input+0x7e0>)
 800956c:	2200      	movs	r2, #0
 800956e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009570:	69f8      	ldr	r0, [r7, #28]
 8009572:	f000 f905 	bl	8009780 <tcp_input_delayed_close>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8090 	bne.w	800969e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800957e:	4b75      	ldr	r3, [pc, #468]	; (8009754 <tcp_input+0x7e4>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d041      	beq.n	800960a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800958a:	2b00      	cmp	r3, #0
 800958c:	d006      	beq.n	800959c <tcp_input+0x62c>
 800958e:	4b72      	ldr	r3, [pc, #456]	; (8009758 <tcp_input+0x7e8>)
 8009590:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009594:	4971      	ldr	r1, [pc, #452]	; (800975c <tcp_input+0x7ec>)
 8009596:	4872      	ldr	r0, [pc, #456]	; (8009760 <tcp_input+0x7f0>)
 8009598:	f008 fe8e 	bl	80122b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	8b5b      	ldrh	r3, [r3, #26]
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d008      	beq.n	80095ba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80095a8:	4b6a      	ldr	r3, [pc, #424]	; (8009754 <tcp_input+0x7e4>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fc0d 	bl	8006dcc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80095b2:	69f8      	ldr	r0, [r7, #28]
 80095b4:	f7fe f99a 	bl	80078ec <tcp_abort>
            goto aborted;
 80095b8:	e078      	b.n	80096ac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00c      	beq.n	80095de <tcp_input+0x66e>
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	6918      	ldr	r0, [r3, #16]
 80095ce:	4b61      	ldr	r3, [pc, #388]	; (8009754 <tcp_input+0x7e4>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	2300      	movs	r3, #0
 80095d4:	69f9      	ldr	r1, [r7, #28]
 80095d6:	47a0      	blx	r4
 80095d8:	4603      	mov	r3, r0
 80095da:	74fb      	strb	r3, [r7, #19]
 80095dc:	e008      	b.n	80095f0 <tcp_input+0x680>
 80095de:	4b5d      	ldr	r3, [pc, #372]	; (8009754 <tcp_input+0x7e4>)
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	2300      	movs	r3, #0
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	2000      	movs	r0, #0
 80095e8:	f7ff f884 	bl	80086f4 <tcp_recv_null>
 80095ec:	4603      	mov	r3, r0
 80095ee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80095f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095f4:	f113 0f0d 	cmn.w	r3, #13
 80095f8:	d053      	beq.n	80096a2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80095fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009602:	4b54      	ldr	r3, [pc, #336]	; (8009754 <tcp_input+0x7e4>)
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800960a:	4b4f      	ldr	r3, [pc, #316]	; (8009748 <tcp_input+0x7d8>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b00      	cmp	r3, #0
 8009614:	d030      	beq.n	8009678 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800961a:	2b00      	cmp	r3, #0
 800961c:	d009      	beq.n	8009632 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009622:	7b5a      	ldrb	r2, [r3, #13]
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009628:	f042 0220 	orr.w	r2, r2, #32
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	735a      	strb	r2, [r3, #13]
 8009630:	e022      	b.n	8009678 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009636:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800963a:	d005      	beq.n	8009648 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009640:	3301      	adds	r3, #1
 8009642:	b29a      	uxth	r2, r3
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <tcp_input+0x6fa>
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	6918      	ldr	r0, [r3, #16]
 800965c:	2300      	movs	r3, #0
 800965e:	2200      	movs	r2, #0
 8009660:	69f9      	ldr	r1, [r7, #28]
 8009662:	47a0      	blx	r4
 8009664:	4603      	mov	r3, r0
 8009666:	74fb      	strb	r3, [r7, #19]
 8009668:	e001      	b.n	800966e <tcp_input+0x6fe>
 800966a:	2300      	movs	r3, #0
 800966c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800966e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009672:	f113 0f0d 	cmn.w	r3, #13
 8009676:	d016      	beq.n	80096a6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009678:	4b32      	ldr	r3, [pc, #200]	; (8009744 <tcp_input+0x7d4>)
 800967a:	2200      	movs	r2, #0
 800967c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800967e:	69f8      	ldr	r0, [r7, #28]
 8009680:	f000 f87e 	bl	8009780 <tcp_input_delayed_close>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10f      	bne.n	80096aa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800968a:	69f8      	ldr	r0, [r7, #28]
 800968c:	f002 ff10 	bl	800c4b0 <tcp_output>
 8009690:	e00c      	b.n	80096ac <tcp_input+0x73c>
        goto aborted;
 8009692:	bf00      	nop
 8009694:	e00a      	b.n	80096ac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009696:	bf00      	nop
 8009698:	e008      	b.n	80096ac <tcp_input+0x73c>
              goto aborted;
 800969a:	bf00      	nop
 800969c:	e006      	b.n	80096ac <tcp_input+0x73c>
          goto aborted;
 800969e:	bf00      	nop
 80096a0:	e004      	b.n	80096ac <tcp_input+0x73c>
            goto aborted;
 80096a2:	bf00      	nop
 80096a4:	e002      	b.n	80096ac <tcp_input+0x73c>
              goto aborted;
 80096a6:	bf00      	nop
 80096a8:	e000      	b.n	80096ac <tcp_input+0x73c>
          goto aborted;
 80096aa:	bf00      	nop
    tcp_input_pcb = NULL;
 80096ac:	4b25      	ldr	r3, [pc, #148]	; (8009744 <tcp_input+0x7d4>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80096b2:	4b28      	ldr	r3, [pc, #160]	; (8009754 <tcp_input+0x7e4>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <tcp_input+0x7f4>)
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d03d      	beq.n	800973c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80096c0:	4b28      	ldr	r3, [pc, #160]	; (8009764 <tcp_input+0x7f4>)
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7fd fb81 	bl	8006dcc <pbuf_free>
      inseg.p = NULL;
 80096ca:	4b26      	ldr	r3, [pc, #152]	; (8009764 <tcp_input+0x7f4>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80096d0:	e034      	b.n	800973c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80096d2:	4b25      	ldr	r3, [pc, #148]	; (8009768 <tcp_input+0x7f8>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	899b      	ldrh	r3, [r3, #12]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fc f89e 	bl	800581c <lwip_htons>
 80096e0:	4603      	mov	r3, r0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d118      	bne.n	800971e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80096ec:	4b1f      	ldr	r3, [pc, #124]	; (800976c <tcp_input+0x7fc>)
 80096ee:	6819      	ldr	r1, [r3, #0]
 80096f0:	4b1f      	ldr	r3, [pc, #124]	; (8009770 <tcp_input+0x800>)
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <tcp_input+0x804>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80096fc:	4b1a      	ldr	r3, [pc, #104]	; (8009768 <tcp_input+0x7f8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009704:	4a18      	ldr	r2, [pc, #96]	; (8009768 <tcp_input+0x7f8>)
 8009706:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009708:	8812      	ldrh	r2, [r2, #0]
 800970a:	b292      	uxth	r2, r2
 800970c:	9202      	str	r2, [sp, #8]
 800970e:	9301      	str	r3, [sp, #4]
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <tcp_input+0x808>)
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	4b19      	ldr	r3, [pc, #100]	; (800977c <tcp_input+0x80c>)
 8009716:	4602      	mov	r2, r0
 8009718:	2000      	movs	r0, #0
 800971a:	f003 fc8f 	bl	800d03c <tcp_rst>
    pbuf_free(p);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7fd fb54 	bl	8006dcc <pbuf_free>
  return;
 8009724:	e00a      	b.n	800973c <tcp_input+0x7cc>
    goto dropped;
 8009726:	bf00      	nop
 8009728:	e004      	b.n	8009734 <tcp_input+0x7c4>
dropped:
 800972a:	bf00      	nop
 800972c:	e002      	b.n	8009734 <tcp_input+0x7c4>
      goto dropped;
 800972e:	bf00      	nop
 8009730:	e000      	b.n	8009734 <tcp_input+0x7c4>
      goto dropped;
 8009732:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7fd fb49 	bl	8006dcc <pbuf_free>
 800973a:	e000      	b.n	800973e <tcp_input+0x7ce>
  return;
 800973c:	bf00      	nop
}
 800973e:	3724      	adds	r7, #36	; 0x24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd90      	pop	{r4, r7, pc}
 8009744:	20007188 	.word	0x20007188
 8009748:	2000053d 	.word	0x2000053d
 800974c:	20007174 	.word	0x20007174
 8009750:	20000538 	.word	0x20000538
 8009754:	20000540 	.word	0x20000540
 8009758:	080145a4 	.word	0x080145a4
 800975c:	08014758 	.word	0x08014758
 8009760:	080145f0 	.word	0x080145f0
 8009764:	20000510 	.word	0x20000510
 8009768:	20000520 	.word	0x20000520
 800976c:	20000534 	.word	0x20000534
 8009770:	2000053a 	.word	0x2000053a
 8009774:	20000530 	.word	0x20000530
 8009778:	20003c20 	.word	0x20003c20
 800977c:	20003c24 	.word	0x20003c24

08009780 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <tcp_input_delayed_close+0x1c>
 800978e:	4b17      	ldr	r3, [pc, #92]	; (80097ec <tcp_input_delayed_close+0x6c>)
 8009790:	f240 225a 	movw	r2, #602	; 0x25a
 8009794:	4916      	ldr	r1, [pc, #88]	; (80097f0 <tcp_input_delayed_close+0x70>)
 8009796:	4817      	ldr	r0, [pc, #92]	; (80097f4 <tcp_input_delayed_close+0x74>)
 8009798:	f008 fd8e 	bl	80122b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <tcp_input_delayed_close+0x78>)
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	f003 0310 	and.w	r3, r3, #16
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d01c      	beq.n	80097e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	8b5b      	ldrh	r3, [r3, #26]
 80097ac:	f003 0310 	and.w	r3, r3, #16
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10d      	bne.n	80097d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d008      	beq.n	80097d0 <tcp_input_delayed_close+0x50>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6912      	ldr	r2, [r2, #16]
 80097c8:	f06f 010e 	mvn.w	r1, #14
 80097cc:	4610      	mov	r0, r2
 80097ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	480a      	ldr	r0, [pc, #40]	; (80097fc <tcp_input_delayed_close+0x7c>)
 80097d4:	f7ff fa54 	bl	8008c80 <tcp_pcb_remove>
    tcp_free(pcb);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7fd fda7 	bl	800732c <tcp_free>
    return 1;
 80097de:	2301      	movs	r3, #1
 80097e0:	e000      	b.n	80097e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	080145a4 	.word	0x080145a4
 80097f0:	08014774 	.word	0x08014774
 80097f4:	080145f0 	.word	0x080145f0
 80097f8:	2000053d 	.word	0x2000053d
 80097fc:	20007174 	.word	0x20007174

08009800 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009800:	b590      	push	{r4, r7, lr}
 8009802:	b08b      	sub	sp, #44	; 0x2c
 8009804:	af04      	add	r7, sp, #16
 8009806:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009808:	4b6f      	ldr	r3, [pc, #444]	; (80099c8 <tcp_listen_input+0x1c8>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	f040 80d3 	bne.w	80099bc <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d106      	bne.n	800982a <tcp_listen_input+0x2a>
 800981c:	4b6b      	ldr	r3, [pc, #428]	; (80099cc <tcp_listen_input+0x1cc>)
 800981e:	f240 2281 	movw	r2, #641	; 0x281
 8009822:	496b      	ldr	r1, [pc, #428]	; (80099d0 <tcp_listen_input+0x1d0>)
 8009824:	486b      	ldr	r0, [pc, #428]	; (80099d4 <tcp_listen_input+0x1d4>)
 8009826:	f008 fd47 	bl	80122b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800982a:	4b67      	ldr	r3, [pc, #412]	; (80099c8 <tcp_listen_input+0x1c8>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	f003 0310 	and.w	r3, r3, #16
 8009832:	2b00      	cmp	r3, #0
 8009834:	d019      	beq.n	800986a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009836:	4b68      	ldr	r3, [pc, #416]	; (80099d8 <tcp_listen_input+0x1d8>)
 8009838:	6819      	ldr	r1, [r3, #0]
 800983a:	4b68      	ldr	r3, [pc, #416]	; (80099dc <tcp_listen_input+0x1dc>)
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	461a      	mov	r2, r3
 8009840:	4b67      	ldr	r3, [pc, #412]	; (80099e0 <tcp_listen_input+0x1e0>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009846:	4b67      	ldr	r3, [pc, #412]	; (80099e4 <tcp_listen_input+0x1e4>)
 8009848:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800984a:	885b      	ldrh	r3, [r3, #2]
 800984c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800984e:	4a65      	ldr	r2, [pc, #404]	; (80099e4 <tcp_listen_input+0x1e4>)
 8009850:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009852:	8812      	ldrh	r2, [r2, #0]
 8009854:	b292      	uxth	r2, r2
 8009856:	9202      	str	r2, [sp, #8]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	4b63      	ldr	r3, [pc, #396]	; (80099e8 <tcp_listen_input+0x1e8>)
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4b63      	ldr	r3, [pc, #396]	; (80099ec <tcp_listen_input+0x1ec>)
 8009860:	4602      	mov	r2, r0
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f003 fbea 	bl	800d03c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009868:	e0aa      	b.n	80099c0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800986a:	4b57      	ldr	r3, [pc, #348]	; (80099c8 <tcp_listen_input+0x1c8>)
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80a4 	beq.w	80099c0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7d5b      	ldrb	r3, [r3, #21]
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff f85d 	bl	800893c <tcp_alloc>
 8009882:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d111      	bne.n	80098ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00a      	beq.n	80098a8 <tcp_listen_input+0xa8>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	6910      	ldr	r0, [r2, #16]
 800989a:	f04f 32ff 	mov.w	r2, #4294967295
 800989e:	2100      	movs	r1, #0
 80098a0:	4798      	blx	r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	73bb      	strb	r3, [r7, #14]
      return;
 80098a6:	e08c      	b.n	80099c2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80098a8:	23f0      	movs	r3, #240	; 0xf0
 80098aa:	73bb      	strb	r3, [r7, #14]
      return;
 80098ac:	e089      	b.n	80099c2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80098ae:	4b50      	ldr	r3, [pc, #320]	; (80099f0 <tcp_listen_input+0x1f0>)
 80098b0:	695a      	ldr	r2, [r3, #20]
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80098b6:	4b4e      	ldr	r3, [pc, #312]	; (80099f0 <tcp_listen_input+0x1f0>)
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	8ada      	ldrh	r2, [r3, #22]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80098c6:	4b47      	ldr	r3, [pc, #284]	; (80099e4 <tcp_listen_input+0x1e4>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2203      	movs	r2, #3
 80098d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80098d8:	4b41      	ldr	r3, [pc, #260]	; (80099e0 <tcp_listen_input+0x1e0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	1c5a      	adds	r2, r3, #1
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80098ea:	6978      	ldr	r0, [r7, #20]
 80098ec:	f7ff fa5c 	bl	8008da8 <tcp_next_iss>
 80098f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800990a:	4b35      	ldr	r3, [pc, #212]	; (80099e0 <tcp_listen_input+0x1e0>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	1e5a      	subs	r2, r3, #1
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691a      	ldr	r2, [r3, #16]
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7a5b      	ldrb	r3, [r3, #9]
 8009926:	f003 030c 	and.w	r3, r3, #12
 800992a:	b2da      	uxtb	r2, r3
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7a1a      	ldrb	r2, [r3, #8]
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009938:	4b2e      	ldr	r3, [pc, #184]	; (80099f4 <tcp_listen_input+0x1f4>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	60da      	str	r2, [r3, #12]
 8009940:	4a2c      	ldr	r2, [pc, #176]	; (80099f4 <tcp_listen_input+0x1f4>)
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	f003 fd3b 	bl	800d3c0 <tcp_timer_needed>
 800994a:	4b2b      	ldr	r3, [pc, #172]	; (80099f8 <tcp_listen_input+0x1f8>)
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009950:	6978      	ldr	r0, [r7, #20]
 8009952:	f001 fd8f 	bl	800b474 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009956:	4b23      	ldr	r3, [pc, #140]	; (80099e4 <tcp_listen_input+0x1e4>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	89db      	ldrh	r3, [r3, #14]
 800995c:	b29a      	uxth	r2, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	3304      	adds	r3, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f007 fa59 	bl	8010e30 <ip4_route>
 800997e:	4601      	mov	r1, r0
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	3304      	adds	r3, #4
 8009984:	461a      	mov	r2, r3
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff fa34 	bl	8008df4 <tcp_eff_send_mss_netif>
 800998c:	4603      	mov	r3, r0
 800998e:	461a      	mov	r2, r3
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009994:	2112      	movs	r1, #18
 8009996:	6978      	ldr	r0, [r7, #20]
 8009998:	f002 fc9c 	bl	800c2d4 <tcp_enqueue_flags>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80099a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d004      	beq.n	80099b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80099a8:	2100      	movs	r1, #0
 80099aa:	6978      	ldr	r0, [r7, #20]
 80099ac:	f7fd fee0 	bl	8007770 <tcp_abandon>
      return;
 80099b0:	e007      	b.n	80099c2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80099b2:	6978      	ldr	r0, [r7, #20]
 80099b4:	f002 fd7c 	bl	800c4b0 <tcp_output>
  return;
 80099b8:	bf00      	nop
 80099ba:	e001      	b.n	80099c0 <tcp_listen_input+0x1c0>
    return;
 80099bc:	bf00      	nop
 80099be:	e000      	b.n	80099c2 <tcp_listen_input+0x1c2>
  return;
 80099c0:	bf00      	nop
}
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd90      	pop	{r4, r7, pc}
 80099c8:	2000053c 	.word	0x2000053c
 80099cc:	080145a4 	.word	0x080145a4
 80099d0:	0801479c 	.word	0x0801479c
 80099d4:	080145f0 	.word	0x080145f0
 80099d8:	20000534 	.word	0x20000534
 80099dc:	2000053a 	.word	0x2000053a
 80099e0:	20000530 	.word	0x20000530
 80099e4:	20000520 	.word	0x20000520
 80099e8:	20003c20 	.word	0x20003c20
 80099ec:	20003c24 	.word	0x20003c24
 80099f0:	20003c10 	.word	0x20003c10
 80099f4:	20007174 	.word	0x20007174
 80099f8:	20007170 	.word	0x20007170

080099fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af04      	add	r7, sp, #16
 8009a02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009a04:	4b30      	ldr	r3, [pc, #192]	; (8009ac8 <tcp_timewait_input+0xcc>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d154      	bne.n	8009aba <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <tcp_timewait_input+0x28>
 8009a16:	4b2d      	ldr	r3, [pc, #180]	; (8009acc <tcp_timewait_input+0xd0>)
 8009a18:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009a1c:	492c      	ldr	r1, [pc, #176]	; (8009ad0 <tcp_timewait_input+0xd4>)
 8009a1e:	482d      	ldr	r0, [pc, #180]	; (8009ad4 <tcp_timewait_input+0xd8>)
 8009a20:	f008 fc4a 	bl	80122b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009a24:	4b28      	ldr	r3, [pc, #160]	; (8009ac8 <tcp_timewait_input+0xcc>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d02a      	beq.n	8009a86 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009a30:	4b29      	ldr	r3, [pc, #164]	; (8009ad8 <tcp_timewait_input+0xdc>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	db2d      	blt.n	8009a9a <tcp_timewait_input+0x9e>
 8009a3e:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <tcp_timewait_input+0xdc>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a4a:	440b      	add	r3, r1
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dc23      	bgt.n	8009a9a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a52:	4b22      	ldr	r3, [pc, #136]	; (8009adc <tcp_timewait_input+0xe0>)
 8009a54:	6819      	ldr	r1, [r3, #0]
 8009a56:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <tcp_timewait_input+0xe4>)
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4b1e      	ldr	r3, [pc, #120]	; (8009ad8 <tcp_timewait_input+0xdc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a62:	4b20      	ldr	r3, [pc, #128]	; (8009ae4 <tcp_timewait_input+0xe8>)
 8009a64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a66:	885b      	ldrh	r3, [r3, #2]
 8009a68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a6a:	4a1e      	ldr	r2, [pc, #120]	; (8009ae4 <tcp_timewait_input+0xe8>)
 8009a6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a6e:	8812      	ldrh	r2, [r2, #0]
 8009a70:	b292      	uxth	r2, r2
 8009a72:	9202      	str	r2, [sp, #8]
 8009a74:	9301      	str	r3, [sp, #4]
 8009a76:	4b1c      	ldr	r3, [pc, #112]	; (8009ae8 <tcp_timewait_input+0xec>)
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <tcp_timewait_input+0xf0>)
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f003 fadc 	bl	800d03c <tcp_rst>
      return;
 8009a84:	e01c      	b.n	8009ac0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8009a86:	4b10      	ldr	r3, [pc, #64]	; (8009ac8 <tcp_timewait_input+0xcc>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d003      	beq.n	8009a9a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009a92:	4b17      	ldr	r3, [pc, #92]	; (8009af0 <tcp_timewait_input+0xf4>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009a9a:	4b11      	ldr	r3, [pc, #68]	; (8009ae0 <tcp_timewait_input+0xe4>)
 8009a9c:	881b      	ldrh	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00d      	beq.n	8009abe <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	8b5b      	ldrh	r3, [r3, #26]
 8009aa6:	f043 0302 	orr.w	r3, r3, #2
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f002 fcfd 	bl	800c4b0 <tcp_output>
  }
  return;
 8009ab6:	bf00      	nop
 8009ab8:	e001      	b.n	8009abe <tcp_timewait_input+0xc2>
    return;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <tcp_timewait_input+0xc4>
  return;
 8009abe:	bf00      	nop
}
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	2000053c 	.word	0x2000053c
 8009acc:	080145a4 	.word	0x080145a4
 8009ad0:	080147bc 	.word	0x080147bc
 8009ad4:	080145f0 	.word	0x080145f0
 8009ad8:	20000530 	.word	0x20000530
 8009adc:	20000534 	.word	0x20000534
 8009ae0:	2000053a 	.word	0x2000053a
 8009ae4:	20000520 	.word	0x20000520
 8009ae8:	20003c20 	.word	0x20003c20
 8009aec:	20003c24 	.word	0x20003c24
 8009af0:	20007178 	.word	0x20007178

08009af4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009af4:	b590      	push	{r4, r7, lr}
 8009af6:	b08d      	sub	sp, #52	; 0x34
 8009af8:	af04      	add	r7, sp, #16
 8009afa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <tcp_process+0x24>
 8009b0a:	4ba5      	ldr	r3, [pc, #660]	; (8009da0 <tcp_process+0x2ac>)
 8009b0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009b10:	49a4      	ldr	r1, [pc, #656]	; (8009da4 <tcp_process+0x2b0>)
 8009b12:	48a5      	ldr	r0, [pc, #660]	; (8009da8 <tcp_process+0x2b4>)
 8009b14:	f008 fbd0 	bl	80122b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009b18:	4ba4      	ldr	r3, [pc, #656]	; (8009dac <tcp_process+0x2b8>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d04e      	beq.n	8009bc2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7d1b      	ldrb	r3, [r3, #20]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d108      	bne.n	8009b3e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b30:	4b9f      	ldr	r3, [pc, #636]	; (8009db0 <tcp_process+0x2bc>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d123      	bne.n	8009b80 <tcp_process+0x8c>
        acceptable = 1;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	76fb      	strb	r3, [r7, #27]
 8009b3c:	e020      	b.n	8009b80 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b42:	4b9c      	ldr	r3, [pc, #624]	; (8009db4 <tcp_process+0x2c0>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d102      	bne.n	8009b50 <tcp_process+0x5c>
        acceptable = 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	76fb      	strb	r3, [r7, #27]
 8009b4e:	e017      	b.n	8009b80 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b50:	4b98      	ldr	r3, [pc, #608]	; (8009db4 <tcp_process+0x2c0>)
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	db10      	blt.n	8009b80 <tcp_process+0x8c>
 8009b5e:	4b95      	ldr	r3, [pc, #596]	; (8009db4 <tcp_process+0x2c0>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b6a:	440b      	add	r3, r1
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	dc06      	bgt.n	8009b80 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	8b5b      	ldrh	r3, [r3, #26]
 8009b76:	f043 0302 	orr.w	r3, r3, #2
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009b80:	7efb      	ldrb	r3, [r7, #27]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01b      	beq.n	8009bbe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7d1b      	ldrb	r3, [r3, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <tcp_process+0xa8>
 8009b8e:	4b84      	ldr	r3, [pc, #528]	; (8009da0 <tcp_process+0x2ac>)
 8009b90:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009b94:	4988      	ldr	r1, [pc, #544]	; (8009db8 <tcp_process+0x2c4>)
 8009b96:	4884      	ldr	r0, [pc, #528]	; (8009da8 <tcp_process+0x2b4>)
 8009b98:	f008 fb8e 	bl	80122b8 <iprintf>
      recv_flags |= TF_RESET;
 8009b9c:	4b87      	ldr	r3, [pc, #540]	; (8009dbc <tcp_process+0x2c8>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	f043 0308 	orr.w	r3, r3, #8
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	4b85      	ldr	r3, [pc, #532]	; (8009dbc <tcp_process+0x2c8>)
 8009ba8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	8b5b      	ldrh	r3, [r3, #26]
 8009bae:	f023 0301 	bic.w	r3, r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009bb8:	f06f 030d 	mvn.w	r3, #13
 8009bbc:	e37a      	b.n	800a2b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e378      	b.n	800a2b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009bc2:	4b7a      	ldr	r3, [pc, #488]	; (8009dac <tcp_process+0x2b8>)
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d010      	beq.n	8009bf0 <tcp_process+0xfc>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	7d1b      	ldrb	r3, [r3, #20]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d00c      	beq.n	8009bf0 <tcp_process+0xfc>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7d1b      	ldrb	r3, [r3, #20]
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d008      	beq.n	8009bf0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	8b5b      	ldrh	r3, [r3, #26]
 8009be2:	f043 0302 	orr.w	r3, r3, #2
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e361      	b.n	800a2b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	8b5b      	ldrh	r3, [r3, #26]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d103      	bne.n	8009c04 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009bfc:	4b70      	ldr	r3, [pc, #448]	; (8009dc0 <tcp_process+0x2cc>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f001 fc2d 	bl	800b474 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	7d1b      	ldrb	r3, [r3, #20]
 8009c1e:	3b02      	subs	r3, #2
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	f200 8337 	bhi.w	800a294 <tcp_process+0x7a0>
 8009c26:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <tcp_process+0x138>)
 8009c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009e7d 	.word	0x08009e7d
 8009c34:	08009ff5 	.word	0x08009ff5
 8009c38:	0800a01f 	.word	0x0800a01f
 8009c3c:	0800a143 	.word	0x0800a143
 8009c40:	08009ff5 	.word	0x08009ff5
 8009c44:	0800a1cf 	.word	0x0800a1cf
 8009c48:	0800a25f 	.word	0x0800a25f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009c4c:	4b57      	ldr	r3, [pc, #348]	; (8009dac <tcp_process+0x2b8>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80e4 	beq.w	8009e22 <tcp_process+0x32e>
 8009c5a:	4b54      	ldr	r3, [pc, #336]	; (8009dac <tcp_process+0x2b8>)
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 80dd 	beq.w	8009e22 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	4b50      	ldr	r3, [pc, #320]	; (8009db0 <tcp_process+0x2bc>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	f040 80d5 	bne.w	8009e22 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009c78:	4b4e      	ldr	r3, [pc, #312]	; (8009db4 <tcp_process+0x2c0>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009c8a:	4b49      	ldr	r3, [pc, #292]	; (8009db0 <tcp_process+0x2bc>)
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009c92:	4b4c      	ldr	r3, [pc, #304]	; (8009dc4 <tcp_process+0x2d0>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	89db      	ldrh	r3, [r3, #14]
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009cac:	4b41      	ldr	r3, [pc, #260]	; (8009db4 <tcp_process+0x2c0>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	1e5a      	subs	r2, r3, #1
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2204      	movs	r2, #4
 8009cba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f007 f8b3 	bl	8010e30 <ip4_route>
 8009cca:	4601      	mov	r1, r0
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f7ff f88e 	bl	8008df4 <tcp_eff_send_mss_netif>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009ce4:	009a      	lsls	r2, r3, #2
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	f241 111c 	movw	r1, #4380	; 0x111c
 8009cf0:	428b      	cmp	r3, r1
 8009cf2:	bf38      	it	cc
 8009cf4:	460b      	movcc	r3, r1
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d204      	bcs.n	8009d04 <tcp_process+0x210>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	e00d      	b.n	8009d20 <tcp_process+0x22c>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	f241 121c 	movw	r2, #4380	; 0x111c
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d904      	bls.n	8009d1c <tcp_process+0x228>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d16:	005b      	lsls	r3, r3, #1
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	e001      	b.n	8009d20 <tcp_process+0x22c>
 8009d1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <tcp_process+0x24a>
 8009d30:	4b1b      	ldr	r3, [pc, #108]	; (8009da0 <tcp_process+0x2ac>)
 8009d32:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009d36:	4924      	ldr	r1, [pc, #144]	; (8009dc8 <tcp_process+0x2d4>)
 8009d38:	481b      	ldr	r0, [pc, #108]	; (8009da8 <tcp_process+0x2b4>)
 8009d3a:	f008 fabd 	bl	80122b8 <iprintf>
        --pcb->snd_queuelen;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d44:	3b01      	subs	r3, #1
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d52:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d111      	bne.n	8009d7e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d106      	bne.n	8009d74 <tcp_process+0x280>
 8009d66:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <tcp_process+0x2ac>)
 8009d68:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009d6c:	4917      	ldr	r1, [pc, #92]	; (8009dcc <tcp_process+0x2d8>)
 8009d6e:	480e      	ldr	r0, [pc, #56]	; (8009da8 <tcp_process+0x2b4>)
 8009d70:	f008 faa2 	bl	80122b8 <iprintf>
          pcb->unsent = rseg->next;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8009d7c:	e003      	b.n	8009d86 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009d86:	69f8      	ldr	r0, [r7, #28]
 8009d88:	f7fe fc52 	bl	8008630 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d11d      	bne.n	8009dd0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d9a:	861a      	strh	r2, [r3, #48]	; 0x30
 8009d9c:	e01f      	b.n	8009dde <tcp_process+0x2ea>
 8009d9e:	bf00      	nop
 8009da0:	080145a4 	.word	0x080145a4
 8009da4:	080147dc 	.word	0x080147dc
 8009da8:	080145f0 	.word	0x080145f0
 8009dac:	2000053c 	.word	0x2000053c
 8009db0:	20000534 	.word	0x20000534
 8009db4:	20000530 	.word	0x20000530
 8009db8:	080147f8 	.word	0x080147f8
 8009dbc:	2000053d 	.word	0x2000053d
 8009dc0:	20007178 	.word	0x20007178
 8009dc4:	20000520 	.word	0x20000520
 8009dc8:	08014818 	.word	0x08014818
 8009dcc:	08014830 	.word	0x08014830
        } else {
          pcb->rtime = 0;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00a      	beq.n	8009dfe <tcp_process+0x30a>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6910      	ldr	r0, [r2, #16]
 8009df2:	2200      	movs	r2, #0
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	4798      	blx	r3
 8009df8:	4603      	mov	r3, r0
 8009dfa:	76bb      	strb	r3, [r7, #26]
 8009dfc:	e001      	b.n	8009e02 <tcp_process+0x30e>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009e02:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009e06:	f113 0f0d 	cmn.w	r3, #13
 8009e0a:	d102      	bne.n	8009e12 <tcp_process+0x31e>
          return ERR_ABRT;
 8009e0c:	f06f 030c 	mvn.w	r3, #12
 8009e10:	e250      	b.n	800a2b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8b5b      	ldrh	r3, [r3, #26]
 8009e16:	f043 0302 	orr.w	r3, r3, #2
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009e20:	e23a      	b.n	800a298 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009e22:	4b9d      	ldr	r3, [pc, #628]	; (800a098 <tcp_process+0x5a4>)
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	f003 0310 	and.w	r3, r3, #16
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 8234 	beq.w	800a298 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e30:	4b9a      	ldr	r3, [pc, #616]	; (800a09c <tcp_process+0x5a8>)
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	4b9a      	ldr	r3, [pc, #616]	; (800a0a0 <tcp_process+0x5ac>)
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4b9a      	ldr	r3, [pc, #616]	; (800a0a4 <tcp_process+0x5b0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e40:	4b99      	ldr	r3, [pc, #612]	; (800a0a8 <tcp_process+0x5b4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e44:	885b      	ldrh	r3, [r3, #2]
 8009e46:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009e48:	4a97      	ldr	r2, [pc, #604]	; (800a0a8 <tcp_process+0x5b4>)
 8009e4a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009e4c:	8812      	ldrh	r2, [r2, #0]
 8009e4e:	b292      	uxth	r2, r2
 8009e50:	9202      	str	r2, [sp, #8]
 8009e52:	9301      	str	r3, [sp, #4]
 8009e54:	4b95      	ldr	r3, [pc, #596]	; (800a0ac <tcp_process+0x5b8>)
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	4b95      	ldr	r3, [pc, #596]	; (800a0b0 <tcp_process+0x5bc>)
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f003 f8ed 	bl	800d03c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e68:	2b05      	cmp	r3, #5
 8009e6a:	f200 8215 	bhi.w	800a298 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f002 feab 	bl	800cbd0 <tcp_rexmit_rto>
      break;
 8009e7a:	e20d      	b.n	800a298 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009e7c:	4b86      	ldr	r3, [pc, #536]	; (800a098 <tcp_process+0x5a4>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 0310 	and.w	r3, r3, #16
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 80a1 	beq.w	8009fcc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009e8a:	4b84      	ldr	r3, [pc, #528]	; (800a09c <tcp_process+0x5a8>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	db7e      	blt.n	8009f98 <tcp_process+0x4a4>
 8009e9a:	4b80      	ldr	r3, [pc, #512]	; (800a09c <tcp_process+0x5a8>)
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	dc77      	bgt.n	8009f98 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2204      	movs	r2, #4
 8009eac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d102      	bne.n	8009ebc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009eb6:	23fa      	movs	r3, #250	; 0xfa
 8009eb8:	76bb      	strb	r3, [r7, #26]
 8009eba:	e01d      	b.n	8009ef8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <tcp_process+0x3e0>
 8009ec6:	4b7b      	ldr	r3, [pc, #492]	; (800a0b4 <tcp_process+0x5c0>)
 8009ec8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009ecc:	497a      	ldr	r1, [pc, #488]	; (800a0b8 <tcp_process+0x5c4>)
 8009ece:	487b      	ldr	r0, [pc, #492]	; (800a0bc <tcp_process+0x5c8>)
 8009ed0:	f008 f9f2 	bl	80122b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00a      	beq.n	8009ef4 <tcp_process+0x400>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee2:	699b      	ldr	r3, [r3, #24]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6910      	ldr	r0, [r2, #16]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	6879      	ldr	r1, [r7, #4]
 8009eec:	4798      	blx	r3
 8009eee:	4603      	mov	r3, r0
 8009ef0:	76bb      	strb	r3, [r7, #26]
 8009ef2:	e001      	b.n	8009ef8 <tcp_process+0x404>
 8009ef4:	23f0      	movs	r3, #240	; 0xf0
 8009ef6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009ef8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00a      	beq.n	8009f16 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009f00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009f04:	f113 0f0d 	cmn.w	r3, #13
 8009f08:	d002      	beq.n	8009f10 <tcp_process+0x41c>
              tcp_abort(pcb);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7fd fcee 	bl	80078ec <tcp_abort>
            }
            return ERR_ABRT;
 8009f10:	f06f 030c 	mvn.w	r3, #12
 8009f14:	e1ce      	b.n	800a2b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fae0 	bl	800a4dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009f1c:	4b68      	ldr	r3, [pc, #416]	; (800a0c0 <tcp_process+0x5cc>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d005      	beq.n	8009f30 <tcp_process+0x43c>
            recv_acked--;
 8009f24:	4b66      	ldr	r3, [pc, #408]	; (800a0c0 <tcp_process+0x5cc>)
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	4b64      	ldr	r3, [pc, #400]	; (800a0c0 <tcp_process+0x5cc>)
 8009f2e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f34:	009a      	lsls	r2, r3, #2
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009f40:	428b      	cmp	r3, r1
 8009f42:	bf38      	it	cc
 8009f44:	460b      	movcc	r3, r1
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d204      	bcs.n	8009f54 <tcp_process+0x460>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	e00d      	b.n	8009f70 <tcp_process+0x47c>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f58:	005b      	lsls	r3, r3, #1
 8009f5a:	f241 121c 	movw	r2, #4380	; 0x111c
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d904      	bls.n	8009f6c <tcp_process+0x478>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	e001      	b.n	8009f70 <tcp_process+0x47c>
 8009f6c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009f76:	4b53      	ldr	r3, [pc, #332]	; (800a0c4 <tcp_process+0x5d0>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	f003 0320 	and.w	r3, r3, #32
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d037      	beq.n	8009ff2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	8b5b      	ldrh	r3, [r3, #26]
 8009f86:	f043 0302 	orr.w	r3, r3, #2
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2207      	movs	r2, #7
 8009f94:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009f96:	e02c      	b.n	8009ff2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f98:	4b40      	ldr	r3, [pc, #256]	; (800a09c <tcp_process+0x5a8>)
 8009f9a:	6819      	ldr	r1, [r3, #0]
 8009f9c:	4b40      	ldr	r3, [pc, #256]	; (800a0a0 <tcp_process+0x5ac>)
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	4b40      	ldr	r3, [pc, #256]	; (800a0a4 <tcp_process+0x5b0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fa8:	4b3f      	ldr	r3, [pc, #252]	; (800a0a8 <tcp_process+0x5b4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fac:	885b      	ldrh	r3, [r3, #2]
 8009fae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fb0:	4a3d      	ldr	r2, [pc, #244]	; (800a0a8 <tcp_process+0x5b4>)
 8009fb2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fb4:	8812      	ldrh	r2, [r2, #0]
 8009fb6:	b292      	uxth	r2, r2
 8009fb8:	9202      	str	r2, [sp, #8]
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	4b3b      	ldr	r3, [pc, #236]	; (800a0ac <tcp_process+0x5b8>)
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	4b3b      	ldr	r3, [pc, #236]	; (800a0b0 <tcp_process+0x5bc>)
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f003 f839 	bl	800d03c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009fca:	e167      	b.n	800a29c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009fcc:	4b32      	ldr	r3, [pc, #200]	; (800a098 <tcp_process+0x5a4>)
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	f003 0302 	and.w	r3, r3, #2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 8161 	beq.w	800a29c <tcp_process+0x7a8>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	1e5a      	subs	r2, r3, #1
 8009fe0:	4b30      	ldr	r3, [pc, #192]	; (800a0a4 <tcp_process+0x5b0>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	f040 8159 	bne.w	800a29c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f002 fe12 	bl	800cc14 <tcp_rexmit>
      break;
 8009ff0:	e154      	b.n	800a29c <tcp_process+0x7a8>
 8009ff2:	e153      	b.n	800a29c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa71 	bl	800a4dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009ffa:	4b32      	ldr	r3, [pc, #200]	; (800a0c4 <tcp_process+0x5d0>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	f003 0320 	and.w	r3, r3, #32
 800a002:	2b00      	cmp	r3, #0
 800a004:	f000 814c 	beq.w	800a2a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	8b5b      	ldrh	r3, [r3, #26]
 800a00c:	f043 0302 	orr.w	r3, r3, #2
 800a010:	b29a      	uxth	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2207      	movs	r2, #7
 800a01a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a01c:	e140      	b.n	800a2a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa5c 	bl	800a4dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a024:	4b27      	ldr	r3, [pc, #156]	; (800a0c4 <tcp_process+0x5d0>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 0320 	and.w	r3, r3, #32
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d071      	beq.n	800a114 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a030:	4b19      	ldr	r3, [pc, #100]	; (800a098 <tcp_process+0x5a4>)
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 0310 	and.w	r3, r3, #16
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d060      	beq.n	800a0fe <tcp_process+0x60a>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a040:	4b16      	ldr	r3, [pc, #88]	; (800a09c <tcp_process+0x5a8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	429a      	cmp	r2, r3
 800a046:	d15a      	bne.n	800a0fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d156      	bne.n	800a0fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	8b5b      	ldrh	r3, [r3, #26]
 800a054:	f043 0302 	orr.w	r3, r3, #2
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7fe fdbe 	bl	8008be0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a064:	4b18      	ldr	r3, [pc, #96]	; (800a0c8 <tcp_process+0x5d4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d105      	bne.n	800a07a <tcp_process+0x586>
 800a06e:	4b16      	ldr	r3, [pc, #88]	; (800a0c8 <tcp_process+0x5d4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <tcp_process+0x5d4>)
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	e02e      	b.n	800a0d8 <tcp_process+0x5e4>
 800a07a:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <tcp_process+0x5d4>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e027      	b.n	800a0d2 <tcp_process+0x5de>
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d11f      	bne.n	800a0cc <tcp_process+0x5d8>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68da      	ldr	r2, [r3, #12]
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	60da      	str	r2, [r3, #12]
 800a094:	e020      	b.n	800a0d8 <tcp_process+0x5e4>
 800a096:	bf00      	nop
 800a098:	2000053c 	.word	0x2000053c
 800a09c:	20000534 	.word	0x20000534
 800a0a0:	2000053a 	.word	0x2000053a
 800a0a4:	20000530 	.word	0x20000530
 800a0a8:	20000520 	.word	0x20000520
 800a0ac:	20003c20 	.word	0x20003c20
 800a0b0:	20003c24 	.word	0x20003c24
 800a0b4:	080145a4 	.word	0x080145a4
 800a0b8:	08014844 	.word	0x08014844
 800a0bc:	080145f0 	.word	0x080145f0
 800a0c0:	20000538 	.word	0x20000538
 800a0c4:	2000053d 	.word	0x2000053d
 800a0c8:	20007174 	.word	0x20007174
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1d4      	bne.n	800a082 <tcp_process+0x58e>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	60da      	str	r2, [r3, #12]
 800a0de:	4b77      	ldr	r3, [pc, #476]	; (800a2bc <tcp_process+0x7c8>)
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	220a      	movs	r2, #10
 800a0e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a0ea:	4b75      	ldr	r3, [pc, #468]	; (800a2c0 <tcp_process+0x7cc>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	60da      	str	r2, [r3, #12]
 800a0f2:	4a73      	ldr	r2, [pc, #460]	; (800a2c0 <tcp_process+0x7cc>)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6013      	str	r3, [r2, #0]
 800a0f8:	f003 f962 	bl	800d3c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a0fc:	e0d2      	b.n	800a2a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	8b5b      	ldrh	r3, [r3, #26]
 800a102:	f043 0302 	orr.w	r3, r3, #2
 800a106:	b29a      	uxth	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2208      	movs	r2, #8
 800a110:	751a      	strb	r2, [r3, #20]
      break;
 800a112:	e0c7      	b.n	800a2a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a114:	4b6b      	ldr	r3, [pc, #428]	; (800a2c4 <tcp_process+0x7d0>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	f003 0310 	and.w	r3, r3, #16
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 80c1 	beq.w	800a2a4 <tcp_process+0x7b0>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a126:	4b68      	ldr	r3, [pc, #416]	; (800a2c8 <tcp_process+0x7d4>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f040 80ba 	bne.w	800a2a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 80b5 	bne.w	800a2a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2206      	movs	r2, #6
 800a13e:	751a      	strb	r2, [r3, #20]
      break;
 800a140:	e0b0      	b.n	800a2a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f9ca 	bl	800a4dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a148:	4b60      	ldr	r3, [pc, #384]	; (800a2cc <tcp_process+0x7d8>)
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 80a9 	beq.w	800a2a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	8b5b      	ldrh	r3, [r3, #26]
 800a15a:	f043 0302 	orr.w	r3, r3, #2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7fe fd3b 	bl	8008be0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a16a:	4b59      	ldr	r3, [pc, #356]	; (800a2d0 <tcp_process+0x7dc>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d105      	bne.n	800a180 <tcp_process+0x68c>
 800a174:	4b56      	ldr	r3, [pc, #344]	; (800a2d0 <tcp_process+0x7dc>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	4a55      	ldr	r2, [pc, #340]	; (800a2d0 <tcp_process+0x7dc>)
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	e013      	b.n	800a1a8 <tcp_process+0x6b4>
 800a180:	4b53      	ldr	r3, [pc, #332]	; (800a2d0 <tcp_process+0x7dc>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	613b      	str	r3, [r7, #16]
 800a186:	e00c      	b.n	800a1a2 <tcp_process+0x6ae>
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d104      	bne.n	800a19c <tcp_process+0x6a8>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68da      	ldr	r2, [r3, #12]
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e005      	b.n	800a1a8 <tcp_process+0x6b4>
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	613b      	str	r3, [r7, #16]
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1ef      	bne.n	800a188 <tcp_process+0x694>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	60da      	str	r2, [r3, #12]
 800a1ae:	4b43      	ldr	r3, [pc, #268]	; (800a2bc <tcp_process+0x7c8>)
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	220a      	movs	r2, #10
 800a1b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a1ba:	4b41      	ldr	r3, [pc, #260]	; (800a2c0 <tcp_process+0x7cc>)
 800a1bc:	681a      	ldr	r2, [r3, #0]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	60da      	str	r2, [r3, #12]
 800a1c2:	4a3f      	ldr	r2, [pc, #252]	; (800a2c0 <tcp_process+0x7cc>)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	f003 f8fa 	bl	800d3c0 <tcp_timer_needed>
      }
      break;
 800a1cc:	e06c      	b.n	800a2a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f984 	bl	800a4dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a1d4:	4b3b      	ldr	r3, [pc, #236]	; (800a2c4 <tcp_process+0x7d0>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d065      	beq.n	800a2ac <tcp_process+0x7b8>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1e4:	4b38      	ldr	r3, [pc, #224]	; (800a2c8 <tcp_process+0x7d4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d15f      	bne.n	800a2ac <tcp_process+0x7b8>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d15b      	bne.n	800a2ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7fe fcf3 	bl	8008be0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a1fa:	4b35      	ldr	r3, [pc, #212]	; (800a2d0 <tcp_process+0x7dc>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	429a      	cmp	r2, r3
 800a202:	d105      	bne.n	800a210 <tcp_process+0x71c>
 800a204:	4b32      	ldr	r3, [pc, #200]	; (800a2d0 <tcp_process+0x7dc>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	4a31      	ldr	r2, [pc, #196]	; (800a2d0 <tcp_process+0x7dc>)
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	e013      	b.n	800a238 <tcp_process+0x744>
 800a210:	4b2f      	ldr	r3, [pc, #188]	; (800a2d0 <tcp_process+0x7dc>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	60fb      	str	r3, [r7, #12]
 800a216:	e00c      	b.n	800a232 <tcp_process+0x73e>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d104      	bne.n	800a22c <tcp_process+0x738>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	60da      	str	r2, [r3, #12]
 800a22a:	e005      	b.n	800a238 <tcp_process+0x744>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1ef      	bne.n	800a218 <tcp_process+0x724>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	60da      	str	r2, [r3, #12]
 800a23e:	4b1f      	ldr	r3, [pc, #124]	; (800a2bc <tcp_process+0x7c8>)
 800a240:	2201      	movs	r2, #1
 800a242:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	220a      	movs	r2, #10
 800a248:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <tcp_process+0x7cc>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60da      	str	r2, [r3, #12]
 800a252:	4a1b      	ldr	r2, [pc, #108]	; (800a2c0 <tcp_process+0x7cc>)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	f003 f8b2 	bl	800d3c0 <tcp_timer_needed>
      }
      break;
 800a25c:	e026      	b.n	800a2ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f93c 	bl	800a4dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a264:	4b17      	ldr	r3, [pc, #92]	; (800a2c4 <tcp_process+0x7d0>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01f      	beq.n	800a2b0 <tcp_process+0x7bc>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a274:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <tcp_process+0x7d4>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d119      	bne.n	800a2b0 <tcp_process+0x7bc>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d115      	bne.n	800a2b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a284:	4b11      	ldr	r3, [pc, #68]	; (800a2cc <tcp_process+0x7d8>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	f043 0310 	orr.w	r3, r3, #16
 800a28c:	b2da      	uxtb	r2, r3
 800a28e:	4b0f      	ldr	r3, [pc, #60]	; (800a2cc <tcp_process+0x7d8>)
 800a290:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a292:	e00d      	b.n	800a2b0 <tcp_process+0x7bc>
    default:
      break;
 800a294:	bf00      	nop
 800a296:	e00c      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a298:	bf00      	nop
 800a29a:	e00a      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a29c:	bf00      	nop
 800a29e:	e008      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a2a0:	bf00      	nop
 800a2a2:	e006      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a2a4:	bf00      	nop
 800a2a6:	e004      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a2a8:	bf00      	nop
 800a2aa:	e002      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a2ac:	bf00      	nop
 800a2ae:	e000      	b.n	800a2b2 <tcp_process+0x7be>
      break;
 800a2b0:	bf00      	nop
  }
  return ERR_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3724      	adds	r7, #36	; 0x24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd90      	pop	{r4, r7, pc}
 800a2bc:	20007170 	.word	0x20007170
 800a2c0:	20007184 	.word	0x20007184
 800a2c4:	2000053c 	.word	0x2000053c
 800a2c8:	20000534 	.word	0x20000534
 800a2cc:	2000053d 	.word	0x2000053d
 800a2d0:	20007174 	.word	0x20007174

0800a2d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d106      	bne.n	800a2f2 <tcp_oos_insert_segment+0x1e>
 800a2e4:	4b3b      	ldr	r3, [pc, #236]	; (800a3d4 <tcp_oos_insert_segment+0x100>)
 800a2e6:	f240 421f 	movw	r2, #1055	; 0x41f
 800a2ea:	493b      	ldr	r1, [pc, #236]	; (800a3d8 <tcp_oos_insert_segment+0x104>)
 800a2ec:	483b      	ldr	r0, [pc, #236]	; (800a3dc <tcp_oos_insert_segment+0x108>)
 800a2ee:	f007 ffe3 	bl	80122b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	899b      	ldrh	r3, [r3, #12]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fb fa8e 	bl	800581c <lwip_htons>
 800a300:	4603      	mov	r3, r0
 800a302:	b2db      	uxtb	r3, r3
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d028      	beq.n	800a35e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a30c:	6838      	ldr	r0, [r7, #0]
 800a30e:	f7fe f97b 	bl	8008608 <tcp_segs_free>
    next = NULL;
 800a312:	2300      	movs	r3, #0
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	e056      	b.n	800a3c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	899b      	ldrh	r3, [r3, #12]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	4618      	mov	r0, r3
 800a322:	f7fb fa7b 	bl	800581c <lwip_htons>
 800a326:	4603      	mov	r3, r0
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00d      	beq.n	800a34e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	899b      	ldrh	r3, [r3, #12]
 800a338:	b29c      	uxth	r4, r3
 800a33a:	2001      	movs	r0, #1
 800a33c:	f7fb fa6e 	bl	800581c <lwip_htons>
 800a340:	4603      	mov	r3, r0
 800a342:	461a      	mov	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	4322      	orrs	r2, r4
 800a34a:	b292      	uxth	r2, r2
 800a34c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7fe f969 	bl	8008630 <tcp_seg_free>
    while (next &&
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00e      	beq.n	800a382 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	891b      	ldrh	r3, [r3, #8]
 800a368:	461a      	mov	r2, r3
 800a36a:	4b1d      	ldr	r3, [pc, #116]	; (800a3e0 <tcp_oos_insert_segment+0x10c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	441a      	add	r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	8909      	ldrh	r1, [r1, #8]
 800a37a:	440b      	add	r3, r1
 800a37c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a37e:	2b00      	cmp	r3, #0
 800a380:	daca      	bge.n	800a318 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01e      	beq.n	800a3c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	891b      	ldrh	r3, [r3, #8]
 800a38c:	461a      	mov	r2, r3
 800a38e:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <tcp_oos_insert_segment+0x10c>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	441a      	add	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dd12      	ble.n	800a3c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	4b0d      	ldr	r3, [pc, #52]	; (800a3e0 <tcp_oos_insert_segment+0x10c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	685a      	ldr	r2, [r3, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	891b      	ldrh	r3, [r3, #8]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	f7fc fb7d 	bl	8006ac0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	601a      	str	r2, [r3, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd90      	pop	{r4, r7, pc}
 800a3d4:	080145a4 	.word	0x080145a4
 800a3d8:	08014864 	.word	0x08014864
 800a3dc:	080145f0 	.word	0x080145f0
 800a3e0:	20000530 	.word	0x20000530

0800a3e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a3e4:	b5b0      	push	{r4, r5, r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a3f2:	e03e      	b.n	800a472 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4618      	mov	r0, r3
 800a404:	f7fc fd6a 	bl	8006edc <pbuf_clen>
 800a408:	4603      	mov	r3, r0
 800a40a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a412:	8a7a      	ldrh	r2, [r7, #18]
 800a414:	429a      	cmp	r2, r3
 800a416:	d906      	bls.n	800a426 <tcp_free_acked_segments+0x42>
 800a418:	4b2a      	ldr	r3, [pc, #168]	; (800a4c4 <tcp_free_acked_segments+0xe0>)
 800a41a:	f240 4257 	movw	r2, #1111	; 0x457
 800a41e:	492a      	ldr	r1, [pc, #168]	; (800a4c8 <tcp_free_acked_segments+0xe4>)
 800a420:	482a      	ldr	r0, [pc, #168]	; (800a4cc <tcp_free_acked_segments+0xe8>)
 800a422:	f007 ff49 	bl	80122b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a42c:	8a7b      	ldrh	r3, [r7, #18]
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	891a      	ldrh	r2, [r3, #8]
 800a43c:	4b24      	ldr	r3, [pc, #144]	; (800a4d0 <tcp_free_acked_segments+0xec>)
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	4413      	add	r3, r2
 800a442:	b29a      	uxth	r2, r3
 800a444:	4b22      	ldr	r3, [pc, #136]	; (800a4d0 <tcp_free_acked_segments+0xec>)
 800a446:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f7fe f8f1 	bl	8008630 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00c      	beq.n	800a472 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d109      	bne.n	800a472 <tcp_free_acked_segments+0x8e>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <tcp_free_acked_segments+0x8e>
 800a464:	4b17      	ldr	r3, [pc, #92]	; (800a4c4 <tcp_free_acked_segments+0xe0>)
 800a466:	f240 4262 	movw	r2, #1122	; 0x462
 800a46a:	491a      	ldr	r1, [pc, #104]	; (800a4d4 <tcp_free_acked_segments+0xf0>)
 800a46c:	4817      	ldr	r0, [pc, #92]	; (800a4cc <tcp_free_acked_segments+0xe8>)
 800a46e:	f007 ff23 	bl	80122b8 <iprintf>
  while (seg_list != NULL &&
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d020      	beq.n	800a4ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fb f9e1 	bl	8005846 <lwip_htonl>
 800a484:	4604      	mov	r4, r0
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	891b      	ldrh	r3, [r3, #8]
 800a48a:	461d      	mov	r5, r3
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	899b      	ldrh	r3, [r3, #12]
 800a492:	b29b      	uxth	r3, r3
 800a494:	4618      	mov	r0, r3
 800a496:	f7fb f9c1 	bl	800581c <lwip_htons>
 800a49a:	4603      	mov	r3, r0
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <tcp_free_acked_segments+0xc6>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e000      	b.n	800a4ac <tcp_free_acked_segments+0xc8>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	442b      	add	r3, r5
 800a4ae:	18e2      	adds	r2, r4, r3
 800a4b0:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <tcp_free_acked_segments+0xf4>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dd9c      	ble.n	800a3f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a4ba:	68bb      	ldr	r3, [r7, #8]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c4:	080145a4 	.word	0x080145a4
 800a4c8:	0801488c 	.word	0x0801488c
 800a4cc:	080145f0 	.word	0x080145f0
 800a4d0:	20000538 	.word	0x20000538
 800a4d4:	080148b4 	.word	0x080148b4
 800a4d8:	20000534 	.word	0x20000534

0800a4dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a4dc:	b5b0      	push	{r4, r5, r7, lr}
 800a4de:	b094      	sub	sp, #80	; 0x50
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <tcp_receive+0x20>
 800a4ee:	4ba6      	ldr	r3, [pc, #664]	; (800a788 <tcp_receive+0x2ac>)
 800a4f0:	f240 427b 	movw	r2, #1147	; 0x47b
 800a4f4:	49a5      	ldr	r1, [pc, #660]	; (800a78c <tcp_receive+0x2b0>)
 800a4f6:	48a6      	ldr	r0, [pc, #664]	; (800a790 <tcp_receive+0x2b4>)
 800a4f8:	f007 fede 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	7d1b      	ldrb	r3, [r3, #20]
 800a500:	2b03      	cmp	r3, #3
 800a502:	d806      	bhi.n	800a512 <tcp_receive+0x36>
 800a504:	4ba0      	ldr	r3, [pc, #640]	; (800a788 <tcp_receive+0x2ac>)
 800a506:	f240 427c 	movw	r2, #1148	; 0x47c
 800a50a:	49a2      	ldr	r1, [pc, #648]	; (800a794 <tcp_receive+0x2b8>)
 800a50c:	48a0      	ldr	r0, [pc, #640]	; (800a790 <tcp_receive+0x2b4>)
 800a50e:	f007 fed3 	bl	80122b8 <iprintf>

  if (flags & TCP_ACK) {
 800a512:	4ba1      	ldr	r3, [pc, #644]	; (800a798 <tcp_receive+0x2bc>)
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	f003 0310 	and.w	r3, r3, #16
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 8263 	beq.w	800a9e6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a526:	461a      	mov	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52c:	4413      	add	r3, r2
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a534:	4b99      	ldr	r3, [pc, #612]	; (800a79c <tcp_receive+0x2c0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	db1b      	blt.n	800a576 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a542:	4b96      	ldr	r3, [pc, #600]	; (800a79c <tcp_receive+0x2c0>)
 800a544:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a546:	429a      	cmp	r2, r3
 800a548:	d106      	bne.n	800a558 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a54e:	4b94      	ldr	r3, [pc, #592]	; (800a7a0 <tcp_receive+0x2c4>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	2b00      	cmp	r3, #0
 800a556:	db0e      	blt.n	800a576 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a55c:	4b90      	ldr	r3, [pc, #576]	; (800a7a0 <tcp_receive+0x2c4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a560:	429a      	cmp	r2, r3
 800a562:	d125      	bne.n	800a5b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a564:	4b8f      	ldr	r3, [pc, #572]	; (800a7a4 <tcp_receive+0x2c8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	89db      	ldrh	r3, [r3, #14]
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a572:	429a      	cmp	r2, r3
 800a574:	d91c      	bls.n	800a5b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a576:	4b8b      	ldr	r3, [pc, #556]	; (800a7a4 <tcp_receive+0x2c8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	89db      	ldrh	r3, [r3, #14]
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a590:	429a      	cmp	r2, r3
 800a592:	d205      	bcs.n	800a5a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a5a0:	4b7e      	ldr	r3, [pc, #504]	; (800a79c <tcp_receive+0x2c0>)
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a5a8:	4b7d      	ldr	r3, [pc, #500]	; (800a7a0 <tcp_receive+0x2c4>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a5b0:	4b7b      	ldr	r3, [pc, #492]	; (800a7a0 <tcp_receive+0x2c4>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	dc58      	bgt.n	800a670 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a5be:	4b7a      	ldr	r3, [pc, #488]	; (800a7a8 <tcp_receive+0x2cc>)
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d14b      	bne.n	800a65e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a5d0:	4413      	add	r3, r2
 800a5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d142      	bne.n	800a65e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	db3d      	blt.n	800a65e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5e6:	4b6e      	ldr	r3, [pc, #440]	; (800a7a0 <tcp_receive+0x2c4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d137      	bne.n	800a65e <tcp_receive+0x182>
              found_dupack = 1;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5f8:	2bff      	cmp	r3, #255	; 0xff
 800a5fa:	d007      	beq.n	800a60c <tcp_receive+0x130>
                ++pcb->dupacks;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a602:	3301      	adds	r3, #1
 800a604:	b2da      	uxtb	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a612:	2b03      	cmp	r3, #3
 800a614:	d91b      	bls.n	800a64e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a620:	4413      	add	r3, r2
 800a622:	b29a      	uxth	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d30a      	bcc.n	800a644 <tcp_receive+0x168>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a638:	4413      	add	r3, r2
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a642:	e004      	b.n	800a64e <tcp_receive+0x172>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a64a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a654:	2b02      	cmp	r3, #2
 800a656:	d902      	bls.n	800a65e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f002 fb47 	bl	800ccec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a65e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a660:	2b00      	cmp	r3, #0
 800a662:	f040 8160 	bne.w	800a926 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a66e:	e15a      	b.n	800a926 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a670:	4b4b      	ldr	r3, [pc, #300]	; (800a7a0 <tcp_receive+0x2c4>)
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	3b01      	subs	r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f2c0 814d 	blt.w	800a91c <tcp_receive+0x440>
 800a682:	4b47      	ldr	r3, [pc, #284]	; (800a7a0 <tcp_receive+0x2c4>)
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f300 8145 	bgt.w	800a91c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	8b5b      	ldrh	r3, [r3, #26]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d010      	beq.n	800a6c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8b5b      	ldrh	r3, [r3, #26]
 800a6a2:	f023 0304 	bic.w	r3, r3, #4
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a6ce:	10db      	asrs	r3, r3, #3
 800a6d0:	b21b      	sxth	r3, r3
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	4413      	add	r3, r2
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	b21a      	sxth	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a6e8:	4b2d      	ldr	r3, [pc, #180]	; (800a7a0 <tcp_receive+0x2c4>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a700:	4b27      	ldr	r3, [pc, #156]	; (800a7a0 <tcp_receive+0x2c4>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	7d1b      	ldrb	r3, [r3, #20]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	f240 8096 	bls.w	800a83e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a71e:	429a      	cmp	r2, r3
 800a720:	d244      	bcs.n	800a7ac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	8b5b      	ldrh	r3, [r3, #26]
 800a726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <tcp_receive+0x256>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <tcp_receive+0x258>
 800a732:	2302      	movs	r3, #2
 800a734:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a738:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a73c:	b29a      	uxth	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a742:	fb12 f303 	smulbb	r3, r2, r3
 800a746:	b29b      	uxth	r3, r3
 800a748:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a74a:	4293      	cmp	r3, r2
 800a74c:	bf28      	it	cs
 800a74e:	4613      	movcs	r3, r2
 800a750:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a758:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a75a:	4413      	add	r3, r2
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a764:	429a      	cmp	r2, r3
 800a766:	d309      	bcc.n	800a77c <tcp_receive+0x2a0>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a76e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a770:	4413      	add	r3, r2
 800a772:	b29a      	uxth	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a77a:	e060      	b.n	800a83e <tcp_receive+0x362>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a782:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a786:	e05a      	b.n	800a83e <tcp_receive+0x362>
 800a788:	080145a4 	.word	0x080145a4
 800a78c:	080148d4 	.word	0x080148d4
 800a790:	080145f0 	.word	0x080145f0
 800a794:	080148f0 	.word	0x080148f0
 800a798:	2000053c 	.word	0x2000053c
 800a79c:	20000530 	.word	0x20000530
 800a7a0:	20000534 	.word	0x20000534
 800a7a4:	20000520 	.word	0x20000520
 800a7a8:	2000053a 	.word	0x2000053a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a7b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7b4:	4413      	add	r3, r2
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d309      	bcc.n	800a7d6 <tcp_receive+0x2fa>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a7c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7ca:	4413      	add	r3, r2
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a7d4:	e004      	b.n	800a7e0 <tcp_receive+0x304>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d326      	bcc.n	800a83e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a810:	4413      	add	r3, r2
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d30a      	bcc.n	800a834 <tcp_receive+0x358>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a828:	4413      	add	r3, r2
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a832:	e004      	b.n	800a83e <tcp_receive+0x362>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a83a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a846:	4a98      	ldr	r2, [pc, #608]	; (800aaa8 <tcp_receive+0x5cc>)
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f7ff fdcb 	bl	800a3e4 <tcp_free_acked_segments>
 800a84e:	4602      	mov	r2, r0
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85c:	4a93      	ldr	r2, [pc, #588]	; (800aaac <tcp_receive+0x5d0>)
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff fdc0 	bl	800a3e4 <tcp_free_acked_segments>
 800a864:	4602      	mov	r2, r0
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a878:	861a      	strh	r2, [r3, #48]	; 0x30
 800a87a:	e002      	b.n	800a882 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d103      	bne.n	800a898 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a89e:	4b84      	ldr	r3, [pc, #528]	; (800aab0 <tcp_receive+0x5d4>)
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8b5b      	ldrh	r3, [r3, #26]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d035      	beq.n	800a924 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d118      	bne.n	800a8f2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00c      	beq.n	800a8e2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fa ffb6 	bl	8005846 <lwip_htonl>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dc20      	bgt.n	800a924 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	8b5b      	ldrh	r3, [r3, #26]
 800a8e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8f0:	e018      	b.n	800a924 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fa ffa1 	bl	8005846 <lwip_htonl>
 800a904:	4603      	mov	r3, r0
 800a906:	1ae3      	subs	r3, r4, r3
 800a908:	2b00      	cmp	r3, #0
 800a90a:	dc0b      	bgt.n	800a924 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	8b5b      	ldrh	r3, [r3, #26]
 800a910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a914:	b29a      	uxth	r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a91a:	e003      	b.n	800a924 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f002 fbdf 	bl	800d0e0 <tcp_send_empty_ack>
 800a922:	e000      	b.n	800a926 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a924:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d05b      	beq.n	800a9e6 <tcp_receive+0x50a>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a932:	4b60      	ldr	r3, [pc, #384]	; (800aab4 <tcp_receive+0x5d8>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	1ad3      	subs	r3, r2, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	da54      	bge.n	800a9e6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a93c:	4b5e      	ldr	r3, [pc, #376]	; (800aab8 <tcp_receive+0x5dc>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	b29a      	uxth	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a946:	b29b      	uxth	r3, r3
 800a948:	1ad3      	subs	r3, r2, r3
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a950:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a95a:	10db      	asrs	r3, r3, #3
 800a95c:	b21b      	sxth	r3, r3
 800a95e:	b29b      	uxth	r3, r3
 800a960:	1ad3      	subs	r3, r2, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a974:	4413      	add	r3, r2
 800a976:	b29b      	uxth	r3, r3
 800a978:	b21a      	sxth	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a97e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a982:	2b00      	cmp	r3, #0
 800a984:	da05      	bge.n	800a992 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800a986:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a98a:	425b      	negs	r3, r3
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a992:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a99c:	109b      	asrs	r3, r3, #2
 800a99e:	b21b      	sxth	r3, r3
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a9b6:	4413      	add	r3, r2
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	b21a      	sxth	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a9c6:	10db      	asrs	r3, r3, #3
 800a9c8:	b21b      	sxth	r3, r3
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	4413      	add	r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	b21a      	sxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a9e6:	4b35      	ldr	r3, [pc, #212]	; (800aabc <tcp_receive+0x5e0>)
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	f000 84e1 	beq.w	800b3b2 <tcp_receive+0xed6>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	7d1b      	ldrb	r3, [r3, #20]
 800a9f4:	2b06      	cmp	r3, #6
 800a9f6:	f200 84dc 	bhi.w	800b3b2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9fe:	4b30      	ldr	r3, [pc, #192]	; (800aac0 <tcp_receive+0x5e4>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	1ad3      	subs	r3, r2, r3
 800aa04:	3b01      	subs	r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f2c0 808e 	blt.w	800ab28 <tcp_receive+0x64c>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa10:	4b2a      	ldr	r3, [pc, #168]	; (800aabc <tcp_receive+0x5e0>)
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	4619      	mov	r1, r3
 800aa16:	4b2a      	ldr	r3, [pc, #168]	; (800aac0 <tcp_receive+0x5e4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	3301      	adds	r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f300 8081 	bgt.w	800ab28 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800aa26:	4b27      	ldr	r3, [pc, #156]	; (800aac4 <tcp_receive+0x5e8>)
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa30:	4b23      	ldr	r3, [pc, #140]	; (800aac0 <tcp_receive+0x5e4>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aa38:	4b22      	ldr	r3, [pc, #136]	; (800aac4 <tcp_receive+0x5e8>)
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d106      	bne.n	800aa4e <tcp_receive+0x572>
 800aa40:	4b21      	ldr	r3, [pc, #132]	; (800aac8 <tcp_receive+0x5ec>)
 800aa42:	f240 5294 	movw	r2, #1428	; 0x594
 800aa46:	4921      	ldr	r1, [pc, #132]	; (800aacc <tcp_receive+0x5f0>)
 800aa48:	4821      	ldr	r0, [pc, #132]	; (800aad0 <tcp_receive+0x5f4>)
 800aa4a:	f007 fc35 	bl	80122b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d906      	bls.n	800aa66 <tcp_receive+0x58a>
 800aa58:	4b1b      	ldr	r3, [pc, #108]	; (800aac8 <tcp_receive+0x5ec>)
 800aa5a:	f240 5295 	movw	r2, #1429	; 0x595
 800aa5e:	491d      	ldr	r1, [pc, #116]	; (800aad4 <tcp_receive+0x5f8>)
 800aa60:	481b      	ldr	r0, [pc, #108]	; (800aad0 <tcp_receive+0x5f4>)
 800aa62:	f007 fc29 	bl	80122b8 <iprintf>
      off = (u16_t)off32;
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800aa6c:	4b15      	ldr	r3, [pc, #84]	; (800aac4 <tcp_receive+0x5e8>)
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	891b      	ldrh	r3, [r3, #8]
 800aa72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d906      	bls.n	800aa88 <tcp_receive+0x5ac>
 800aa7a:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <tcp_receive+0x5ec>)
 800aa7c:	f240 5297 	movw	r2, #1431	; 0x597
 800aa80:	4915      	ldr	r1, [pc, #84]	; (800aad8 <tcp_receive+0x5fc>)
 800aa82:	4813      	ldr	r0, [pc, #76]	; (800aad0 <tcp_receive+0x5f4>)
 800aa84:	f007 fc18 	bl	80122b8 <iprintf>
      inseg.len -= off;
 800aa88:	4b0e      	ldr	r3, [pc, #56]	; (800aac4 <tcp_receive+0x5e8>)
 800aa8a:	891a      	ldrh	r2, [r3, #8]
 800aa8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <tcp_receive+0x5e8>)
 800aa96:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <tcp_receive+0x5e8>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	891a      	ldrh	r2, [r3, #8]
 800aa9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800aaa6:	e029      	b.n	800aafc <tcp_receive+0x620>
 800aaa8:	0801490c 	.word	0x0801490c
 800aaac:	08014914 	.word	0x08014914
 800aab0:	20000538 	.word	0x20000538
 800aab4:	20000534 	.word	0x20000534
 800aab8:	20007178 	.word	0x20007178
 800aabc:	2000053a 	.word	0x2000053a
 800aac0:	20000530 	.word	0x20000530
 800aac4:	20000510 	.word	0x20000510
 800aac8:	080145a4 	.word	0x080145a4
 800aacc:	0801491c 	.word	0x0801491c
 800aad0:	080145f0 	.word	0x080145f0
 800aad4:	0801492c 	.word	0x0801492c
 800aad8:	0801493c 	.word	0x0801493c
        off -= p->len;
 800aadc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aade:	895b      	ldrh	r3, [r3, #10]
 800aae0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800aae4:	1ad3      	subs	r3, r2, r3
 800aae6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800aaea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aaee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800aaf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800aaf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800aafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafe:	895b      	ldrh	r3, [r3, #10]
 800ab00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d8e9      	bhi.n	800aadc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ab08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ab10:	f7fc f8d6 	bl	8006cc0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	4a91      	ldr	r2, [pc, #580]	; (800ad60 <tcp_receive+0x884>)
 800ab1a:	6013      	str	r3, [r2, #0]
 800ab1c:	4b91      	ldr	r3, [pc, #580]	; (800ad64 <tcp_receive+0x888>)
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	4a8f      	ldr	r2, [pc, #572]	; (800ad60 <tcp_receive+0x884>)
 800ab22:	6812      	ldr	r2, [r2, #0]
 800ab24:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ab26:	e00d      	b.n	800ab44 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ab28:	4b8d      	ldr	r3, [pc, #564]	; (800ad60 <tcp_receive+0x884>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	da06      	bge.n	800ab44 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	8b5b      	ldrh	r3, [r3, #26]
 800ab3a:	f043 0302 	orr.w	r3, r3, #2
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ab44:	4b86      	ldr	r3, [pc, #536]	; (800ad60 <tcp_receive+0x884>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f2c0 842a 	blt.w	800b3a8 <tcp_receive+0xecc>
 800ab54:	4b82      	ldr	r3, [pc, #520]	; (800ad60 <tcp_receive+0x884>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ab60:	440b      	add	r3, r1
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	3301      	adds	r3, #1
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f300 841e 	bgt.w	800b3a8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab70:	4b7b      	ldr	r3, [pc, #492]	; (800ad60 <tcp_receive+0x884>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	f040 829a 	bne.w	800b0ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ab7a:	4b7a      	ldr	r3, [pc, #488]	; (800ad64 <tcp_receive+0x888>)
 800ab7c:	891c      	ldrh	r4, [r3, #8]
 800ab7e:	4b79      	ldr	r3, [pc, #484]	; (800ad64 <tcp_receive+0x888>)
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	899b      	ldrh	r3, [r3, #12]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fa fe48 	bl	800581c <lwip_htons>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 0303 	and.w	r3, r3, #3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <tcp_receive+0x6c0>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e000      	b.n	800ab9e <tcp_receive+0x6c2>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4423      	add	r3, r4
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	4b71      	ldr	r3, [pc, #452]	; (800ad68 <tcp_receive+0x88c>)
 800aba4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abaa:	4b6f      	ldr	r3, [pc, #444]	; (800ad68 <tcp_receive+0x88c>)
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d275      	bcs.n	800ac9e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800abb2:	4b6c      	ldr	r3, [pc, #432]	; (800ad64 <tcp_receive+0x888>)
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	899b      	ldrh	r3, [r3, #12]
 800abb8:	b29b      	uxth	r3, r3
 800abba:	4618      	mov	r0, r3
 800abbc:	f7fa fe2e 	bl	800581c <lwip_htons>
 800abc0:	4603      	mov	r3, r0
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0301 	and.w	r3, r3, #1
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01f      	beq.n	800ac0c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800abcc:	4b65      	ldr	r3, [pc, #404]	; (800ad64 <tcp_receive+0x888>)
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	899b      	ldrh	r3, [r3, #12]
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	b21b      	sxth	r3, r3
 800abd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800abda:	b21c      	sxth	r4, r3
 800abdc:	4b61      	ldr	r3, [pc, #388]	; (800ad64 <tcp_receive+0x888>)
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	899b      	ldrh	r3, [r3, #12]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fa fe19 	bl	800581c <lwip_htons>
 800abea:	4603      	mov	r3, r0
 800abec:	b2db      	uxtb	r3, r3
 800abee:	b29b      	uxth	r3, r3
 800abf0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fa fe10 	bl	800581c <lwip_htons>
 800abfc:	4603      	mov	r3, r0
 800abfe:	b21b      	sxth	r3, r3
 800ac00:	4323      	orrs	r3, r4
 800ac02:	b21a      	sxth	r2, r3
 800ac04:	4b57      	ldr	r3, [pc, #348]	; (800ad64 <tcp_receive+0x888>)
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	b292      	uxth	r2, r2
 800ac0a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ac10:	4b54      	ldr	r3, [pc, #336]	; (800ad64 <tcp_receive+0x888>)
 800ac12:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ac14:	4b53      	ldr	r3, [pc, #332]	; (800ad64 <tcp_receive+0x888>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	899b      	ldrh	r3, [r3, #12]
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fa fdfd 	bl	800581c <lwip_htons>
 800ac22:	4603      	mov	r3, r0
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <tcp_receive+0x75e>
            inseg.len -= 1;
 800ac2e:	4b4d      	ldr	r3, [pc, #308]	; (800ad64 <tcp_receive+0x888>)
 800ac30:	891b      	ldrh	r3, [r3, #8]
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	4b4b      	ldr	r3, [pc, #300]	; (800ad64 <tcp_receive+0x888>)
 800ac38:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ac3a:	4b4a      	ldr	r3, [pc, #296]	; (800ad64 <tcp_receive+0x888>)
 800ac3c:	685a      	ldr	r2, [r3, #4]
 800ac3e:	4b49      	ldr	r3, [pc, #292]	; (800ad64 <tcp_receive+0x888>)
 800ac40:	891b      	ldrh	r3, [r3, #8]
 800ac42:	4619      	mov	r1, r3
 800ac44:	4610      	mov	r0, r2
 800ac46:	f7fb ff3b 	bl	8006ac0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ac4a:	4b46      	ldr	r3, [pc, #280]	; (800ad64 <tcp_receive+0x888>)
 800ac4c:	891c      	ldrh	r4, [r3, #8]
 800ac4e:	4b45      	ldr	r3, [pc, #276]	; (800ad64 <tcp_receive+0x888>)
 800ac50:	68db      	ldr	r3, [r3, #12]
 800ac52:	899b      	ldrh	r3, [r3, #12]
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fa fde0 	bl	800581c <lwip_htons>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <tcp_receive+0x790>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e000      	b.n	800ac6e <tcp_receive+0x792>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4423      	add	r3, r4
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	4b3d      	ldr	r3, [pc, #244]	; (800ad68 <tcp_receive+0x88c>)
 800ac74:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ac76:	4b3c      	ldr	r3, [pc, #240]	; (800ad68 <tcp_receive+0x88c>)
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4b38      	ldr	r3, [pc, #224]	; (800ad60 <tcp_receive+0x884>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	441a      	add	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac8a:	440b      	add	r3, r1
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d006      	beq.n	800ac9e <tcp_receive+0x7c2>
 800ac90:	4b36      	ldr	r3, [pc, #216]	; (800ad6c <tcp_receive+0x890>)
 800ac92:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ac96:	4936      	ldr	r1, [pc, #216]	; (800ad70 <tcp_receive+0x894>)
 800ac98:	4836      	ldr	r0, [pc, #216]	; (800ad74 <tcp_receive+0x898>)
 800ac9a:	f007 fb0d 	bl	80122b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 80e7 	beq.w	800ae76 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aca8:	4b2e      	ldr	r3, [pc, #184]	; (800ad64 <tcp_receive+0x888>)
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	899b      	ldrh	r3, [r3, #12]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fa fdb3 	bl	800581c <lwip_htons>
 800acb6:	4603      	mov	r3, r0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d010      	beq.n	800ace4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800acc2:	e00a      	b.n	800acda <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7fd fcab 	bl	8008630 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1f0      	bne.n	800acc4 <tcp_receive+0x7e8>
 800ace2:	e0c8      	b.n	800ae76 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800acea:	e052      	b.n	800ad92 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800acec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acee:	68db      	ldr	r3, [r3, #12]
 800acf0:	899b      	ldrh	r3, [r3, #12]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fa fd91 	bl	800581c <lwip_htons>
 800acfa:	4603      	mov	r3, r0
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	f003 0301 	and.w	r3, r3, #1
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d03d      	beq.n	800ad82 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ad06:	4b17      	ldr	r3, [pc, #92]	; (800ad64 <tcp_receive+0x888>)
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	899b      	ldrh	r3, [r3, #12]
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fa fd84 	bl	800581c <lwip_htons>
 800ad14:	4603      	mov	r3, r0
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d130      	bne.n	800ad82 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ad20:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <tcp_receive+0x888>)
 800ad22:	68db      	ldr	r3, [r3, #12]
 800ad24:	899b      	ldrh	r3, [r3, #12]
 800ad26:	b29c      	uxth	r4, r3
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f7fa fd77 	bl	800581c <lwip_htons>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b0c      	ldr	r3, [pc, #48]	; (800ad64 <tcp_receive+0x888>)
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	4322      	orrs	r2, r4
 800ad38:	b292      	uxth	r2, r2
 800ad3a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ad3c:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <tcp_receive+0x888>)
 800ad3e:	891c      	ldrh	r4, [r3, #8]
 800ad40:	4b08      	ldr	r3, [pc, #32]	; (800ad64 <tcp_receive+0x888>)
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	899b      	ldrh	r3, [r3, #12]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fa fd67 	bl	800581c <lwip_htons>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0303 	and.w	r3, r3, #3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00e      	beq.n	800ad78 <tcp_receive+0x89c>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e00d      	b.n	800ad7a <tcp_receive+0x89e>
 800ad5e:	bf00      	nop
 800ad60:	20000530 	.word	0x20000530
 800ad64:	20000510 	.word	0x20000510
 800ad68:	2000053a 	.word	0x2000053a
 800ad6c:	080145a4 	.word	0x080145a4
 800ad70:	0801494c 	.word	0x0801494c
 800ad74:	080145f0 	.word	0x080145f0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4423      	add	r3, r4
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	4b98      	ldr	r3, [pc, #608]	; (800afe0 <tcp_receive+0xb04>)
 800ad80:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ad82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad84:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ad86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ad8c:	6938      	ldr	r0, [r7, #16]
 800ad8e:	f7fd fc4f 	bl	8008630 <tcp_seg_free>
            while (next &&
 800ad92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00e      	beq.n	800adb6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ad98:	4b91      	ldr	r3, [pc, #580]	; (800afe0 <tcp_receive+0xb04>)
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	4b91      	ldr	r3, [pc, #580]	; (800afe4 <tcp_receive+0xb08>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	441a      	add	r2, r3
 800ada4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adac:	8909      	ldrh	r1, [r1, #8]
 800adae:	440b      	add	r3, r1
 800adb0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	da9a      	bge.n	800acec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800adb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d059      	beq.n	800ae70 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800adbc:	4b88      	ldr	r3, [pc, #544]	; (800afe0 <tcp_receive+0xb04>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	4b88      	ldr	r3, [pc, #544]	; (800afe4 <tcp_receive+0xb08>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	441a      	add	r2, r3
 800adc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800add0:	2b00      	cmp	r3, #0
 800add2:	dd4d      	ble.n	800ae70 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800add4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	b29a      	uxth	r2, r3
 800addc:	4b81      	ldr	r3, [pc, #516]	; (800afe4 <tcp_receive+0xb08>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	1ad3      	subs	r3, r2, r3
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	4b80      	ldr	r3, [pc, #512]	; (800afe8 <tcp_receive+0xb0c>)
 800ade8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800adea:	4b7f      	ldr	r3, [pc, #508]	; (800afe8 <tcp_receive+0xb0c>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	899b      	ldrh	r3, [r3, #12]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fa fd12 	bl	800581c <lwip_htons>
 800adf8:	4603      	mov	r3, r0
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d005      	beq.n	800ae10 <tcp_receive+0x934>
                inseg.len -= 1;
 800ae04:	4b78      	ldr	r3, [pc, #480]	; (800afe8 <tcp_receive+0xb0c>)
 800ae06:	891b      	ldrh	r3, [r3, #8]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	4b76      	ldr	r3, [pc, #472]	; (800afe8 <tcp_receive+0xb0c>)
 800ae0e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ae10:	4b75      	ldr	r3, [pc, #468]	; (800afe8 <tcp_receive+0xb0c>)
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	4b74      	ldr	r3, [pc, #464]	; (800afe8 <tcp_receive+0xb0c>)
 800ae16:	891b      	ldrh	r3, [r3, #8]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f7fb fe50 	bl	8006ac0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ae20:	4b71      	ldr	r3, [pc, #452]	; (800afe8 <tcp_receive+0xb0c>)
 800ae22:	891c      	ldrh	r4, [r3, #8]
 800ae24:	4b70      	ldr	r3, [pc, #448]	; (800afe8 <tcp_receive+0xb0c>)
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	899b      	ldrh	r3, [r3, #12]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7fa fcf5 	bl	800581c <lwip_htons>
 800ae32:	4603      	mov	r3, r0
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	f003 0303 	and.w	r3, r3, #3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <tcp_receive+0x966>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e000      	b.n	800ae44 <tcp_receive+0x968>
 800ae42:	2300      	movs	r3, #0
 800ae44:	4423      	add	r3, r4
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	4b65      	ldr	r3, [pc, #404]	; (800afe0 <tcp_receive+0xb04>)
 800ae4a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ae4c:	4b64      	ldr	r3, [pc, #400]	; (800afe0 <tcp_receive+0xb04>)
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	4b64      	ldr	r3, [pc, #400]	; (800afe4 <tcp_receive+0xb08>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	441a      	add	r2, r3
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d006      	beq.n	800ae70 <tcp_receive+0x994>
 800ae62:	4b62      	ldr	r3, [pc, #392]	; (800afec <tcp_receive+0xb10>)
 800ae64:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ae68:	4961      	ldr	r1, [pc, #388]	; (800aff0 <tcp_receive+0xb14>)
 800ae6a:	4862      	ldr	r0, [pc, #392]	; (800aff4 <tcp_receive+0xb18>)
 800ae6c:	f007 fa24 	bl	80122b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae74:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ae76:	4b5a      	ldr	r3, [pc, #360]	; (800afe0 <tcp_receive+0xb04>)
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4b59      	ldr	r3, [pc, #356]	; (800afe4 <tcp_receive+0xb08>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	441a      	add	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae8a:	4b55      	ldr	r3, [pc, #340]	; (800afe0 <tcp_receive+0xb04>)
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d206      	bcs.n	800aea0 <tcp_receive+0x9c4>
 800ae92:	4b56      	ldr	r3, [pc, #344]	; (800afec <tcp_receive+0xb10>)
 800ae94:	f240 6207 	movw	r2, #1543	; 0x607
 800ae98:	4957      	ldr	r1, [pc, #348]	; (800aff8 <tcp_receive+0xb1c>)
 800ae9a:	4856      	ldr	r0, [pc, #344]	; (800aff4 <tcp_receive+0xb18>)
 800ae9c:	f007 fa0c 	bl	80122b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aea4:	4b4e      	ldr	r3, [pc, #312]	; (800afe0 <tcp_receive+0xb04>)
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	1ad3      	subs	r3, r2, r3
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7fc fe9b 	bl	8007bec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aeb6:	4b4c      	ldr	r3, [pc, #304]	; (800afe8 <tcp_receive+0xb0c>)
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	891b      	ldrh	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d006      	beq.n	800aece <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800aec0:	4b49      	ldr	r3, [pc, #292]	; (800afe8 <tcp_receive+0xb0c>)
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	4a4d      	ldr	r2, [pc, #308]	; (800affc <tcp_receive+0xb20>)
 800aec6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aec8:	4b47      	ldr	r3, [pc, #284]	; (800afe8 <tcp_receive+0xb0c>)
 800aeca:	2200      	movs	r2, #0
 800aecc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aece:	4b46      	ldr	r3, [pc, #280]	; (800afe8 <tcp_receive+0xb0c>)
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	899b      	ldrh	r3, [r3, #12]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fa fca0 	bl	800581c <lwip_htons>
 800aedc:	4603      	mov	r3, r0
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 80b8 	beq.w	800b05a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aeea:	4b45      	ldr	r3, [pc, #276]	; (800b000 <tcp_receive+0xb24>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f043 0320 	orr.w	r3, r3, #32
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	4b42      	ldr	r3, [pc, #264]	; (800b000 <tcp_receive+0xb24>)
 800aef6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aef8:	e0af      	b.n	800b05a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aefe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4a36      	ldr	r2, [pc, #216]	; (800afe4 <tcp_receive+0xb08>)
 800af0a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	891b      	ldrh	r3, [r3, #8]
 800af10:	461c      	mov	r4, r3
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	899b      	ldrh	r3, [r3, #12]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fa fc7e 	bl	800581c <lwip_htons>
 800af20:	4603      	mov	r3, r0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	f003 0303 	and.w	r3, r3, #3
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <tcp_receive+0xa54>
 800af2c:	2301      	movs	r3, #1
 800af2e:	e000      	b.n	800af32 <tcp_receive+0xa56>
 800af30:	2300      	movs	r3, #0
 800af32:	191a      	adds	r2, r3, r4
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af38:	441a      	add	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af42:	461c      	mov	r4, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	891b      	ldrh	r3, [r3, #8]
 800af48:	461d      	mov	r5, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	899b      	ldrh	r3, [r3, #12]
 800af50:	b29b      	uxth	r3, r3
 800af52:	4618      	mov	r0, r3
 800af54:	f7fa fc62 	bl	800581c <lwip_htons>
 800af58:	4603      	mov	r3, r0
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	2b00      	cmp	r3, #0
 800af62:	d001      	beq.n	800af68 <tcp_receive+0xa8c>
 800af64:	2301      	movs	r3, #1
 800af66:	e000      	b.n	800af6a <tcp_receive+0xa8e>
 800af68:	2300      	movs	r3, #0
 800af6a:	442b      	add	r3, r5
 800af6c:	429c      	cmp	r4, r3
 800af6e:	d206      	bcs.n	800af7e <tcp_receive+0xaa2>
 800af70:	4b1e      	ldr	r3, [pc, #120]	; (800afec <tcp_receive+0xb10>)
 800af72:	f240 622c 	movw	r2, #1580	; 0x62c
 800af76:	4923      	ldr	r1, [pc, #140]	; (800b004 <tcp_receive+0xb28>)
 800af78:	481e      	ldr	r0, [pc, #120]	; (800aff4 <tcp_receive+0xb18>)
 800af7a:	f007 f99d 	bl	80122b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	891b      	ldrh	r3, [r3, #8]
 800af82:	461c      	mov	r4, r3
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	899b      	ldrh	r3, [r3, #12]
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fa fc45 	bl	800581c <lwip_htons>
 800af92:	4603      	mov	r3, r0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	f003 0303 	and.w	r3, r3, #3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d001      	beq.n	800afa2 <tcp_receive+0xac6>
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <tcp_receive+0xac8>
 800afa2:	2300      	movs	r3, #0
 800afa4:	1919      	adds	r1, r3, r4
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afaa:	b28b      	uxth	r3, r1
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7fc fe19 	bl	8007bec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	891b      	ldrh	r3, [r3, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d028      	beq.n	800b016 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800afc4:	4b0d      	ldr	r3, [pc, #52]	; (800affc <tcp_receive+0xb20>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01d      	beq.n	800b008 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <tcp_receive+0xb20>)
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4619      	mov	r1, r3
 800afd6:	4610      	mov	r0, r2
 800afd8:	f7fb ffba 	bl	8006f50 <pbuf_cat>
 800afdc:	e018      	b.n	800b010 <tcp_receive+0xb34>
 800afde:	bf00      	nop
 800afe0:	2000053a 	.word	0x2000053a
 800afe4:	20000530 	.word	0x20000530
 800afe8:	20000510 	.word	0x20000510
 800afec:	080145a4 	.word	0x080145a4
 800aff0:	08014984 	.word	0x08014984
 800aff4:	080145f0 	.word	0x080145f0
 800aff8:	080149c0 	.word	0x080149c0
 800affc:	20000540 	.word	0x20000540
 800b000:	2000053d 	.word	0x2000053d
 800b004:	080149e0 	.word	0x080149e0
            } else {
              recv_data = cseg->p;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	4a70      	ldr	r2, [pc, #448]	; (800b1d0 <tcp_receive+0xcf4>)
 800b00e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2200      	movs	r2, #0
 800b014:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	899b      	ldrh	r3, [r3, #12]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fa fbfc 	bl	800581c <lwip_htons>
 800b024:	4603      	mov	r3, r0
 800b026:	b2db      	uxtb	r3, r3
 800b028:	f003 0301 	and.w	r3, r3, #1
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00d      	beq.n	800b04c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b030:	4b68      	ldr	r3, [pc, #416]	; (800b1d4 <tcp_receive+0xcf8>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f043 0320 	orr.w	r3, r3, #32
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	4b66      	ldr	r3, [pc, #408]	; (800b1d4 <tcp_receive+0xcf8>)
 800b03c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	7d1b      	ldrb	r3, [r3, #20]
 800b042:	2b04      	cmp	r3, #4
 800b044:	d102      	bne.n	800b04c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2207      	movs	r2, #7
 800b04a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b054:	68b8      	ldr	r0, [r7, #8]
 800b056:	f7fd faeb 	bl	8008630 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d008      	beq.n	800b074 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	685a      	ldr	r2, [r3, #4]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b06e:	429a      	cmp	r2, r3
 800b070:	f43f af43 	beq.w	800aefa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8b5b      	ldrh	r3, [r3, #26]
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00e      	beq.n	800b09e <tcp_receive+0xbc2>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	8b5b      	ldrh	r3, [r3, #26]
 800b084:	f023 0301 	bic.w	r3, r3, #1
 800b088:	b29a      	uxth	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	835a      	strh	r2, [r3, #26]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	8b5b      	ldrh	r3, [r3, #26]
 800b092:	f043 0302 	orr.w	r3, r3, #2
 800b096:	b29a      	uxth	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b09c:	e188      	b.n	800b3b0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	8b5b      	ldrh	r3, [r3, #26]
 800b0a2:	f043 0301 	orr.w	r3, r3, #1
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b0ac:	e180      	b.n	800b3b0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b0b6:	4848      	ldr	r0, [pc, #288]	; (800b1d8 <tcp_receive+0xcfc>)
 800b0b8:	f7fd faf0 	bl	800869c <tcp_seg_copy>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	675a      	str	r2, [r3, #116]	; 0x74
 800b0c2:	e16d      	b.n	800b3a0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0ce:	e157      	b.n	800b380 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	4b41      	ldr	r3, [pc, #260]	; (800b1dc <tcp_receive+0xd00>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d11d      	bne.n	800b11a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b0de:	4b3e      	ldr	r3, [pc, #248]	; (800b1d8 <tcp_receive+0xcfc>)
 800b0e0:	891a      	ldrh	r2, [r3, #8]
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	891b      	ldrh	r3, [r3, #8]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	f240 814f 	bls.w	800b38a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b0ec:	483a      	ldr	r0, [pc, #232]	; (800b1d8 <tcp_receive+0xcfc>)
 800b0ee:	f7fd fad5 	bl	800869c <tcp_seg_copy>
 800b0f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 8149 	beq.w	800b38e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	e002      	b.n	800b110 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b110:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b112:	6978      	ldr	r0, [r7, #20]
 800b114:	f7ff f8de 	bl	800a2d4 <tcp_oos_insert_segment>
                }
                break;
 800b118:	e139      	b.n	800b38e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d117      	bne.n	800b150 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b120:	4b2e      	ldr	r3, [pc, #184]	; (800b1dc <tcp_receive+0xd00>)
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	da57      	bge.n	800b1e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b130:	4829      	ldr	r0, [pc, #164]	; (800b1d8 <tcp_receive+0xcfc>)
 800b132:	f7fd fab3 	bl	800869c <tcp_seg_copy>
 800b136:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f000 8129 	beq.w	800b392 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b146:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b148:	69b8      	ldr	r0, [r7, #24]
 800b14a:	f7ff f8c3 	bl	800a2d4 <tcp_oos_insert_segment>
                  }
                  break;
 800b14e:	e120      	b.n	800b392 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b150:	4b22      	ldr	r3, [pc, #136]	; (800b1dc <tcp_receive+0xd00>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	3b01      	subs	r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	db3e      	blt.n	800b1e0 <tcp_receive+0xd04>
 800b162:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <tcp_receive+0xd00>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	3301      	adds	r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	dc35      	bgt.n	800b1e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b174:	4818      	ldr	r0, [pc, #96]	; (800b1d8 <tcp_receive+0xcfc>)
 800b176:	f7fd fa91 	bl	800869c <tcp_seg_copy>
 800b17a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f000 8109 	beq.w	800b396 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b18c:	8912      	ldrh	r2, [r2, #8]
 800b18e:	441a      	add	r2, r3
 800b190:	4b12      	ldr	r3, [pc, #72]	; (800b1dc <tcp_receive+0xd00>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	dd12      	ble.n	800b1c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b19a:	4b10      	ldr	r3, [pc, #64]	; (800b1dc <tcp_receive+0xd00>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b2:	685a      	ldr	r2, [r3, #4]
 800b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b6:	891b      	ldrh	r3, [r3, #8]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	f7fb fc80 	bl	8006ac0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c2:	69fa      	ldr	r2, [r7, #28]
 800b1c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b1c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b1c8:	69f8      	ldr	r0, [r7, #28]
 800b1ca:	f7ff f883 	bl	800a2d4 <tcp_oos_insert_segment>
                  }
                  break;
 800b1ce:	e0e2      	b.n	800b396 <tcp_receive+0xeba>
 800b1d0:	20000540 	.word	0x20000540
 800b1d4:	2000053d 	.word	0x2000053d
 800b1d8:	20000510 	.word	0x20000510
 800b1dc:	20000530 	.word	0x20000530
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f040 80c6 	bne.w	800b37a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b1ee:	4b80      	ldr	r3, [pc, #512]	; (800b3f0 <tcp_receive+0xf14>)
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f340 80bd 	ble.w	800b37a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	899b      	ldrh	r3, [r3, #12]
 800b206:	b29b      	uxth	r3, r3
 800b208:	4618      	mov	r0, r3
 800b20a:	f7fa fb07 	bl	800581c <lwip_htons>
 800b20e:	4603      	mov	r3, r0
 800b210:	b2db      	uxtb	r3, r3
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	f040 80bf 	bne.w	800b39a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b21c:	4875      	ldr	r0, [pc, #468]	; (800b3f4 <tcp_receive+0xf18>)
 800b21e:	f7fd fa3d 	bl	800869c <tcp_seg_copy>
 800b222:	4602      	mov	r2, r0
 800b224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b226:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 80b6 	beq.w	800b39e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b23a:	8912      	ldrh	r2, [r2, #8]
 800b23c:	441a      	add	r2, r3
 800b23e:	4b6c      	ldr	r3, [pc, #432]	; (800b3f0 <tcp_receive+0xf14>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	1ad3      	subs	r3, r2, r3
 800b244:	2b00      	cmp	r3, #0
 800b246:	dd12      	ble.n	800b26e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b248:	4b69      	ldr	r3, [pc, #420]	; (800b3f0 <tcp_receive+0xf14>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	b29b      	uxth	r3, r3
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	b29a      	uxth	r2, r3
 800b25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	685a      	ldr	r2, [r3, #4]
 800b262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b264:	891b      	ldrh	r3, [r3, #8]
 800b266:	4619      	mov	r1, r3
 800b268:	4610      	mov	r0, r2
 800b26a:	f7fb fc29 	bl	8006ac0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b26e:	4b62      	ldr	r3, [pc, #392]	; (800b3f8 <tcp_receive+0xf1c>)
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	4b5e      	ldr	r3, [pc, #376]	; (800b3f0 <tcp_receive+0xf14>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	441a      	add	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b282:	440b      	add	r3, r1
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	f340 8089 	ble.w	800b39e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	899b      	ldrh	r3, [r3, #12]
 800b294:	b29b      	uxth	r3, r3
 800b296:	4618      	mov	r0, r3
 800b298:	f7fa fac0 	bl	800581c <lwip_htons>
 800b29c:	4603      	mov	r3, r0
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d022      	beq.n	800b2ee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	899b      	ldrh	r3, [r3, #12]
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	b21b      	sxth	r3, r3
 800b2b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b2b8:	b21c      	sxth	r4, r3
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	899b      	ldrh	r3, [r3, #12]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fa faa9 	bl	800581c <lwip_htons>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fa faa0 	bl	800581c <lwip_htons>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	b21b      	sxth	r3, r3
 800b2e0:	4323      	orrs	r3, r4
 800b2e2:	b21a      	sxth	r2, r3
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	b292      	uxth	r2, r2
 800b2ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f8:	4413      	add	r3, r2
 800b2fa:	b299      	uxth	r1, r3
 800b2fc:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <tcp_receive+0xf14>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	b29a      	uxth	r2, r3
 800b302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	1a8a      	subs	r2, r1, r2
 800b308:	b292      	uxth	r2, r2
 800b30a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	891b      	ldrh	r3, [r3, #8]
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f7fb fbd0 	bl	8006ac0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	891c      	ldrh	r4, [r3, #8]
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	899b      	ldrh	r3, [r3, #12]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4618      	mov	r0, r3
 800b332:	f7fa fa73 	bl	800581c <lwip_htons>
 800b336:	4603      	mov	r3, r0
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d001      	beq.n	800b346 <tcp_receive+0xe6a>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <tcp_receive+0xe6c>
 800b346:	2300      	movs	r3, #0
 800b348:	4423      	add	r3, r4
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	4b2a      	ldr	r3, [pc, #168]	; (800b3f8 <tcp_receive+0xf1c>)
 800b34e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b350:	4b29      	ldr	r3, [pc, #164]	; (800b3f8 <tcp_receive+0xf1c>)
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	461a      	mov	r2, r3
 800b356:	4b26      	ldr	r3, [pc, #152]	; (800b3f0 <tcp_receive+0xf14>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	441a      	add	r2, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	6879      	ldr	r1, [r7, #4]
 800b362:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b364:	440b      	add	r3, r1
 800b366:	429a      	cmp	r2, r3
 800b368:	d019      	beq.n	800b39e <tcp_receive+0xec2>
 800b36a:	4b24      	ldr	r3, [pc, #144]	; (800b3fc <tcp_receive+0xf20>)
 800b36c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b370:	4923      	ldr	r1, [pc, #140]	; (800b400 <tcp_receive+0xf24>)
 800b372:	4824      	ldr	r0, [pc, #144]	; (800b404 <tcp_receive+0xf28>)
 800b374:	f006 ffa0 	bl	80122b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b378:	e011      	b.n	800b39e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	2b00      	cmp	r3, #0
 800b384:	f47f aea4 	bne.w	800b0d0 <tcp_receive+0xbf4>
 800b388:	e00a      	b.n	800b3a0 <tcp_receive+0xec4>
                break;
 800b38a:	bf00      	nop
 800b38c:	e008      	b.n	800b3a0 <tcp_receive+0xec4>
                break;
 800b38e:	bf00      	nop
 800b390:	e006      	b.n	800b3a0 <tcp_receive+0xec4>
                  break;
 800b392:	bf00      	nop
 800b394:	e004      	b.n	800b3a0 <tcp_receive+0xec4>
                  break;
 800b396:	bf00      	nop
 800b398:	e002      	b.n	800b3a0 <tcp_receive+0xec4>
                  break;
 800b39a:	bf00      	nop
 800b39c:	e000      	b.n	800b3a0 <tcp_receive+0xec4>
                break;
 800b39e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fe9d 	bl	800d0e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b3a6:	e003      	b.n	800b3b0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 fe99 	bl	800d0e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b3ae:	e01a      	b.n	800b3e6 <tcp_receive+0xf0a>
 800b3b0:	e019      	b.n	800b3e6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b3b2:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <tcp_receive+0xf14>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	db0a      	blt.n	800b3d6 <tcp_receive+0xefa>
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <tcp_receive+0xf14>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	6879      	ldr	r1, [r7, #4]
 800b3ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b3cc:	440b      	add	r3, r1
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dd07      	ble.n	800b3e6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	8b5b      	ldrh	r3, [r3, #26]
 800b3da:	f043 0302 	orr.w	r3, r3, #2
 800b3de:	b29a      	uxth	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b3e4:	e7ff      	b.n	800b3e6 <tcp_receive+0xf0a>
 800b3e6:	bf00      	nop
 800b3e8:	3750      	adds	r7, #80	; 0x50
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	20000530 	.word	0x20000530
 800b3f4:	20000510 	.word	0x20000510
 800b3f8:	2000053a 	.word	0x2000053a
 800b3fc:	080145a4 	.word	0x080145a4
 800b400:	0801494c 	.word	0x0801494c
 800b404:	080145f0 	.word	0x080145f0

0800b408 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b40e:	4b15      	ldr	r3, [pc, #84]	; (800b464 <tcp_get_next_optbyte+0x5c>)
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	b291      	uxth	r1, r2
 800b416:	4a13      	ldr	r2, [pc, #76]	; (800b464 <tcp_get_next_optbyte+0x5c>)
 800b418:	8011      	strh	r1, [r2, #0]
 800b41a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b41c:	4b12      	ldr	r3, [pc, #72]	; (800b468 <tcp_get_next_optbyte+0x60>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d004      	beq.n	800b42e <tcp_get_next_optbyte+0x26>
 800b424:	4b11      	ldr	r3, [pc, #68]	; (800b46c <tcp_get_next_optbyte+0x64>)
 800b426:	881b      	ldrh	r3, [r3, #0]
 800b428:	88fa      	ldrh	r2, [r7, #6]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d208      	bcs.n	800b440 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b42e:	4b10      	ldr	r3, [pc, #64]	; (800b470 <tcp_get_next_optbyte+0x68>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3314      	adds	r3, #20
 800b434:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b436:	88fb      	ldrh	r3, [r7, #6]
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	4413      	add	r3, r2
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	e00b      	b.n	800b458 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b440:	88fb      	ldrh	r3, [r7, #6]
 800b442:	b2da      	uxtb	r2, r3
 800b444:	4b09      	ldr	r3, [pc, #36]	; (800b46c <tcp_get_next_optbyte+0x64>)
 800b446:	881b      	ldrh	r3, [r3, #0]
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	1ad3      	subs	r3, r2, r3
 800b44c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b44e:	4b06      	ldr	r3, [pc, #24]	; (800b468 <tcp_get_next_optbyte+0x60>)
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	797b      	ldrb	r3, [r7, #5]
 800b454:	4413      	add	r3, r2
 800b456:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	2000052c 	.word	0x2000052c
 800b468:	20000528 	.word	0x20000528
 800b46c:	20000526 	.word	0x20000526
 800b470:	20000520 	.word	0x20000520

0800b474 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d106      	bne.n	800b490 <tcp_parseopt+0x1c>
 800b482:	4b31      	ldr	r3, [pc, #196]	; (800b548 <tcp_parseopt+0xd4>)
 800b484:	f240 727d 	movw	r2, #1917	; 0x77d
 800b488:	4930      	ldr	r1, [pc, #192]	; (800b54c <tcp_parseopt+0xd8>)
 800b48a:	4831      	ldr	r0, [pc, #196]	; (800b550 <tcp_parseopt+0xdc>)
 800b48c:	f006 ff14 	bl	80122b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b490:	4b30      	ldr	r3, [pc, #192]	; (800b554 <tcp_parseopt+0xe0>)
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d053      	beq.n	800b540 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b498:	4b2f      	ldr	r3, [pc, #188]	; (800b558 <tcp_parseopt+0xe4>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	801a      	strh	r2, [r3, #0]
 800b49e:	e043      	b.n	800b528 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800b4a0:	f7ff ffb2 	bl	800b408 <tcp_get_next_optbyte>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d03c      	beq.n	800b528 <tcp_parseopt+0xb4>
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d002      	beq.n	800b4b8 <tcp_parseopt+0x44>
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d03f      	beq.n	800b536 <tcp_parseopt+0xc2>
 800b4b6:	e026      	b.n	800b506 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b4b8:	f7ff ffa6 	bl	800b408 <tcp_get_next_optbyte>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	d13b      	bne.n	800b53a <tcp_parseopt+0xc6>
 800b4c2:	4b25      	ldr	r3, [pc, #148]	; (800b558 <tcp_parseopt+0xe4>)
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	3302      	adds	r3, #2
 800b4c8:	4a22      	ldr	r2, [pc, #136]	; (800b554 <tcp_parseopt+0xe0>)
 800b4ca:	8812      	ldrh	r2, [r2, #0]
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	dc34      	bgt.n	800b53a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b4d0:	f7ff ff9a 	bl	800b408 <tcp_get_next_optbyte>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	021b      	lsls	r3, r3, #8
 800b4da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b4dc:	f7ff ff94 	bl	800b408 <tcp_get_next_optbyte>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	89bb      	ldrh	r3, [r7, #12]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b4ea:	89bb      	ldrh	r3, [r7, #12]
 800b4ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b4f0:	d804      	bhi.n	800b4fc <tcp_parseopt+0x88>
 800b4f2:	89bb      	ldrh	r3, [r7, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <tcp_parseopt+0x88>
 800b4f8:	89ba      	ldrh	r2, [r7, #12]
 800b4fa:	e001      	b.n	800b500 <tcp_parseopt+0x8c>
 800b4fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b504:	e010      	b.n	800b528 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b506:	f7ff ff7f 	bl	800b408 <tcp_get_next_optbyte>
 800b50a:	4603      	mov	r3, r0
 800b50c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b50e:	7afb      	ldrb	r3, [r7, #11]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d914      	bls.n	800b53e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b514:	7afb      	ldrb	r3, [r7, #11]
 800b516:	b29a      	uxth	r2, r3
 800b518:	4b0f      	ldr	r3, [pc, #60]	; (800b558 <tcp_parseopt+0xe4>)
 800b51a:	881b      	ldrh	r3, [r3, #0]
 800b51c:	4413      	add	r3, r2
 800b51e:	b29b      	uxth	r3, r3
 800b520:	3b02      	subs	r3, #2
 800b522:	b29a      	uxth	r2, r3
 800b524:	4b0c      	ldr	r3, [pc, #48]	; (800b558 <tcp_parseopt+0xe4>)
 800b526:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b528:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <tcp_parseopt+0xe4>)
 800b52a:	881a      	ldrh	r2, [r3, #0]
 800b52c:	4b09      	ldr	r3, [pc, #36]	; (800b554 <tcp_parseopt+0xe0>)
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	429a      	cmp	r2, r3
 800b532:	d3b5      	bcc.n	800b4a0 <tcp_parseopt+0x2c>
 800b534:	e004      	b.n	800b540 <tcp_parseopt+0xcc>
          return;
 800b536:	bf00      	nop
 800b538:	e002      	b.n	800b540 <tcp_parseopt+0xcc>
            return;
 800b53a:	bf00      	nop
 800b53c:	e000      	b.n	800b540 <tcp_parseopt+0xcc>
            return;
 800b53e:	bf00      	nop
      }
    }
  }
}
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	080145a4 	.word	0x080145a4
 800b54c:	08014a08 	.word	0x08014a08
 800b550:	080145f0 	.word	0x080145f0
 800b554:	20000524 	.word	0x20000524
 800b558:	2000052c 	.word	0x2000052c

0800b55c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b560:	4b05      	ldr	r3, [pc, #20]	; (800b578 <tcp_trigger_input_pcb_close+0x1c>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	f043 0310 	orr.w	r3, r3, #16
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	4b03      	ldr	r3, [pc, #12]	; (800b578 <tcp_trigger_input_pcb_close+0x1c>)
 800b56c:	701a      	strb	r2, [r3, #0]
}
 800b56e:	bf00      	nop
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr
 800b578:	2000053d 	.word	0x2000053d

0800b57c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00a      	beq.n	800b5a4 <tcp_route+0x28>
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	7a1b      	ldrb	r3, [r3, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d006      	beq.n	800b5a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7a1b      	ldrb	r3, [r3, #8]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fb f8ba 	bl	8006714 <netif_get_by_index>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	e003      	b.n	800b5ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f005 fc43 	bl	8010e30 <ip4_route>
 800b5aa:	4603      	mov	r3, r0
  }
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b5b4:	b590      	push	{r4, r7, lr}
 800b5b6:	b087      	sub	sp, #28
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	603b      	str	r3, [r7, #0]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d105      	bne.n	800b5d6 <tcp_create_segment+0x22>
 800b5ca:	4b44      	ldr	r3, [pc, #272]	; (800b6dc <tcp_create_segment+0x128>)
 800b5cc:	22a3      	movs	r2, #163	; 0xa3
 800b5ce:	4944      	ldr	r1, [pc, #272]	; (800b6e0 <tcp_create_segment+0x12c>)
 800b5d0:	4844      	ldr	r0, [pc, #272]	; (800b6e4 <tcp_create_segment+0x130>)
 800b5d2:	f006 fe71 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d105      	bne.n	800b5e8 <tcp_create_segment+0x34>
 800b5dc:	4b3f      	ldr	r3, [pc, #252]	; (800b6dc <tcp_create_segment+0x128>)
 800b5de:	22a4      	movs	r2, #164	; 0xa4
 800b5e0:	4941      	ldr	r1, [pc, #260]	; (800b6e8 <tcp_create_segment+0x134>)
 800b5e2:	4840      	ldr	r0, [pc, #256]	; (800b6e4 <tcp_create_segment+0x130>)
 800b5e4:	f006 fe68 	bl	80122b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b5e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b5f6:	2003      	movs	r0, #3
 800b5f8:	f7fa fd9c 	bl	8006134 <memp_malloc>
 800b5fc:	6138      	str	r0, [r7, #16]
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d104      	bne.n	800b60e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b604:	68b8      	ldr	r0, [r7, #8]
 800b606:	f7fb fbe1 	bl	8006dcc <pbuf_free>
    return NULL;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e061      	b.n	800b6d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b614:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	891a      	ldrh	r2, [r3, #8]
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	b29b      	uxth	r3, r3
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d205      	bcs.n	800b63a <tcp_create_segment+0x86>
 800b62e:	4b2b      	ldr	r3, [pc, #172]	; (800b6dc <tcp_create_segment+0x128>)
 800b630:	22b0      	movs	r2, #176	; 0xb0
 800b632:	492e      	ldr	r1, [pc, #184]	; (800b6ec <tcp_create_segment+0x138>)
 800b634:	482b      	ldr	r0, [pc, #172]	; (800b6e4 <tcp_create_segment+0x130>)
 800b636:	f006 fe3f 	bl	80122b8 <iprintf>
  seg->len = p->tot_len - optlen;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	891a      	ldrh	r2, [r3, #8]
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	b29b      	uxth	r3, r3
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	b29a      	uxth	r2, r3
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b64a:	2114      	movs	r1, #20
 800b64c:	68b8      	ldr	r0, [r7, #8]
 800b64e:	f7fb fb27 	bl	8006ca0 <pbuf_add_header>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b658:	6938      	ldr	r0, [r7, #16]
 800b65a:	f7fc ffe9 	bl	8008630 <tcp_seg_free>
    return NULL;
 800b65e:	2300      	movs	r3, #0
 800b660:	e037      	b.n	800b6d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	8ada      	ldrh	r2, [r3, #22]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	68dc      	ldr	r4, [r3, #12]
 800b674:	4610      	mov	r0, r2
 800b676:	f7fa f8d1 	bl	800581c <lwip_htons>
 800b67a:	4603      	mov	r3, r0
 800b67c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8b1a      	ldrh	r2, [r3, #24]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	68dc      	ldr	r4, [r3, #12]
 800b686:	4610      	mov	r0, r2
 800b688:	f7fa f8c8 	bl	800581c <lwip_htons>
 800b68c:	4603      	mov	r3, r0
 800b68e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	68dc      	ldr	r4, [r3, #12]
 800b694:	6838      	ldr	r0, [r7, #0]
 800b696:	f7fa f8d6 	bl	8005846 <lwip_htonl>
 800b69a:	4603      	mov	r3, r0
 800b69c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b69e:	7dfb      	ldrb	r3, [r7, #23]
 800b6a0:	089b      	lsrs	r3, r3, #2
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	3305      	adds	r3, #5
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	031b      	lsls	r3, r3, #12
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	68dc      	ldr	r4, [r3, #12]
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	f7fa f8ae 	bl	800581c <lwip_htons>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	749a      	strb	r2, [r3, #18]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	74da      	strb	r2, [r3, #19]
  return seg;
 800b6d0:	693b      	ldr	r3, [r7, #16]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd90      	pop	{r4, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08014a24 	.word	0x08014a24
 800b6e0:	08014a58 	.word	0x08014a58
 800b6e4:	08014a78 	.word	0x08014a78
 800b6e8:	08014aa0 	.word	0x08014aa0
 800b6ec:	08014ac4 	.word	0x08014ac4

0800b6f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	607b      	str	r3, [r7, #4]
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	81bb      	strh	r3, [r7, #12]
 800b700:	4613      	mov	r3, r2
 800b702:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b704:	89bb      	ldrh	r3, [r7, #12]
 800b706:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d105      	bne.n	800b71a <tcp_pbuf_prealloc+0x2a>
 800b70e:	4b30      	ldr	r3, [pc, #192]	; (800b7d0 <tcp_pbuf_prealloc+0xe0>)
 800b710:	22e8      	movs	r2, #232	; 0xe8
 800b712:	4930      	ldr	r1, [pc, #192]	; (800b7d4 <tcp_pbuf_prealloc+0xe4>)
 800b714:	4830      	ldr	r0, [pc, #192]	; (800b7d8 <tcp_pbuf_prealloc+0xe8>)
 800b716:	f006 fdcf 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b71a:	6a3b      	ldr	r3, [r7, #32]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d105      	bne.n	800b72c <tcp_pbuf_prealloc+0x3c>
 800b720:	4b2b      	ldr	r3, [pc, #172]	; (800b7d0 <tcp_pbuf_prealloc+0xe0>)
 800b722:	22e9      	movs	r2, #233	; 0xe9
 800b724:	492d      	ldr	r1, [pc, #180]	; (800b7dc <tcp_pbuf_prealloc+0xec>)
 800b726:	482c      	ldr	r0, [pc, #176]	; (800b7d8 <tcp_pbuf_prealloc+0xe8>)
 800b728:	f006 fdc6 	bl	80122b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b72c:	89ba      	ldrh	r2, [r7, #12]
 800b72e:	897b      	ldrh	r3, [r7, #10]
 800b730:	429a      	cmp	r2, r3
 800b732:	d221      	bcs.n	800b778 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b734:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b738:	f003 0302 	and.w	r3, r3, #2
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d111      	bne.n	800b764 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	8b5b      	ldrh	r3, [r3, #26]
 800b744:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d115      	bne.n	800b778 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b74c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b750:	2b00      	cmp	r3, #0
 800b752:	d007      	beq.n	800b764 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d103      	bne.n	800b764 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b75c:	6a3b      	ldr	r3, [r7, #32]
 800b75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b760:	2b00      	cmp	r3, #0
 800b762:	d009      	beq.n	800b778 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b764:	89bb      	ldrh	r3, [r7, #12]
 800b766:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b76a:	f023 0203 	bic.w	r2, r3, #3
 800b76e:	897b      	ldrh	r3, [r7, #10]
 800b770:	4293      	cmp	r3, r2
 800b772:	bf28      	it	cs
 800b774:	4613      	movcs	r3, r2
 800b776:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b778:	8af9      	ldrh	r1, [r7, #22]
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b780:	4618      	mov	r0, r3
 800b782:	f7fb f843 	bl	800680c <pbuf_alloc>
 800b786:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	e019      	b.n	800b7c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d006      	beq.n	800b7a8 <tcp_pbuf_prealloc+0xb8>
 800b79a:	4b0d      	ldr	r3, [pc, #52]	; (800b7d0 <tcp_pbuf_prealloc+0xe0>)
 800b79c:	f240 120b 	movw	r2, #267	; 0x10b
 800b7a0:	490f      	ldr	r1, [pc, #60]	; (800b7e0 <tcp_pbuf_prealloc+0xf0>)
 800b7a2:	480d      	ldr	r0, [pc, #52]	; (800b7d8 <tcp_pbuf_prealloc+0xe8>)
 800b7a4:	f006 fd88 	bl	80122b8 <iprintf>
  *oversize = p->len - length;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	895a      	ldrh	r2, [r3, #10]
 800b7ac:	89bb      	ldrh	r3, [r7, #12]
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	89ba      	ldrh	r2, [r7, #12]
 800b7ba:	811a      	strh	r2, [r3, #8]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	891a      	ldrh	r2, [r3, #8]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	815a      	strh	r2, [r3, #10]
  return p;
 800b7c4:	693b      	ldr	r3, [r7, #16]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	08014a24 	.word	0x08014a24
 800b7d4:	08014adc 	.word	0x08014adc
 800b7d8:	08014a78 	.word	0x08014a78
 800b7dc:	08014b00 	.word	0x08014b00
 800b7e0:	08014b20 	.word	0x08014b20

0800b7e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	460b      	mov	r3, r1
 800b7ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d106      	bne.n	800b804 <tcp_write_checks+0x20>
 800b7f6:	4b33      	ldr	r3, [pc, #204]	; (800b8c4 <tcp_write_checks+0xe0>)
 800b7f8:	f240 1233 	movw	r2, #307	; 0x133
 800b7fc:	4932      	ldr	r1, [pc, #200]	; (800b8c8 <tcp_write_checks+0xe4>)
 800b7fe:	4833      	ldr	r0, [pc, #204]	; (800b8cc <tcp_write_checks+0xe8>)
 800b800:	f006 fd5a 	bl	80122b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7d1b      	ldrb	r3, [r3, #20]
 800b808:	2b04      	cmp	r3, #4
 800b80a:	d00e      	beq.n	800b82a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b810:	2b07      	cmp	r3, #7
 800b812:	d00a      	beq.n	800b82a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d006      	beq.n	800b82a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b820:	2b03      	cmp	r3, #3
 800b822:	d002      	beq.n	800b82a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b824:	f06f 030a 	mvn.w	r3, #10
 800b828:	e048      	b.n	800b8bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b82a:	887b      	ldrh	r3, [r7, #2]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <tcp_write_checks+0x50>
    return ERR_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	e043      	b.n	800b8bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b83a:	887a      	ldrh	r2, [r7, #2]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d909      	bls.n	800b854 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	8b5b      	ldrh	r3, [r3, #26]
 800b844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b848:	b29a      	uxth	r2, r3
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	e033      	b.n	800b8bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b85a:	2b08      	cmp	r3, #8
 800b85c:	d909      	bls.n	800b872 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	8b5b      	ldrh	r3, [r3, #26]
 800b862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b86c:	f04f 33ff 	mov.w	r3, #4294967295
 800b870:	e024      	b.n	800b8bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00f      	beq.n	800b89c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b880:	2b00      	cmp	r3, #0
 800b882:	d11a      	bne.n	800b8ba <tcp_write_checks+0xd6>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d116      	bne.n	800b8ba <tcp_write_checks+0xd6>
 800b88c:	4b0d      	ldr	r3, [pc, #52]	; (800b8c4 <tcp_write_checks+0xe0>)
 800b88e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800b892:	490f      	ldr	r1, [pc, #60]	; (800b8d0 <tcp_write_checks+0xec>)
 800b894:	480d      	ldr	r0, [pc, #52]	; (800b8cc <tcp_write_checks+0xe8>)
 800b896:	f006 fd0f 	bl	80122b8 <iprintf>
 800b89a:	e00e      	b.n	800b8ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d103      	bne.n	800b8ac <tcp_write_checks+0xc8>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d006      	beq.n	800b8ba <tcp_write_checks+0xd6>
 800b8ac:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <tcp_write_checks+0xe0>)
 800b8ae:	f240 1259 	movw	r2, #345	; 0x159
 800b8b2:	4908      	ldr	r1, [pc, #32]	; (800b8d4 <tcp_write_checks+0xf0>)
 800b8b4:	4805      	ldr	r0, [pc, #20]	; (800b8cc <tcp_write_checks+0xe8>)
 800b8b6:	f006 fcff 	bl	80122b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	08014a24 	.word	0x08014a24
 800b8c8:	08014b34 	.word	0x08014b34
 800b8cc:	08014a78 	.word	0x08014a78
 800b8d0:	08014b54 	.word	0x08014b54
 800b8d4:	08014b90 	.word	0x08014b90

0800b8d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b8d8:	b590      	push	{r4, r7, lr}
 800b8da:	b09b      	sub	sp, #108	; 0x6c
 800b8dc:	af04      	add	r7, sp, #16
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	461a      	mov	r2, r3
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	80fb      	strh	r3, [r7, #6]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	653b      	str	r3, [r7, #80]	; 0x50
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8fe:	2300      	movs	r3, #0
 800b900:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b902:	2300      	movs	r3, #0
 800b904:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b908:	2300      	movs	r3, #0
 800b90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d109      	bne.n	800b934 <tcp_write+0x5c>
 800b920:	4ba5      	ldr	r3, [pc, #660]	; (800bbb8 <tcp_write+0x2e0>)
 800b922:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b926:	49a5      	ldr	r1, [pc, #660]	; (800bbbc <tcp_write+0x2e4>)
 800b928:	48a5      	ldr	r0, [pc, #660]	; (800bbc0 <tcp_write+0x2e8>)
 800b92a:	f006 fcc5 	bl	80122b8 <iprintf>
 800b92e:	f06f 030f 	mvn.w	r3, #15
 800b932:	e32c      	b.n	800bf8e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b93a:	085b      	lsrs	r3, r3, #1
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b942:	4293      	cmp	r3, r2
 800b944:	bf28      	it	cs
 800b946:	4613      	movcs	r3, r2
 800b948:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b94a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d102      	bne.n	800b956 <tcp_write+0x7e>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b954:	e000      	b.n	800b958 <tcp_write+0x80>
 800b956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b958:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d109      	bne.n	800b974 <tcp_write+0x9c>
 800b960:	4b95      	ldr	r3, [pc, #596]	; (800bbb8 <tcp_write+0x2e0>)
 800b962:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800b966:	4997      	ldr	r1, [pc, #604]	; (800bbc4 <tcp_write+0x2ec>)
 800b968:	4895      	ldr	r0, [pc, #596]	; (800bbc0 <tcp_write+0x2e8>)
 800b96a:	f006 fca5 	bl	80122b8 <iprintf>
 800b96e:	f06f 030f 	mvn.w	r3, #15
 800b972:	e30c      	b.n	800bf8e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b974:	88fb      	ldrh	r3, [r7, #6]
 800b976:	4619      	mov	r1, r3
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff ff33 	bl	800b7e4 <tcp_write_checks>
 800b97e:	4603      	mov	r3, r0
 800b980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b984:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <tcp_write+0xba>
    return err;
 800b98c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b990:	e2fd      	b.n	800bf8e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b998:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b99c:	2300      	movs	r3, #0
 800b99e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f000 80f7 	beq.w	800bb9a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9b2:	e002      	b.n	800b9ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f8      	bne.n	800b9b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c4:	7a9b      	ldrb	r3, [r3, #10]
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	f003 0304 	and.w	r3, r3, #4
 800b9ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b9d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d4:	891b      	ldrh	r3, [r3, #8]
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	8c3b      	ldrh	r3, [r7, #32]
 800b9da:	440b      	add	r3, r1
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	da06      	bge.n	800b9ee <tcp_write+0x116>
 800b9e0:	4b75      	ldr	r3, [pc, #468]	; (800bbb8 <tcp_write+0x2e0>)
 800b9e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b9e6:	4978      	ldr	r1, [pc, #480]	; (800bbc8 <tcp_write+0x2f0>)
 800b9e8:	4875      	ldr	r0, [pc, #468]	; (800bbc0 <tcp_write+0x2e8>)
 800b9ea:	f006 fc65 	bl	80122b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b9ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f0:	891a      	ldrh	r2, [r3, #8]
 800b9f2:	8c3b      	ldrh	r3, [r7, #32]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ba04:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ba06:	8a7b      	ldrh	r3, [r7, #18]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d027      	beq.n	800ba5c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ba0c:	8a7b      	ldrh	r3, [r7, #18]
 800ba0e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d206      	bcs.n	800ba22 <tcp_write+0x14a>
 800ba14:	4b68      	ldr	r3, [pc, #416]	; (800bbb8 <tcp_write+0x2e0>)
 800ba16:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ba1a:	496c      	ldr	r1, [pc, #432]	; (800bbcc <tcp_write+0x2f4>)
 800ba1c:	4868      	ldr	r0, [pc, #416]	; (800bbc0 <tcp_write+0x2e8>)
 800ba1e:	f006 fc4b 	bl	80122b8 <iprintf>
      seg = last_unsent;
 800ba22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba24:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ba26:	8a7b      	ldrh	r3, [r7, #18]
 800ba28:	88fa      	ldrh	r2, [r7, #6]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d901      	bls.n	800ba32 <tcp_write+0x15a>
 800ba2e:	8a7b      	ldrh	r3, [r7, #18]
 800ba30:	e000      	b.n	800ba34 <tcp_write+0x15c>
 800ba32:	88fb      	ldrh	r3, [r7, #6]
 800ba34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ba36:	4293      	cmp	r3, r2
 800ba38:	bfa8      	it	ge
 800ba3a:	4613      	movge	r3, r2
 800ba3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ba3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba44:	4413      	add	r3, r2
 800ba46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ba4a:	8a7a      	ldrh	r2, [r7, #18]
 800ba4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ba54:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ba56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ba5c:	8a7b      	ldrh	r3, [r7, #18]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00b      	beq.n	800ba7a <tcp_write+0x1a2>
 800ba62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d006      	beq.n	800ba7a <tcp_write+0x1a2>
 800ba6c:	4b52      	ldr	r3, [pc, #328]	; (800bbb8 <tcp_write+0x2e0>)
 800ba6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba72:	4957      	ldr	r1, [pc, #348]	; (800bbd0 <tcp_write+0x2f8>)
 800ba74:	4852      	ldr	r0, [pc, #328]	; (800bbc0 <tcp_write+0x2e8>)
 800ba76:	f006 fc1f 	bl	80122b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ba7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ba7e:	88fb      	ldrh	r3, [r7, #6]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	f080 8168 	bcs.w	800bd56 <tcp_write+0x47e>
 800ba86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 8164 	beq.w	800bd56 <tcp_write+0x47e>
 800ba8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba90:	891b      	ldrh	r3, [r3, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 815f 	beq.w	800bd56 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ba98:	88fa      	ldrh	r2, [r7, #6]
 800ba9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ba9e:	1ad2      	subs	r2, r2, r3
 800baa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800baa2:	4293      	cmp	r3, r2
 800baa4:	bfa8      	it	ge
 800baa6:	4613      	movge	r3, r2
 800baa8:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800baaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baac:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800baae:	797b      	ldrb	r3, [r7, #5]
 800bab0:	f003 0301 	and.w	r3, r3, #1
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d027      	beq.n	800bb08 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bab8:	f107 0012 	add.w	r0, r7, #18
 800babc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800babe:	8bf9      	ldrh	r1, [r7, #30]
 800bac0:	2301      	movs	r3, #1
 800bac2:	9302      	str	r3, [sp, #8]
 800bac4:	797b      	ldrb	r3, [r7, #5]
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	9300      	str	r3, [sp, #0]
 800bacc:	4603      	mov	r3, r0
 800bace:	2000      	movs	r0, #0
 800bad0:	f7ff fe0e 	bl	800b6f0 <tcp_pbuf_prealloc>
 800bad4:	6578      	str	r0, [r7, #84]	; 0x54
 800bad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 8226 	beq.w	800bf2a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bae0:	6858      	ldr	r0, [r3, #4]
 800bae2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	4413      	add	r3, r2
 800baea:	8bfa      	ldrh	r2, [r7, #30]
 800baec:	4619      	mov	r1, r3
 800baee:	f006 fbd0 	bl	8012292 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800baf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800baf4:	f7fb f9f2 	bl	8006edc <pbuf_clen>
 800baf8:	4603      	mov	r3, r0
 800bafa:	461a      	mov	r2, r3
 800bafc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bb00:	4413      	add	r3, r2
 800bb02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bb06:	e041      	b.n	800bb8c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bb08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb0e:	e002      	b.n	800bb16 <tcp_write+0x23e>
 800bb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	637b      	str	r3, [r7, #52]	; 0x34
 800bb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1f8      	bne.n	800bb10 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb20:	7b1b      	ldrb	r3, [r3, #12]
 800bb22:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d115      	bne.n	800bb56 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bb2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb30:	8952      	ldrh	r2, [r2, #10]
 800bb32:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bb34:	68ba      	ldr	r2, [r7, #8]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d10d      	bne.n	800bb56 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bb3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d006      	beq.n	800bb50 <tcp_write+0x278>
 800bb42:	4b1d      	ldr	r3, [pc, #116]	; (800bbb8 <tcp_write+0x2e0>)
 800bb44:	f240 2231 	movw	r2, #561	; 0x231
 800bb48:	4922      	ldr	r1, [pc, #136]	; (800bbd4 <tcp_write+0x2fc>)
 800bb4a:	481d      	ldr	r0, [pc, #116]	; (800bbc0 <tcp_write+0x2e8>)
 800bb4c:	f006 fbb4 	bl	80122b8 <iprintf>
          extendlen = seglen;
 800bb50:	8bfb      	ldrh	r3, [r7, #30]
 800bb52:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800bb54:	e01a      	b.n	800bb8c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bb56:	8bfb      	ldrh	r3, [r7, #30]
 800bb58:	2201      	movs	r2, #1
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f7fa fe55 	bl	800680c <pbuf_alloc>
 800bb62:	6578      	str	r0, [r7, #84]	; 0x54
 800bb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 81e1 	beq.w	800bf2e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bb6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	441a      	add	r2, r3
 800bb74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb76:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800bb78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb7a:	f7fb f9af 	bl	8006edc <pbuf_clen>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	461a      	mov	r2, r3
 800bb82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bb86:	4413      	add	r3, r2
 800bb88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800bb8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bb90:	8bfb      	ldrh	r3, [r7, #30]
 800bb92:	4413      	add	r3, r2
 800bb94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bb98:	e0dd      	b.n	800bd56 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 80d8 	beq.w	800bd56 <tcp_write+0x47e>
 800bba6:	4b04      	ldr	r3, [pc, #16]	; (800bbb8 <tcp_write+0x2e0>)
 800bba8:	f240 224b 	movw	r2, #587	; 0x24b
 800bbac:	490a      	ldr	r1, [pc, #40]	; (800bbd8 <tcp_write+0x300>)
 800bbae:	4804      	ldr	r0, [pc, #16]	; (800bbc0 <tcp_write+0x2e8>)
 800bbb0:	f006 fb82 	bl	80122b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800bbb4:	e0cf      	b.n	800bd56 <tcp_write+0x47e>
 800bbb6:	bf00      	nop
 800bbb8:	08014a24 	.word	0x08014a24
 800bbbc:	08014bc4 	.word	0x08014bc4
 800bbc0:	08014a78 	.word	0x08014a78
 800bbc4:	08014bdc 	.word	0x08014bdc
 800bbc8:	08014c10 	.word	0x08014c10
 800bbcc:	08014c28 	.word	0x08014c28
 800bbd0:	08014c48 	.word	0x08014c48
 800bbd4:	08014c68 	.word	0x08014c68
 800bbd8:	08014c94 	.word	0x08014c94
    struct pbuf *p;
    u16_t left = len - pos;
 800bbdc:	88fa      	ldrh	r2, [r7, #6]
 800bbde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800bbe6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bbee:	1ad3      	subs	r3, r2, r3
 800bbf0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bbf2:	8b7a      	ldrh	r2, [r7, #26]
 800bbf4:	8bbb      	ldrh	r3, [r7, #28]
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	bf28      	it	cs
 800bbfa:	4613      	movcs	r3, r2
 800bbfc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bbfe:	797b      	ldrb	r3, [r7, #5]
 800bc00:	f003 0301 	and.w	r3, r3, #1
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d036      	beq.n	800bc76 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bc08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	8b3b      	ldrh	r3, [r7, #24]
 800bc10:	4413      	add	r3, r2
 800bc12:	b299      	uxth	r1, r3
 800bc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	bf0c      	ite	eq
 800bc1a:	2301      	moveq	r3, #1
 800bc1c:	2300      	movne	r3, #0
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	f107 0012 	add.w	r0, r7, #18
 800bc24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc26:	9302      	str	r3, [sp, #8]
 800bc28:	797b      	ldrb	r3, [r7, #5]
 800bc2a:	9301      	str	r3, [sp, #4]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4603      	mov	r3, r0
 800bc32:	2036      	movs	r0, #54	; 0x36
 800bc34:	f7ff fd5c 	bl	800b6f0 <tcp_pbuf_prealloc>
 800bc38:	6338      	str	r0, [r7, #48]	; 0x30
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8178 	beq.w	800bf32 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bc42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc44:	895b      	ldrh	r3, [r3, #10]
 800bc46:	8b3a      	ldrh	r2, [r7, #24]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d906      	bls.n	800bc5a <tcp_write+0x382>
 800bc4c:	4b8c      	ldr	r3, [pc, #560]	; (800be80 <tcp_write+0x5a8>)
 800bc4e:	f240 2267 	movw	r2, #615	; 0x267
 800bc52:	498c      	ldr	r1, [pc, #560]	; (800be84 <tcp_write+0x5ac>)
 800bc54:	488c      	ldr	r0, [pc, #560]	; (800be88 <tcp_write+0x5b0>)
 800bc56:	f006 fb2f 	bl	80122b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bc62:	18d0      	adds	r0, r2, r3
 800bc64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	8b3a      	ldrh	r2, [r7, #24]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f006 fb0f 	bl	8012292 <memcpy>
 800bc74:	e02f      	b.n	800bcd6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bc76:	8a7b      	ldrh	r3, [r7, #18]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d006      	beq.n	800bc8a <tcp_write+0x3b2>
 800bc7c:	4b80      	ldr	r3, [pc, #512]	; (800be80 <tcp_write+0x5a8>)
 800bc7e:	f240 2271 	movw	r2, #625	; 0x271
 800bc82:	4982      	ldr	r1, [pc, #520]	; (800be8c <tcp_write+0x5b4>)
 800bc84:	4880      	ldr	r0, [pc, #512]	; (800be88 <tcp_write+0x5b0>)
 800bc86:	f006 fb17 	bl	80122b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bc8a:	8b3b      	ldrh	r3, [r7, #24]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	4619      	mov	r1, r3
 800bc90:	2036      	movs	r0, #54	; 0x36
 800bc92:	f7fa fdbb 	bl	800680c <pbuf_alloc>
 800bc96:	6178      	str	r0, [r7, #20]
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 814b 	beq.w	800bf36 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bca4:	68ba      	ldr	r2, [r7, #8]
 800bca6:	441a      	add	r2, r3
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bcac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	2036      	movs	r0, #54	; 0x36
 800bcba:	f7fa fda7 	bl	800680c <pbuf_alloc>
 800bcbe:	6338      	str	r0, [r7, #48]	; 0x30
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d103      	bne.n	800bcce <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bcc6:	6978      	ldr	r0, [r7, #20]
 800bcc8:	f7fb f880 	bl	8006dcc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bccc:	e136      	b.n	800bf3c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bcce:	6979      	ldr	r1, [r7, #20]
 800bcd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcd2:	f7fb f93d 	bl	8006f50 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bcd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcd8:	f7fb f900 	bl	8006edc <pbuf_clen>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bce4:	4413      	add	r3, r2
 800bce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bcea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcee:	2b09      	cmp	r3, #9
 800bcf0:	d903      	bls.n	800bcfa <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bcf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcf4:	f7fb f86a 	bl	8006dcc <pbuf_free>
      goto memerr;
 800bcf8:	e120      	b.n	800bf3c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bcfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd02:	441a      	add	r2, r3
 800bd04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f7ff fc4f 	bl	800b5b4 <tcp_create_segment>
 800bd16:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bd18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f000 810d 	beq.w	800bf3a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bd20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d102      	bne.n	800bd2c <tcp_write+0x454>
      queue = seg;
 800bd26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd28:	647b      	str	r3, [r7, #68]	; 0x44
 800bd2a:	e00c      	b.n	800bd46 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <tcp_write+0x468>
 800bd32:	4b53      	ldr	r3, [pc, #332]	; (800be80 <tcp_write+0x5a8>)
 800bd34:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bd38:	4955      	ldr	r1, [pc, #340]	; (800be90 <tcp_write+0x5b8>)
 800bd3a:	4853      	ldr	r0, [pc, #332]	; (800be88 <tcp_write+0x5b0>)
 800bd3c:	f006 fabc 	bl	80122b8 <iprintf>
      prev_seg->next = seg;
 800bd40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd44:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bd46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd48:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bd4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd4e:	8b3b      	ldrh	r3, [r7, #24]
 800bd50:	4413      	add	r3, r2
 800bd52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800bd56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd5a:	88fb      	ldrh	r3, [r7, #6]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	f4ff af3d 	bcc.w	800bbdc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800bd62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d02c      	beq.n	800bdc2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800bd68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd6e:	e01e      	b.n	800bdae <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800bd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd72:	891a      	ldrh	r2, [r3, #8]
 800bd74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd76:	4413      	add	r3, r2
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d110      	bne.n	800bda8 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd8c:	8952      	ldrh	r2, [r2, #10]
 800bd8e:	4413      	add	r3, r2
 800bd90:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f006 fa7c 	bl	8012292 <memcpy>
        p->len += oversize_used;
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	895a      	ldrh	r2, [r3, #10]
 800bd9e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bda0:	4413      	add	r3, r2
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d1dd      	bne.n	800bd70 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800bdb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdb6:	891a      	ldrh	r2, [r3, #8]
 800bdb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bdba:	4413      	add	r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdc0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800bdc2:	8a7a      	ldrh	r2, [r7, #18]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800bdca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d018      	beq.n	800be02 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bdd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <tcp_write+0x50c>
 800bdd6:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <tcp_write+0x5a8>)
 800bdd8:	f240 22e1 	movw	r2, #737	; 0x2e1
 800bddc:	492d      	ldr	r1, [pc, #180]	; (800be94 <tcp_write+0x5bc>)
 800bdde:	482a      	ldr	r0, [pc, #168]	; (800be88 <tcp_write+0x5b0>)
 800bde0:	f006 fa6a 	bl	80122b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800bde4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fb f8b0 	bl	8006f50 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bdf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf2:	891a      	ldrh	r2, [r3, #8]
 800bdf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdf6:	891b      	ldrh	r3, [r3, #8]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdfe:	811a      	strh	r2, [r3, #8]
 800be00:	e037      	b.n	800be72 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800be02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be04:	2b00      	cmp	r3, #0
 800be06:	d034      	beq.n	800be72 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800be08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <tcp_write+0x53e>
 800be0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d106      	bne.n	800be24 <tcp_write+0x54c>
 800be16:	4b1a      	ldr	r3, [pc, #104]	; (800be80 <tcp_write+0x5a8>)
 800be18:	f240 22e7 	movw	r2, #743	; 0x2e7
 800be1c:	491e      	ldr	r1, [pc, #120]	; (800be98 <tcp_write+0x5c0>)
 800be1e:	481a      	ldr	r0, [pc, #104]	; (800be88 <tcp_write+0x5b0>)
 800be20:	f006 fa4a 	bl	80122b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800be24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	62bb      	str	r3, [r7, #40]	; 0x28
 800be2a:	e009      	b.n	800be40 <tcp_write+0x568>
      p->tot_len += extendlen;
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	891a      	ldrh	r2, [r3, #8]
 800be30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be32:	4413      	add	r3, r2
 800be34:	b29a      	uxth	r2, r3
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d1f1      	bne.n	800be2c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	891a      	ldrh	r2, [r3, #8]
 800be4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be4e:	4413      	add	r3, r2
 800be50:	b29a      	uxth	r2, r3
 800be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be54:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be58:	895a      	ldrh	r2, [r3, #10]
 800be5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be5c:	4413      	add	r3, r2
 800be5e:	b29a      	uxth	r2, r3
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800be64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be66:	891a      	ldrh	r2, [r3, #8]
 800be68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be6a:	4413      	add	r3, r2
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be70:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800be72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be74:	2b00      	cmp	r3, #0
 800be76:	d111      	bne.n	800be9c <tcp_write+0x5c4>
    pcb->unsent = queue;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be7c:	66da      	str	r2, [r3, #108]	; 0x6c
 800be7e:	e010      	b.n	800bea2 <tcp_write+0x5ca>
 800be80:	08014a24 	.word	0x08014a24
 800be84:	08014cc4 	.word	0x08014cc4
 800be88:	08014a78 	.word	0x08014a78
 800be8c:	08014d04 	.word	0x08014d04
 800be90:	08014d14 	.word	0x08014d14
 800be94:	08014d28 	.word	0x08014d28
 800be98:	08014d60 	.word	0x08014d60
  } else {
    last_unsent->next = queue;
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bea0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bea6:	88fb      	ldrh	r3, [r7, #6]
 800bea8:	441a      	add	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800beb4:	88fb      	ldrh	r3, [r7, #6]
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	b29a      	uxth	r2, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bec6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00e      	beq.n	800bef2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <tcp_write+0x61a>
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d106      	bne.n	800bef2 <tcp_write+0x61a>
 800bee4:	4b2c      	ldr	r3, [pc, #176]	; (800bf98 <tcp_write+0x6c0>)
 800bee6:	f240 3213 	movw	r2, #787	; 0x313
 800beea:	492c      	ldr	r1, [pc, #176]	; (800bf9c <tcp_write+0x6c4>)
 800beec:	482c      	ldr	r0, [pc, #176]	; (800bfa0 <tcp_write+0x6c8>)
 800beee:	f006 f9e3 	bl	80122b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d016      	beq.n	800bf26 <tcp_write+0x64e>
 800bef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d012      	beq.n	800bf26 <tcp_write+0x64e>
 800bf00:	797b      	ldrb	r3, [r7, #5]
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10d      	bne.n	800bf26 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bf0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	899b      	ldrh	r3, [r3, #12]
 800bf10:	b29c      	uxth	r4, r3
 800bf12:	2008      	movs	r0, #8
 800bf14:	f7f9 fc82 	bl	800581c <lwip_htons>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	4322      	orrs	r2, r4
 800bf22:	b292      	uxth	r2, r2
 800bf24:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e031      	b.n	800bf8e <tcp_write+0x6b6>
          goto memerr;
 800bf2a:	bf00      	nop
 800bf2c:	e006      	b.n	800bf3c <tcp_write+0x664>
            goto memerr;
 800bf2e:	bf00      	nop
 800bf30:	e004      	b.n	800bf3c <tcp_write+0x664>
        goto memerr;
 800bf32:	bf00      	nop
 800bf34:	e002      	b.n	800bf3c <tcp_write+0x664>
        goto memerr;
 800bf36:	bf00      	nop
 800bf38:	e000      	b.n	800bf3c <tcp_write+0x664>
      goto memerr;
 800bf3a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	8b5b      	ldrh	r3, [r3, #26]
 800bf40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800bf4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d002      	beq.n	800bf56 <tcp_write+0x67e>
    pbuf_free(concat_p);
 800bf50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bf52:	f7fa ff3b 	bl	8006dcc <pbuf_free>
  }
  if (queue != NULL) {
 800bf56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800bf5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bf5e:	f7fc fb53 	bl	8008608 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d00e      	beq.n	800bf8a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d10a      	bne.n	800bf8a <tcp_write+0x6b2>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d106      	bne.n	800bf8a <tcp_write+0x6b2>
 800bf7c:	4b06      	ldr	r3, [pc, #24]	; (800bf98 <tcp_write+0x6c0>)
 800bf7e:	f44f 724a 	mov.w	r2, #808	; 0x328
 800bf82:	4906      	ldr	r1, [pc, #24]	; (800bf9c <tcp_write+0x6c4>)
 800bf84:	4806      	ldr	r0, [pc, #24]	; (800bfa0 <tcp_write+0x6c8>)
 800bf86:	f006 f997 	bl	80122b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bf8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	375c      	adds	r7, #92	; 0x5c
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd90      	pop	{r4, r7, pc}
 800bf96:	bf00      	nop
 800bf98:	08014a24 	.word	0x08014a24
 800bf9c:	08014d98 	.word	0x08014d98
 800bfa0:	08014a78 	.word	0x08014a78

0800bfa4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bfa4:	b590      	push	{r4, r7, lr}
 800bfa6:	b08b      	sub	sp, #44	; 0x2c
 800bfa8:	af02      	add	r7, sp, #8
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <tcp_split_unsent_seg+0x2c>
 800bfc2:	4b95      	ldr	r3, [pc, #596]	; (800c218 <tcp_split_unsent_seg+0x274>)
 800bfc4:	f240 324b 	movw	r2, #843	; 0x34b
 800bfc8:	4994      	ldr	r1, [pc, #592]	; (800c21c <tcp_split_unsent_seg+0x278>)
 800bfca:	4895      	ldr	r0, [pc, #596]	; (800c220 <tcp_split_unsent_seg+0x27c>)
 800bfcc:	f006 f974 	bl	80122b8 <iprintf>

  useg = pcb->unsent;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfd4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe0:	e116      	b.n	800c210 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bfe2:	887b      	ldrh	r3, [r7, #2]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d109      	bne.n	800bffc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bfe8:	4b8b      	ldr	r3, [pc, #556]	; (800c218 <tcp_split_unsent_seg+0x274>)
 800bfea:	f240 3253 	movw	r2, #851	; 0x353
 800bfee:	498d      	ldr	r1, [pc, #564]	; (800c224 <tcp_split_unsent_seg+0x280>)
 800bff0:	488b      	ldr	r0, [pc, #556]	; (800c220 <tcp_split_unsent_seg+0x27c>)
 800bff2:	f006 f961 	bl	80122b8 <iprintf>
    return ERR_VAL;
 800bff6:	f06f 0305 	mvn.w	r3, #5
 800bffa:	e109      	b.n	800c210 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	891b      	ldrh	r3, [r3, #8]
 800c000:	887a      	ldrh	r2, [r7, #2]
 800c002:	429a      	cmp	r2, r3
 800c004:	d301      	bcc.n	800c00a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	e102      	b.n	800c210 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c00e:	887a      	ldrh	r2, [r7, #2]
 800c010:	429a      	cmp	r2, r3
 800c012:	d906      	bls.n	800c022 <tcp_split_unsent_seg+0x7e>
 800c014:	4b80      	ldr	r3, [pc, #512]	; (800c218 <tcp_split_unsent_seg+0x274>)
 800c016:	f240 325b 	movw	r2, #859	; 0x35b
 800c01a:	4983      	ldr	r1, [pc, #524]	; (800c228 <tcp_split_unsent_seg+0x284>)
 800c01c:	4880      	ldr	r0, [pc, #512]	; (800c220 <tcp_split_unsent_seg+0x27c>)
 800c01e:	f006 f94b 	bl	80122b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	891b      	ldrh	r3, [r3, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d106      	bne.n	800c038 <tcp_split_unsent_seg+0x94>
 800c02a:	4b7b      	ldr	r3, [pc, #492]	; (800c218 <tcp_split_unsent_seg+0x274>)
 800c02c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c030:	497e      	ldr	r1, [pc, #504]	; (800c22c <tcp_split_unsent_seg+0x288>)
 800c032:	487b      	ldr	r0, [pc, #492]	; (800c220 <tcp_split_unsent_seg+0x27c>)
 800c034:	f006 f940 	bl	80122b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	7a9b      	ldrb	r3, [r3, #10]
 800c03c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	b2db      	uxtb	r3, r3
 800c044:	f003 0304 	and.w	r3, r3, #4
 800c048:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	891a      	ldrh	r2, [r3, #8]
 800c04e:	887b      	ldrh	r3, [r7, #2]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c054:	7bbb      	ldrb	r3, [r7, #14]
 800c056:	b29a      	uxth	r2, r3
 800c058:	89bb      	ldrh	r3, [r7, #12]
 800c05a:	4413      	add	r3, r2
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c062:	4619      	mov	r1, r3
 800c064:	2036      	movs	r0, #54	; 0x36
 800c066:	f7fa fbd1 	bl	800680c <pbuf_alloc>
 800c06a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 80b7 	beq.w	800c1e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	891a      	ldrh	r2, [r3, #8]
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	891b      	ldrh	r3, [r3, #8]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	b29a      	uxth	r2, r3
 800c082:	887b      	ldrh	r3, [r7, #2]
 800c084:	4413      	add	r3, r2
 800c086:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	6858      	ldr	r0, [r3, #4]
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	685a      	ldr	r2, [r3, #4]
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	18d1      	adds	r1, r2, r3
 800c094:	897b      	ldrh	r3, [r7, #10]
 800c096:	89ba      	ldrh	r2, [r7, #12]
 800c098:	f7fb f892 	bl	80071c0 <pbuf_copy_partial>
 800c09c:	4603      	mov	r3, r0
 800c09e:	461a      	mov	r2, r3
 800c0a0:	89bb      	ldrh	r3, [r7, #12]
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	f040 809f 	bne.w	800c1e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	899b      	ldrh	r3, [r3, #12]
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7f9 fbb3 	bl	800581c <lwip_htons>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c0c4:	7efb      	ldrb	r3, [r7, #27]
 800c0c6:	f003 0308 	and.w	r3, r3, #8
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d007      	beq.n	800c0de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c0ce:	7efb      	ldrb	r3, [r7, #27]
 800c0d0:	f023 0308 	bic.w	r3, r3, #8
 800c0d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c0d6:	7ebb      	ldrb	r3, [r7, #26]
 800c0d8:	f043 0308 	orr.w	r3, r3, #8
 800c0dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c0de:	7efb      	ldrb	r3, [r7, #27]
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d007      	beq.n	800c0f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c0e8:	7efb      	ldrb	r3, [r7, #27]
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c0f0:	7ebb      	ldrb	r3, [r7, #26]
 800c0f2:	f043 0301 	orr.w	r3, r3, #1
 800c0f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7f9 fba1 	bl	8005846 <lwip_htonl>
 800c104:	4602      	mov	r2, r0
 800c106:	887b      	ldrh	r3, [r7, #2]
 800c108:	18d1      	adds	r1, r2, r3
 800c10a:	7eba      	ldrb	r2, [r7, #26]
 800c10c:	7bfb      	ldrb	r3, [r7, #15]
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	460b      	mov	r3, r1
 800c112:	6939      	ldr	r1, [r7, #16]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f7ff fa4d 	bl	800b5b4 <tcp_create_segment>
 800c11a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d063      	beq.n	800c1ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	4618      	mov	r0, r3
 800c128:	f7fa fed8 	bl	8006edc <pbuf_clen>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c136:	1a9b      	subs	r3, r3, r2
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	6858      	ldr	r0, [r3, #4]
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	891a      	ldrh	r2, [r3, #8]
 800c14a:	89bb      	ldrh	r3, [r7, #12]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	b29b      	uxth	r3, r3
 800c150:	4619      	mov	r1, r3
 800c152:	f7fa fcb5 	bl	8006ac0 <pbuf_realloc>
  useg->len -= remainder;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	891a      	ldrh	r2, [r3, #8]
 800c15a:	89bb      	ldrh	r3, [r7, #12]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	b29a      	uxth	r2, r3
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	899b      	ldrh	r3, [r3, #12]
 800c16a:	b29c      	uxth	r4, r3
 800c16c:	7efb      	ldrb	r3, [r7, #27]
 800c16e:	b29b      	uxth	r3, r3
 800c170:	4618      	mov	r0, r3
 800c172:	f7f9 fb53 	bl	800581c <lwip_htons>
 800c176:	4603      	mov	r3, r0
 800c178:	461a      	mov	r2, r3
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	4322      	orrs	r2, r4
 800c180:	b292      	uxth	r2, r2
 800c182:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fa fea7 	bl	8006edc <pbuf_clen>
 800c18e:	4603      	mov	r3, r0
 800c190:	461a      	mov	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c198:	4413      	add	r3, r2
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fa fe98 	bl	8006edc <pbuf_clen>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c1b6:	4413      	add	r3, r2
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d103      	bne.n	800c1de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	e016      	b.n	800c210 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c1e2:	bf00      	nop
 800c1e4:	e002      	b.n	800c1ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1e6:	bf00      	nop
 800c1e8:	e000      	b.n	800c1ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d006      	beq.n	800c200 <tcp_split_unsent_seg+0x25c>
 800c1f2:	4b09      	ldr	r3, [pc, #36]	; (800c218 <tcp_split_unsent_seg+0x274>)
 800c1f4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c1f8:	490d      	ldr	r1, [pc, #52]	; (800c230 <tcp_split_unsent_seg+0x28c>)
 800c1fa:	4809      	ldr	r0, [pc, #36]	; (800c220 <tcp_split_unsent_seg+0x27c>)
 800c1fc:	f006 f85c 	bl	80122b8 <iprintf>
  if (p != NULL) {
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d002      	beq.n	800c20c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c206:	6938      	ldr	r0, [r7, #16]
 800c208:	f7fa fde0 	bl	8006dcc <pbuf_free>
  }

  return ERR_MEM;
 800c20c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c210:	4618      	mov	r0, r3
 800c212:	3724      	adds	r7, #36	; 0x24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd90      	pop	{r4, r7, pc}
 800c218:	08014a24 	.word	0x08014a24
 800c21c:	08014db8 	.word	0x08014db8
 800c220:	08014a78 	.word	0x08014a78
 800c224:	08014ddc 	.word	0x08014ddc
 800c228:	08014e00 	.word	0x08014e00
 800c22c:	08014e10 	.word	0x08014e10
 800c230:	08014e20 	.word	0x08014e20

0800c234 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c234:	b590      	push	{r4, r7, lr}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <tcp_send_fin+0x1c>
 800c242:	4b21      	ldr	r3, [pc, #132]	; (800c2c8 <tcp_send_fin+0x94>)
 800c244:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c248:	4920      	ldr	r1, [pc, #128]	; (800c2cc <tcp_send_fin+0x98>)
 800c24a:	4821      	ldr	r0, [pc, #132]	; (800c2d0 <tcp_send_fin+0x9c>)
 800c24c:	f006 f834 	bl	80122b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d02e      	beq.n	800c2b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	e002      	b.n	800c266 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1f8      	bne.n	800c260 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	899b      	ldrh	r3, [r3, #12]
 800c274:	b29b      	uxth	r3, r3
 800c276:	4618      	mov	r0, r3
 800c278:	f7f9 fad0 	bl	800581c <lwip_htons>
 800c27c:	4603      	mov	r3, r0
 800c27e:	b2db      	uxtb	r3, r3
 800c280:	f003 0307 	and.w	r3, r3, #7
 800c284:	2b00      	cmp	r3, #0
 800c286:	d116      	bne.n	800c2b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	899b      	ldrh	r3, [r3, #12]
 800c28e:	b29c      	uxth	r4, r3
 800c290:	2001      	movs	r0, #1
 800c292:	f7f9 fac3 	bl	800581c <lwip_htons>
 800c296:	4603      	mov	r3, r0
 800c298:	461a      	mov	r2, r3
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	4322      	orrs	r2, r4
 800c2a0:	b292      	uxth	r2, r2
 800c2a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	8b5b      	ldrh	r3, [r3, #26]
 800c2a8:	f043 0320 	orr.w	r3, r3, #32
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	e004      	b.n	800c2c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f80b 	bl	800c2d4 <tcp_enqueue_flags>
 800c2be:	4603      	mov	r3, r0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd90      	pop	{r4, r7, pc}
 800c2c8:	08014a24 	.word	0x08014a24
 800c2cc:	08014e2c 	.word	0x08014e2c
 800c2d0:	08014a78 	.word	0x08014a78

0800c2d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08a      	sub	sp, #40	; 0x28
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2e8:	78fb      	ldrb	r3, [r7, #3]
 800c2ea:	f003 0303 	and.w	r3, r3, #3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d106      	bne.n	800c300 <tcp_enqueue_flags+0x2c>
 800c2f2:	4b67      	ldr	r3, [pc, #412]	; (800c490 <tcp_enqueue_flags+0x1bc>)
 800c2f4:	f240 4212 	movw	r2, #1042	; 0x412
 800c2f8:	4966      	ldr	r1, [pc, #408]	; (800c494 <tcp_enqueue_flags+0x1c0>)
 800c2fa:	4867      	ldr	r0, [pc, #412]	; (800c498 <tcp_enqueue_flags+0x1c4>)
 800c2fc:	f005 ffdc 	bl	80122b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d106      	bne.n	800c314 <tcp_enqueue_flags+0x40>
 800c306:	4b62      	ldr	r3, [pc, #392]	; (800c490 <tcp_enqueue_flags+0x1bc>)
 800c308:	f240 4213 	movw	r2, #1043	; 0x413
 800c30c:	4963      	ldr	r1, [pc, #396]	; (800c49c <tcp_enqueue_flags+0x1c8>)
 800c30e:	4862      	ldr	r0, [pc, #392]	; (800c498 <tcp_enqueue_flags+0x1c4>)
 800c310:	f005 ffd2 	bl	80122b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	f003 0302 	and.w	r3, r3, #2
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d001      	beq.n	800c322 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c31e:	2301      	movs	r3, #1
 800c320:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c322:	7ffb      	ldrb	r3, [r7, #31]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	b2db      	uxtb	r3, r3
 800c328:	f003 0304 	and.w	r3, r3, #4
 800c32c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	b29b      	uxth	r3, r3
 800c332:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c336:	4619      	mov	r1, r3
 800c338:	2036      	movs	r0, #54	; 0x36
 800c33a:	f7fa fa67 	bl	800680c <pbuf_alloc>
 800c33e:	6138      	str	r0, [r7, #16]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d109      	bne.n	800c35a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	8b5b      	ldrh	r3, [r3, #26]
 800c34a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c34e:	b29a      	uxth	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c354:	f04f 33ff 	mov.w	r3, #4294967295
 800c358:	e095      	b.n	800c486 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	895a      	ldrh	r2, [r3, #10]
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	b29b      	uxth	r3, r3
 800c362:	429a      	cmp	r2, r3
 800c364:	d206      	bcs.n	800c374 <tcp_enqueue_flags+0xa0>
 800c366:	4b4a      	ldr	r3, [pc, #296]	; (800c490 <tcp_enqueue_flags+0x1bc>)
 800c368:	f240 423a 	movw	r2, #1082	; 0x43a
 800c36c:	494c      	ldr	r1, [pc, #304]	; (800c4a0 <tcp_enqueue_flags+0x1cc>)
 800c36e:	484a      	ldr	r0, [pc, #296]	; (800c498 <tcp_enqueue_flags+0x1c4>)
 800c370:	f005 ffa2 	bl	80122b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c378:	78fa      	ldrb	r2, [r7, #3]
 800c37a:	7ffb      	ldrb	r3, [r7, #31]
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	460b      	mov	r3, r1
 800c380:	6939      	ldr	r1, [r7, #16]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff f916 	bl	800b5b4 <tcp_create_segment>
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d109      	bne.n	800c3a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8b5b      	ldrh	r3, [r3, #26]
 800c394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c398:	b29a      	uxth	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c39e:	f04f 33ff 	mov.w	r3, #4294967295
 800c3a2:	e070      	b.n	800c486 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f003 0303 	and.w	r3, r3, #3
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d006      	beq.n	800c3be <tcp_enqueue_flags+0xea>
 800c3b0:	4b37      	ldr	r3, [pc, #220]	; (800c490 <tcp_enqueue_flags+0x1bc>)
 800c3b2:	f240 4242 	movw	r2, #1090	; 0x442
 800c3b6:	493b      	ldr	r1, [pc, #236]	; (800c4a4 <tcp_enqueue_flags+0x1d0>)
 800c3b8:	4837      	ldr	r0, [pc, #220]	; (800c498 <tcp_enqueue_flags+0x1c4>)
 800c3ba:	f005 ff7d 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	891b      	ldrh	r3, [r3, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d006      	beq.n	800c3d4 <tcp_enqueue_flags+0x100>
 800c3c6:	4b32      	ldr	r3, [pc, #200]	; (800c490 <tcp_enqueue_flags+0x1bc>)
 800c3c8:	f240 4243 	movw	r2, #1091	; 0x443
 800c3cc:	4936      	ldr	r1, [pc, #216]	; (800c4a8 <tcp_enqueue_flags+0x1d4>)
 800c3ce:	4832      	ldr	r0, [pc, #200]	; (800c498 <tcp_enqueue_flags+0x1c4>)
 800c3d0:	f005 ff72 	bl	80122b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68fa      	ldr	r2, [r7, #12]
 800c3e0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c3e2:	e00d      	b.n	800c400 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3e8:	61bb      	str	r3, [r7, #24]
 800c3ea:	e002      	b.n	800c3f2 <tcp_enqueue_flags+0x11e>
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	61bb      	str	r3, [r7, #24]
 800c3f2:	69bb      	ldr	r3, [r7, #24]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1f8      	bne.n	800c3ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2200      	movs	r2, #0
 800c404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c408:	78fb      	ldrb	r3, [r7, #3]
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d104      	bne.n	800c41c <tcp_enqueue_flags+0x148>
 800c412:	78fb      	ldrb	r3, [r7, #3]
 800c414:	f003 0301 	and.w	r3, r3, #1
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c426:	78fb      	ldrb	r3, [r7, #3]
 800c428:	f003 0301 	and.w	r3, r3, #1
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d006      	beq.n	800c43e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	8b5b      	ldrh	r3, [r3, #26]
 800c434:	f043 0320 	orr.w	r3, r3, #32
 800c438:	b29a      	uxth	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f7fa fd4a 	bl	8006edc <pbuf_clen>
 800c448:	4603      	mov	r3, r0
 800c44a:	461a      	mov	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c452:	4413      	add	r3, r2
 800c454:	b29a      	uxth	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00e      	beq.n	800c484 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <tcp_enqueue_flags+0x1b0>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c472:	2b00      	cmp	r3, #0
 800c474:	d106      	bne.n	800c484 <tcp_enqueue_flags+0x1b0>
 800c476:	4b06      	ldr	r3, [pc, #24]	; (800c490 <tcp_enqueue_flags+0x1bc>)
 800c478:	f240 4266 	movw	r2, #1126	; 0x466
 800c47c:	490b      	ldr	r1, [pc, #44]	; (800c4ac <tcp_enqueue_flags+0x1d8>)
 800c47e:	4806      	ldr	r0, [pc, #24]	; (800c498 <tcp_enqueue_flags+0x1c4>)
 800c480:	f005 ff1a 	bl	80122b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3720      	adds	r7, #32
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	08014a24 	.word	0x08014a24
 800c494:	08014e48 	.word	0x08014e48
 800c498:	08014a78 	.word	0x08014a78
 800c49c:	08014ea0 	.word	0x08014ea0
 800c4a0:	08014ec0 	.word	0x08014ec0
 800c4a4:	08014efc 	.word	0x08014efc
 800c4a8:	08014f14 	.word	0x08014f14
 800c4ac:	08014f40 	.word	0x08014f40

0800c4b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c4b0:	b5b0      	push	{r4, r5, r7, lr}
 800c4b2:	b08a      	sub	sp, #40	; 0x28
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d106      	bne.n	800c4cc <tcp_output+0x1c>
 800c4be:	4ba0      	ldr	r3, [pc, #640]	; (800c740 <tcp_output+0x290>)
 800c4c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c4c4:	499f      	ldr	r1, [pc, #636]	; (800c744 <tcp_output+0x294>)
 800c4c6:	48a0      	ldr	r0, [pc, #640]	; (800c748 <tcp_output+0x298>)
 800c4c8:	f005 fef6 	bl	80122b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	7d1b      	ldrb	r3, [r3, #20]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d106      	bne.n	800c4e2 <tcp_output+0x32>
 800c4d4:	4b9a      	ldr	r3, [pc, #616]	; (800c740 <tcp_output+0x290>)
 800c4d6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800c4da:	499c      	ldr	r1, [pc, #624]	; (800c74c <tcp_output+0x29c>)
 800c4dc:	489a      	ldr	r0, [pc, #616]	; (800c748 <tcp_output+0x298>)
 800c4de:	f005 feeb 	bl	80122b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c4e2:	4b9b      	ldr	r3, [pc, #620]	; (800c750 <tcp_output+0x2a0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d101      	bne.n	800c4f0 <tcp_output+0x40>
    return ERR_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	e1d2      	b.n	800c896 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d203      	bcs.n	800c508 <tcp_output+0x58>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c506:	e002      	b.n	800c50e <tcp_output+0x5e>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c50e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c514:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10b      	bne.n	800c534 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	8b5b      	ldrh	r3, [r3, #26]
 800c520:	f003 0302 	and.w	r3, r3, #2
 800c524:	2b00      	cmp	r3, #0
 800c526:	f000 81a9 	beq.w	800c87c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 fdd8 	bl	800d0e0 <tcp_send_empty_ack>
 800c530:	4603      	mov	r3, r0
 800c532:	e1b0      	b.n	800c896 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	3304      	adds	r3, #4
 800c53a:	461a      	mov	r2, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f7ff f81d 	bl	800b57c <tcp_route>
 800c542:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d102      	bne.n	800c550 <tcp_output+0xa0>
    return ERR_RTE;
 800c54a:	f06f 0303 	mvn.w	r3, #3
 800c54e:	e1a2      	b.n	800c896 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d003      	beq.n	800c55e <tcp_output+0xae>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d111      	bne.n	800c582 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <tcp_output+0xba>
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	3304      	adds	r3, #4
 800c568:	e000      	b.n	800c56c <tcp_output+0xbc>
 800c56a:	2300      	movs	r3, #0
 800c56c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <tcp_output+0xca>
      return ERR_RTE;
 800c574:	f06f 0303 	mvn.w	r3, #3
 800c578:	e18d      	b.n	800c896 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	f7f9 f95c 	bl	8005846 <lwip_htonl>
 800c58e:	4602      	mov	r2, r0
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c598:	8912      	ldrh	r2, [r2, #8]
 800c59a:	4413      	add	r3, r2
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d227      	bcs.n	800c5f2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d114      	bne.n	800c5da <tcp_output+0x12a>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d110      	bne.n	800c5da <tcp_output+0x12a>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d10b      	bne.n	800c5da <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	8b5b      	ldrh	r3, [r3, #26]
 800c5de:	f003 0302 	and.w	r3, r3, #2
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 814c 	beq.w	800c880 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fd79 	bl	800d0e0 <tcp_send_empty_ack>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	e151      	b.n	800c896 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5fe:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c600:	6a3b      	ldr	r3, [r7, #32]
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 811b 	beq.w	800c83e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800c608:	e002      	b.n	800c610 <tcp_output+0x160>
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	623b      	str	r3, [r7, #32]
 800c610:	6a3b      	ldr	r3, [r7, #32]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1f8      	bne.n	800c60a <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c618:	e111      	b.n	800c83e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	899b      	ldrh	r3, [r3, #12]
 800c620:	b29b      	uxth	r3, r3
 800c622:	4618      	mov	r0, r3
 800c624:	f7f9 f8fa 	bl	800581c <lwip_htons>
 800c628:	4603      	mov	r3, r0
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	f003 0304 	and.w	r3, r3, #4
 800c630:	2b00      	cmp	r3, #0
 800c632:	d006      	beq.n	800c642 <tcp_output+0x192>
 800c634:	4b42      	ldr	r3, [pc, #264]	; (800c740 <tcp_output+0x290>)
 800c636:	f240 5237 	movw	r2, #1335	; 0x537
 800c63a:	4946      	ldr	r1, [pc, #280]	; (800c754 <tcp_output+0x2a4>)
 800c63c:	4842      	ldr	r0, [pc, #264]	; (800c748 <tcp_output+0x298>)
 800c63e:	f005 fe3b 	bl	80122b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c646:	2b00      	cmp	r3, #0
 800c648:	d01f      	beq.n	800c68a <tcp_output+0x1da>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8b5b      	ldrh	r3, [r3, #26]
 800c64e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c652:	2b00      	cmp	r3, #0
 800c654:	d119      	bne.n	800c68a <tcp_output+0x1da>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00b      	beq.n	800c676 <tcp_output+0x1c6>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d110      	bne.n	800c68a <tcp_output+0x1da>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c66c:	891a      	ldrh	r2, [r3, #8]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c672:	429a      	cmp	r2, r3
 800c674:	d209      	bcs.n	800c68a <tcp_output+0x1da>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d004      	beq.n	800c68a <tcp_output+0x1da>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c686:	2b08      	cmp	r3, #8
 800c688:	d901      	bls.n	800c68e <tcp_output+0x1de>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <tcp_output+0x1e0>
 800c68e:	2300      	movs	r3, #0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d106      	bne.n	800c6a2 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	8b5b      	ldrh	r3, [r3, #26]
 800c698:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f000 80e3 	beq.w	800c868 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	7d1b      	ldrb	r3, [r3, #20]
 800c6a6:	2b02      	cmp	r3, #2
 800c6a8:	d00d      	beq.n	800c6c6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	899b      	ldrh	r3, [r3, #12]
 800c6b0:	b29c      	uxth	r4, r3
 800c6b2:	2010      	movs	r0, #16
 800c6b4:	f7f9 f8b2 	bl	800581c <lwip_htons>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	4322      	orrs	r2, r4
 800c6c2:	b292      	uxth	r2, r2
 800c6c4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6cc:	f000 f908 	bl	800c8e0 <tcp_output_segment>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d009      	beq.n	800c6f0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	8b5b      	ldrh	r3, [r3, #26]
 800c6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	835a      	strh	r2, [r3, #26]
      return err;
 800c6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ee:	e0d2      	b.n	800c896 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7d1b      	ldrb	r3, [r3, #20]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d006      	beq.n	800c70e <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	8b5b      	ldrh	r3, [r3, #26]
 800c704:	f023 0303 	bic.w	r3, r3, #3
 800c708:	b29a      	uxth	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	4618      	mov	r0, r3
 800c716:	f7f9 f896 	bl	8005846 <lwip_htonl>
 800c71a:	4604      	mov	r4, r0
 800c71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71e:	891b      	ldrh	r3, [r3, #8]
 800c720:	461d      	mov	r5, r3
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	899b      	ldrh	r3, [r3, #12]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f9 f876 	bl	800581c <lwip_htons>
 800c730:	4603      	mov	r3, r0
 800c732:	b2db      	uxtb	r3, r3
 800c734:	f003 0303 	and.w	r3, r3, #3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d00d      	beq.n	800c758 <tcp_output+0x2a8>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e00c      	b.n	800c75a <tcp_output+0x2aa>
 800c740:	08014a24 	.word	0x08014a24
 800c744:	08014f68 	.word	0x08014f68
 800c748:	08014a78 	.word	0x08014a78
 800c74c:	08014f80 	.word	0x08014f80
 800c750:	20007188 	.word	0x20007188
 800c754:	08014fa8 	.word	0x08014fa8
 800c758:	2300      	movs	r3, #0
 800c75a:	442b      	add	r3, r5
 800c75c:	4423      	add	r3, r4
 800c75e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	da02      	bge.n	800c772 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	891b      	ldrh	r3, [r3, #8]
 800c776:	461c      	mov	r4, r3
 800c778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	899b      	ldrh	r3, [r3, #12]
 800c77e:	b29b      	uxth	r3, r3
 800c780:	4618      	mov	r0, r3
 800c782:	f7f9 f84b 	bl	800581c <lwip_htons>
 800c786:	4603      	mov	r3, r0
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d001      	beq.n	800c796 <tcp_output+0x2e6>
 800c792:	2301      	movs	r3, #1
 800c794:	e000      	b.n	800c798 <tcp_output+0x2e8>
 800c796:	2300      	movs	r3, #0
 800c798:	4423      	add	r3, r4
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d049      	beq.n	800c832 <tcp_output+0x382>
      seg->next = NULL;
 800c79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d105      	bne.n	800c7b8 <tcp_output+0x308>
        pcb->unacked = seg;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7b0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	623b      	str	r3, [r7, #32]
 800c7b6:	e03f      	b.n	800c838 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7f9 f841 	bl	8005846 <lwip_htonl>
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f7f9 f83a 	bl	8005846 <lwip_htonl>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	1ae3      	subs	r3, r4, r3
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	da24      	bge.n	800c824 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3370      	adds	r3, #112	; 0x70
 800c7de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7e0:	e002      	b.n	800c7e8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d011      	beq.n	800c814 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7f9 f824 	bl	8005846 <lwip_htonl>
 800c7fe:	4604      	mov	r4, r0
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	4618      	mov	r0, r3
 800c808:	f7f9 f81d 	bl	8005846 <lwip_htonl>
 800c80c:	4603      	mov	r3, r0
 800c80e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c810:	2b00      	cmp	r3, #0
 800c812:	dbe6      	blt.n	800c7e2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c81c:	69fb      	ldr	r3, [r7, #28]
 800c81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	e009      	b.n	800c838 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c828:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	623b      	str	r3, [r7, #32]
 800c830:	e002      	b.n	800c838 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c832:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c834:	f7fb fefc 	bl	8008630 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	d012      	beq.n	800c86a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7f8 fffb 	bl	8005846 <lwip_htonl>
 800c850:	4602      	mov	r2, r0
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c856:	1ad3      	subs	r3, r2, r3
 800c858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c85a:	8912      	ldrh	r2, [r2, #8]
 800c85c:	4413      	add	r3, r2
  while (seg != NULL &&
 800c85e:	69ba      	ldr	r2, [r7, #24]
 800c860:	429a      	cmp	r2, r3
 800c862:	f4bf aeda 	bcs.w	800c61a <tcp_output+0x16a>
 800c866:	e000      	b.n	800c86a <tcp_output+0x3ba>
      break;
 800c868:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d108      	bne.n	800c884 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c87a:	e004      	b.n	800c886 <tcp_output+0x3d6>
    goto output_done;
 800c87c:	bf00      	nop
 800c87e:	e002      	b.n	800c886 <tcp_output+0x3d6>
    goto output_done;
 800c880:	bf00      	nop
 800c882:	e000      	b.n	800c886 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c884:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8b5b      	ldrh	r3, [r3, #26]
 800c88a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c88e:	b29a      	uxth	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3728      	adds	r7, #40	; 0x28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bdb0      	pop	{r4, r5, r7, pc}
 800c89e:	bf00      	nop

0800c8a0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <tcp_output_segment_busy+0x1c>
 800c8ae:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <tcp_output_segment_busy+0x34>)
 800c8b0:	f240 529a 	movw	r2, #1434	; 0x59a
 800c8b4:	4908      	ldr	r1, [pc, #32]	; (800c8d8 <tcp_output_segment_busy+0x38>)
 800c8b6:	4809      	ldr	r0, [pc, #36]	; (800c8dc <tcp_output_segment_busy+0x3c>)
 800c8b8:	f005 fcfe 	bl	80122b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	7b9b      	ldrb	r3, [r3, #14]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d001      	beq.n	800c8ca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e000      	b.n	800c8cc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	08014a24 	.word	0x08014a24
 800c8d8:	08014fc0 	.word	0x08014fc0
 800c8dc:	08014a78 	.word	0x08014a78

0800c8e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c8e0:	b5b0      	push	{r4, r5, r7, lr}
 800c8e2:	b08c      	sub	sp, #48	; 0x30
 800c8e4:	af04      	add	r7, sp, #16
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <tcp_output_segment+0x20>
 800c8f2:	4b64      	ldr	r3, [pc, #400]	; (800ca84 <tcp_output_segment+0x1a4>)
 800c8f4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c8f8:	4963      	ldr	r1, [pc, #396]	; (800ca88 <tcp_output_segment+0x1a8>)
 800c8fa:	4864      	ldr	r0, [pc, #400]	; (800ca8c <tcp_output_segment+0x1ac>)
 800c8fc:	f005 fcdc 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d106      	bne.n	800c914 <tcp_output_segment+0x34>
 800c906:	4b5f      	ldr	r3, [pc, #380]	; (800ca84 <tcp_output_segment+0x1a4>)
 800c908:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c90c:	4960      	ldr	r1, [pc, #384]	; (800ca90 <tcp_output_segment+0x1b0>)
 800c90e:	485f      	ldr	r0, [pc, #380]	; (800ca8c <tcp_output_segment+0x1ac>)
 800c910:	f005 fcd2 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d106      	bne.n	800c928 <tcp_output_segment+0x48>
 800c91a:	4b5a      	ldr	r3, [pc, #360]	; (800ca84 <tcp_output_segment+0x1a4>)
 800c91c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c920:	495c      	ldr	r1, [pc, #368]	; (800ca94 <tcp_output_segment+0x1b4>)
 800c922:	485a      	ldr	r0, [pc, #360]	; (800ca8c <tcp_output_segment+0x1ac>)
 800c924:	f005 fcc8 	bl	80122b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f7ff ffb9 	bl	800c8a0 <tcp_output_segment_busy>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	e0a0      	b.n	800ca7a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	68dc      	ldr	r4, [r3, #12]
 800c940:	4610      	mov	r0, r2
 800c942:	f7f8 ff80 	bl	8005846 <lwip_htonl>
 800c946:	4603      	mov	r3, r0
 800c948:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	68dc      	ldr	r4, [r3, #12]
 800c952:	4610      	mov	r0, r2
 800c954:	f7f8 ff62 	bl	800581c <lwip_htons>
 800c958:	4603      	mov	r3, r0
 800c95a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c960:	68ba      	ldr	r2, [r7, #8]
 800c962:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c964:	441a      	add	r2, r3
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	3314      	adds	r3, #20
 800c970:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	7a9b      	ldrb	r3, [r3, #10]
 800c976:	f003 0301 	and.w	r3, r3, #1
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d015      	beq.n	800c9aa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	3304      	adds	r3, #4
 800c982:	461a      	mov	r2, r3
 800c984:	6879      	ldr	r1, [r7, #4]
 800c986:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c98a:	f7fc fa33 	bl	8008df4 <tcp_eff_send_mss_netif>
 800c98e:	4603      	mov	r3, r0
 800c990:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c992:	8b7b      	ldrh	r3, [r7, #26]
 800c994:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c998:	4618      	mov	r0, r3
 800c99a:	f7f8 ff54 	bl	8005846 <lwip_htonl>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	da02      	bge.n	800c9ba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10c      	bne.n	800c9dc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c9c2:	4b35      	ldr	r3, [pc, #212]	; (800ca98 <tcp_output_segment+0x1b8>)
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7f8 ff38 	bl	8005846 <lwip_htonl>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	8959      	ldrh	r1, [r3, #10]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	8b3a      	ldrh	r2, [r7, #24]
 800c9f8:	1a8a      	subs	r2, r1, r2
 800c9fa:	b292      	uxth	r2, r2
 800c9fc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	8919      	ldrh	r1, [r3, #8]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	8b3a      	ldrh	r2, [r7, #24]
 800ca0a:	1a8a      	subs	r2, r1, r2
 800ca0c:	b292      	uxth	r2, r2
 800ca0e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	68d2      	ldr	r2, [r2, #12]
 800ca18:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	741a      	strb	r2, [r3, #16]
 800ca22:	2200      	movs	r2, #0
 800ca24:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f103 0214 	add.w	r2, r3, #20
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	7a9b      	ldrb	r3, [r3, #10]
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	f003 0304 	and.w	r3, r3, #4
 800ca38:	4413      	add	r3, r2
 800ca3a:	69fa      	ldr	r2, [r7, #28]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d006      	beq.n	800ca4e <tcp_output_segment+0x16e>
 800ca40:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <tcp_output_segment+0x1a4>)
 800ca42:	f240 621c 	movw	r2, #1564	; 0x61c
 800ca46:	4915      	ldr	r1, [pc, #84]	; (800ca9c <tcp_output_segment+0x1bc>)
 800ca48:	4810      	ldr	r0, [pc, #64]	; (800ca8c <tcp_output_segment+0x1ac>)
 800ca4a:	f005 fc35 	bl	80122b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6858      	ldr	r0, [r3, #4]
 800ca52:	68b9      	ldr	r1, [r7, #8]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	1d1c      	adds	r4, r3, #4
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	7add      	ldrb	r5, [r3, #11]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	7a9b      	ldrb	r3, [r3, #10]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	9202      	str	r2, [sp, #8]
 800ca64:	2206      	movs	r2, #6
 800ca66:	9201      	str	r2, [sp, #4]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	462b      	mov	r3, r5
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	f004 fbb9 	bl	80111e4 <ip4_output_if>
 800ca72:	4603      	mov	r3, r0
 800ca74:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ca76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3720      	adds	r7, #32
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bdb0      	pop	{r4, r5, r7, pc}
 800ca82:	bf00      	nop
 800ca84:	08014a24 	.word	0x08014a24
 800ca88:	08014fe8 	.word	0x08014fe8
 800ca8c:	08014a78 	.word	0x08014a78
 800ca90:	08015008 	.word	0x08015008
 800ca94:	08015028 	.word	0x08015028
 800ca98:	20007178 	.word	0x20007178
 800ca9c:	0801504c 	.word	0x0801504c

0800caa0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800caa0:	b5b0      	push	{r4, r5, r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <tcp_rexmit_rto_prepare+0x1c>
 800caae:	4b31      	ldr	r3, [pc, #196]	; (800cb74 <tcp_rexmit_rto_prepare+0xd4>)
 800cab0:	f240 6263 	movw	r2, #1635	; 0x663
 800cab4:	4930      	ldr	r1, [pc, #192]	; (800cb78 <tcp_rexmit_rto_prepare+0xd8>)
 800cab6:	4831      	ldr	r0, [pc, #196]	; (800cb7c <tcp_rexmit_rto_prepare+0xdc>)
 800cab8:	f005 fbfe 	bl	80122b8 <iprintf>

  if (pcb->unacked == NULL) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cac4:	f06f 0305 	mvn.w	r3, #5
 800cac8:	e050      	b.n	800cb6c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e00b      	b.n	800caea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	f7ff fee4 	bl	800c8a0 <tcp_output_segment_busy>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cade:	f06f 0305 	mvn.w	r3, #5
 800cae2:	e043      	b.n	800cb6c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1ef      	bne.n	800cad2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff fed4 	bl	800c8a0 <tcp_output_segment_busy>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d002      	beq.n	800cb04 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cafe:	f06f 0305 	mvn.w	r3, #5
 800cb02:	e033      	b.n	800cb6c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2200      	movs	r2, #0
 800cb18:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	8b5b      	ldrh	r3, [r3, #26]
 800cb1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7f8 fe89 	bl	8005846 <lwip_htonl>
 800cb34:	4604      	mov	r4, r0
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	891b      	ldrh	r3, [r3, #8]
 800cb3a:	461d      	mov	r5, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	899b      	ldrh	r3, [r3, #12]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7f8 fe69 	bl	800581c <lwip_htons>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <tcp_rexmit_rto_prepare+0xba>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e000      	b.n	800cb5c <tcp_rexmit_rto_prepare+0xbc>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	442b      	add	r3, r5
 800cb5e:	18e2      	adds	r2, r4, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3710      	adds	r7, #16
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bdb0      	pop	{r4, r5, r7, pc}
 800cb74:	08014a24 	.word	0x08014a24
 800cb78:	08015060 	.word	0x08015060
 800cb7c:	08014a78 	.word	0x08014a78

0800cb80 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <tcp_rexmit_rto_commit+0x1c>
 800cb8e:	4b0d      	ldr	r3, [pc, #52]	; (800cbc4 <tcp_rexmit_rto_commit+0x44>)
 800cb90:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb94:	490c      	ldr	r1, [pc, #48]	; (800cbc8 <tcp_rexmit_rto_commit+0x48>)
 800cb96:	480d      	ldr	r0, [pc, #52]	; (800cbcc <tcp_rexmit_rto_commit+0x4c>)
 800cb98:	f005 fb8e 	bl	80122b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cba2:	2bff      	cmp	r3, #255	; 0xff
 800cba4:	d007      	beq.n	800cbb6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbac:	3301      	adds	r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f7ff fc7a 	bl	800c4b0 <tcp_output>
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	08014a24 	.word	0x08014a24
 800cbc8:	08015084 	.word	0x08015084
 800cbcc:	08014a78 	.word	0x08014a78

0800cbd0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b082      	sub	sp, #8
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <tcp_rexmit_rto+0x1c>
 800cbde:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <tcp_rexmit_rto+0x38>)
 800cbe0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800cbe4:	4909      	ldr	r1, [pc, #36]	; (800cc0c <tcp_rexmit_rto+0x3c>)
 800cbe6:	480a      	ldr	r0, [pc, #40]	; (800cc10 <tcp_rexmit_rto+0x40>)
 800cbe8:	f005 fb66 	bl	80122b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff ff57 	bl	800caa0 <tcp_rexmit_rto_prepare>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d102      	bne.n	800cbfe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff ffc1 	bl	800cb80 <tcp_rexmit_rto_commit>
  }
}
 800cbfe:	bf00      	nop
 800cc00:	3708      	adds	r7, #8
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	08014a24 	.word	0x08014a24
 800cc0c:	080150a8 	.word	0x080150a8
 800cc10:	08014a78 	.word	0x08014a78

0800cc14 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cc14:	b590      	push	{r4, r7, lr}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <tcp_rexmit+0x1c>
 800cc22:	4b2f      	ldr	r3, [pc, #188]	; (800cce0 <tcp_rexmit+0xcc>)
 800cc24:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800cc28:	492e      	ldr	r1, [pc, #184]	; (800cce4 <tcp_rexmit+0xd0>)
 800cc2a:	482f      	ldr	r0, [pc, #188]	; (800cce8 <tcp_rexmit+0xd4>)
 800cc2c:	f005 fb44 	bl	80122b8 <iprintf>

  if (pcb->unacked == NULL) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d102      	bne.n	800cc3e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cc38:	f06f 0305 	mvn.w	r3, #5
 800cc3c:	e04c      	b.n	800ccd8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc42:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cc44:	68b8      	ldr	r0, [r7, #8]
 800cc46:	f7ff fe2b 	bl	800c8a0 <tcp_output_segment_busy>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc50:	f06f 0305 	mvn.w	r3, #5
 800cc54:	e040      	b.n	800ccd8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	336c      	adds	r3, #108	; 0x6c
 800cc62:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc64:	e002      	b.n	800cc6c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d011      	beq.n	800cc98 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f8 fde2 	bl	8005846 <lwip_htonl>
 800cc82:	4604      	mov	r4, r0
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7f8 fddb 	bl	8005846 <lwip_htonl>
 800cc90:	4603      	mov	r3, r0
 800cc92:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	dbe6      	blt.n	800cc66 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d103      	bne.n	800ccb6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccbc:	2bff      	cmp	r3, #255	; 0xff
 800ccbe:	d007      	beq.n	800ccd0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ccd6:	2300      	movs	r3, #0
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd90      	pop	{r4, r7, pc}
 800cce0:	08014a24 	.word	0x08014a24
 800cce4:	080150c4 	.word	0x080150c4
 800cce8:	08014a78 	.word	0x08014a78

0800ccec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d106      	bne.n	800cd08 <tcp_rexmit_fast+0x1c>
 800ccfa:	4b2f      	ldr	r3, [pc, #188]	; (800cdb8 <tcp_rexmit_fast+0xcc>)
 800ccfc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cd00:	492e      	ldr	r1, [pc, #184]	; (800cdbc <tcp_rexmit_fast+0xd0>)
 800cd02:	482f      	ldr	r0, [pc, #188]	; (800cdc0 <tcp_rexmit_fast+0xd4>)
 800cd04:	f005 fad8 	bl	80122b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d04f      	beq.n	800cdb0 <tcp_rexmit_fast+0xc4>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8b5b      	ldrh	r3, [r3, #26]
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d149      	bne.n	800cdb0 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7ff ff79 	bl	800cc14 <tcp_rexmit>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d143      	bne.n	800cdb0 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d208      	bcs.n	800cd4a <tcp_rexmit_fast+0x5e>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	da00      	bge.n	800cd44 <tcp_rexmit_fast+0x58>
 800cd42:	3301      	adds	r3, #1
 800cd44:	105b      	asrs	r3, r3, #1
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	e007      	b.n	800cd5a <tcp_rexmit_fast+0x6e>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	da00      	bge.n	800cd56 <tcp_rexmit_fast+0x6a>
 800cd54:	3301      	adds	r3, #1
 800cd56:	105b      	asrs	r3, r3, #1
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cd66:	461a      	mov	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd6c:	005b      	lsls	r3, r3, #1
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d206      	bcs.n	800cd80 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd76:	005b      	lsls	r3, r3, #1
 800cd78:	b29a      	uxth	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	0049      	lsls	r1, r1, #1
 800cd8e:	440b      	add	r3, r1
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	4413      	add	r3, r2
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	8b5b      	ldrh	r3, [r3, #26]
 800cda0:	f043 0304 	orr.w	r3, r3, #4
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800cdb0:	bf00      	nop
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	08014a24 	.word	0x08014a24
 800cdbc:	080150dc 	.word	0x080150dc
 800cdc0:	08014a78 	.word	0x08014a78

0800cdc4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b086      	sub	sp, #24
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	607b      	str	r3, [r7, #4]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	817b      	strh	r3, [r7, #10]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cdd6:	897a      	ldrh	r2, [r7, #10]
 800cdd8:	893b      	ldrh	r3, [r7, #8]
 800cdda:	4413      	add	r3, r2
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	3314      	adds	r3, #20
 800cde0:	b29b      	uxth	r3, r3
 800cde2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cde6:	4619      	mov	r1, r3
 800cde8:	2022      	movs	r0, #34	; 0x22
 800cdea:	f7f9 fd0f 	bl	800680c <pbuf_alloc>
 800cdee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d04e      	beq.n	800ce94 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	895b      	ldrh	r3, [r3, #10]
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	897b      	ldrh	r3, [r7, #10]
 800cdfe:	3314      	adds	r3, #20
 800ce00:	429a      	cmp	r2, r3
 800ce02:	da06      	bge.n	800ce12 <tcp_output_alloc_header_common+0x4e>
 800ce04:	4b26      	ldr	r3, [pc, #152]	; (800cea0 <tcp_output_alloc_header_common+0xdc>)
 800ce06:	f240 7224 	movw	r2, #1828	; 0x724
 800ce0a:	4926      	ldr	r1, [pc, #152]	; (800cea4 <tcp_output_alloc_header_common+0xe0>)
 800ce0c:	4826      	ldr	r0, [pc, #152]	; (800cea8 <tcp_output_alloc_header_common+0xe4>)
 800ce0e:	f005 fa53 	bl	80122b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ce18:	8c3b      	ldrh	r3, [r7, #32]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7f8 fcfe 	bl	800581c <lwip_htons>
 800ce20:	4603      	mov	r3, r0
 800ce22:	461a      	mov	r2, r3
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ce28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7f8 fcf6 	bl	800581c <lwip_htons>
 800ce30:	4603      	mov	r3, r0
 800ce32:	461a      	mov	r2, r3
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7f8 fd01 	bl	8005846 <lwip_htonl>
 800ce44:	4602      	mov	r2, r0
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ce4a:	897b      	ldrh	r3, [r7, #10]
 800ce4c:	089b      	lsrs	r3, r3, #2
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	3305      	adds	r3, #5
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	031b      	lsls	r3, r3, #12
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7f8 fcda 	bl	800581c <lwip_htons>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7f8 fcd2 	bl	800581c <lwip_htons>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	2200      	movs	r2, #0
 800ce84:	741a      	strb	r2, [r3, #16]
 800ce86:	2200      	movs	r2, #0
 800ce88:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	749a      	strb	r2, [r3, #18]
 800ce90:	2200      	movs	r2, #0
 800ce92:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ce94:	697b      	ldr	r3, [r7, #20]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	08014a24 	.word	0x08014a24
 800cea4:	080150fc 	.word	0x080150fc
 800cea8:	08014a78 	.word	0x08014a78

0800ceac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ceac:	b5b0      	push	{r4, r5, r7, lr}
 800ceae:	b08a      	sub	sp, #40	; 0x28
 800ceb0:	af04      	add	r7, sp, #16
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	607b      	str	r3, [r7, #4]
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	817b      	strh	r3, [r7, #10]
 800ceba:	4613      	mov	r3, r2
 800cebc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d106      	bne.n	800ced2 <tcp_output_alloc_header+0x26>
 800cec4:	4b15      	ldr	r3, [pc, #84]	; (800cf1c <tcp_output_alloc_header+0x70>)
 800cec6:	f240 7242 	movw	r2, #1858	; 0x742
 800ceca:	4915      	ldr	r1, [pc, #84]	; (800cf20 <tcp_output_alloc_header+0x74>)
 800cecc:	4815      	ldr	r0, [pc, #84]	; (800cf24 <tcp_output_alloc_header+0x78>)
 800cece:	f005 f9f3 	bl	80122b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	8adb      	ldrh	r3, [r3, #22]
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	8b12      	ldrh	r2, [r2, #24]
 800cede:	68f9      	ldr	r1, [r7, #12]
 800cee0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cee2:	893d      	ldrh	r5, [r7, #8]
 800cee4:	897c      	ldrh	r4, [r7, #10]
 800cee6:	9103      	str	r1, [sp, #12]
 800cee8:	2110      	movs	r1, #16
 800ceea:	9102      	str	r1, [sp, #8]
 800ceec:	9201      	str	r2, [sp, #4]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	462a      	mov	r2, r5
 800cef4:	4621      	mov	r1, r4
 800cef6:	f7ff ff65 	bl	800cdc4 <tcp_output_alloc_header_common>
 800cefa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d006      	beq.n	800cf10 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cf0a:	441a      	add	r2, r3
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800cf10:	697b      	ldr	r3, [r7, #20]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3718      	adds	r7, #24
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bdb0      	pop	{r4, r5, r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	08014a24 	.word	0x08014a24
 800cf20:	0801512c 	.word	0x0801512c
 800cf24:	08014a78 	.word	0x08014a78

0800cf28 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	4611      	mov	r1, r2
 800cf34:	461a      	mov	r2, r3
 800cf36:	460b      	mov	r3, r1
 800cf38:	71fb      	strb	r3, [r7, #7]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d106      	bne.n	800cf56 <tcp_output_fill_options+0x2e>
 800cf48:	4b13      	ldr	r3, [pc, #76]	; (800cf98 <tcp_output_fill_options+0x70>)
 800cf4a:	f240 7256 	movw	r2, #1878	; 0x756
 800cf4e:	4913      	ldr	r1, [pc, #76]	; (800cf9c <tcp_output_fill_options+0x74>)
 800cf50:	4813      	ldr	r0, [pc, #76]	; (800cfa0 <tcp_output_fill_options+0x78>)
 800cf52:	f005 f9b1 	bl	80122b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	3314      	adds	r3, #20
 800cf60:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	f103 0214 	add.w	r2, r3, #20
 800cf68:	8bfb      	ldrh	r3, [r7, #30]
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	f003 0304 	and.w	r3, r3, #4
 800cf76:	440b      	add	r3, r1
 800cf78:	4413      	add	r3, r2
 800cf7a:	697a      	ldr	r2, [r7, #20]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d006      	beq.n	800cf8e <tcp_output_fill_options+0x66>
 800cf80:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <tcp_output_fill_options+0x70>)
 800cf82:	f240 7275 	movw	r2, #1909	; 0x775
 800cf86:	4907      	ldr	r1, [pc, #28]	; (800cfa4 <tcp_output_fill_options+0x7c>)
 800cf88:	4805      	ldr	r0, [pc, #20]	; (800cfa0 <tcp_output_fill_options+0x78>)
 800cf8a:	f005 f995 	bl	80122b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cf8e:	bf00      	nop
 800cf90:	3720      	adds	r7, #32
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	08014a24 	.word	0x08014a24
 800cf9c:	08015154 	.word	0x08015154
 800cfa0:	08014a78 	.word	0x08014a78
 800cfa4:	0801504c 	.word	0x0801504c

0800cfa8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08a      	sub	sp, #40	; 0x28
 800cfac:	af04      	add	r7, sp, #16
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <tcp_output_control_segment+0x22>
 800cfbc:	4b1c      	ldr	r3, [pc, #112]	; (800d030 <tcp_output_control_segment+0x88>)
 800cfbe:	f240 7287 	movw	r2, #1927	; 0x787
 800cfc2:	491c      	ldr	r1, [pc, #112]	; (800d034 <tcp_output_control_segment+0x8c>)
 800cfc4:	481c      	ldr	r0, [pc, #112]	; (800d038 <tcp_output_control_segment+0x90>)
 800cfc6:	f005 f977 	bl	80122b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	6879      	ldr	r1, [r7, #4]
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7fe fad4 	bl	800b57c <tcp_route>
 800cfd4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cfdc:	23fc      	movs	r3, #252	; 0xfc
 800cfde:	75fb      	strb	r3, [r7, #23]
 800cfe0:	e01c      	b.n	800d01c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d006      	beq.n	800cff6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	7adb      	ldrb	r3, [r3, #11]
 800cfec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	7a9b      	ldrb	r3, [r3, #10]
 800cff2:	757b      	strb	r3, [r7, #21]
 800cff4:	e003      	b.n	800cffe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cff6:	23ff      	movs	r3, #255	; 0xff
 800cff8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cffe:	7dba      	ldrb	r2, [r7, #22]
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	9302      	str	r3, [sp, #8]
 800d004:	2306      	movs	r3, #6
 800d006:	9301      	str	r3, [sp, #4]
 800d008:	7d7b      	ldrb	r3, [r7, #21]
 800d00a:	9300      	str	r3, [sp, #0]
 800d00c:	4613      	mov	r3, r2
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	68b8      	ldr	r0, [r7, #8]
 800d014:	f004 f8e6 	bl	80111e4 <ip4_output_if>
 800d018:	4603      	mov	r3, r0
 800d01a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d01c:	68b8      	ldr	r0, [r7, #8]
 800d01e:	f7f9 fed5 	bl	8006dcc <pbuf_free>
  return err;
 800d022:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	08014a24 	.word	0x08014a24
 800d034:	0801517c 	.word	0x0801517c
 800d038:	08014a78 	.word	0x08014a78

0800d03c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d03c:	b590      	push	{r4, r7, lr}
 800d03e:	b08b      	sub	sp, #44	; 0x2c
 800d040:	af04      	add	r7, sp, #16
 800d042:	60f8      	str	r0, [r7, #12]
 800d044:	60b9      	str	r1, [r7, #8]
 800d046:	607a      	str	r2, [r7, #4]
 800d048:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d106      	bne.n	800d05e <tcp_rst+0x22>
 800d050:	4b1f      	ldr	r3, [pc, #124]	; (800d0d0 <tcp_rst+0x94>)
 800d052:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d056:	491f      	ldr	r1, [pc, #124]	; (800d0d4 <tcp_rst+0x98>)
 800d058:	481f      	ldr	r0, [pc, #124]	; (800d0d8 <tcp_rst+0x9c>)
 800d05a:	f005 f92d 	bl	80122b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d060:	2b00      	cmp	r3, #0
 800d062:	d106      	bne.n	800d072 <tcp_rst+0x36>
 800d064:	4b1a      	ldr	r3, [pc, #104]	; (800d0d0 <tcp_rst+0x94>)
 800d066:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d06a:	491c      	ldr	r1, [pc, #112]	; (800d0dc <tcp_rst+0xa0>)
 800d06c:	481a      	ldr	r0, [pc, #104]	; (800d0d8 <tcp_rst+0x9c>)
 800d06e:	f005 f923 	bl	80122b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d072:	2300      	movs	r3, #0
 800d074:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d076:	f246 0308 	movw	r3, #24584	; 0x6008
 800d07a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	b29c      	uxth	r4, r3
 800d080:	68b8      	ldr	r0, [r7, #8]
 800d082:	f7f8 fbe0 	bl	8005846 <lwip_htonl>
 800d086:	4602      	mov	r2, r0
 800d088:	8abb      	ldrh	r3, [r7, #20]
 800d08a:	9303      	str	r3, [sp, #12]
 800d08c:	2314      	movs	r3, #20
 800d08e:	9302      	str	r3, [sp, #8]
 800d090:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d092:	9301      	str	r3, [sp, #4]
 800d094:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	4613      	mov	r3, r2
 800d09a:	2200      	movs	r2, #0
 800d09c:	4621      	mov	r1, r4
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7ff fe90 	bl	800cdc4 <tcp_output_alloc_header_common>
 800d0a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d00c      	beq.n	800d0c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	6939      	ldr	r1, [r7, #16]
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f7ff ff38 	bl	800cf28 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	6939      	ldr	r1, [r7, #16]
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f7ff ff72 	bl	800cfa8 <tcp_output_control_segment>
 800d0c4:	e000      	b.n	800d0c8 <tcp_rst+0x8c>
    return;
 800d0c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d0c8:	371c      	adds	r7, #28
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd90      	pop	{r4, r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	08014a24 	.word	0x08014a24
 800d0d4:	080151a8 	.word	0x080151a8
 800d0d8:	08014a78 	.word	0x08014a78
 800d0dc:	080151c4 	.word	0x080151c4

0800d0e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d0e0:	b590      	push	{r4, r7, lr}
 800d0e2:	b087      	sub	sp, #28
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d106      	bne.n	800d104 <tcp_send_empty_ack+0x24>
 800d0f6:	4b28      	ldr	r3, [pc, #160]	; (800d198 <tcp_send_empty_ack+0xb8>)
 800d0f8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d0fc:	4927      	ldr	r1, [pc, #156]	; (800d19c <tcp_send_empty_ack+0xbc>)
 800d0fe:	4828      	ldr	r0, [pc, #160]	; (800d1a0 <tcp_send_empty_ack+0xc0>)
 800d100:	f005 f8da 	bl	80122b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d104:	7dfb      	ldrb	r3, [r7, #23]
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	b2db      	uxtb	r3, r3
 800d10a:	f003 0304 	and.w	r3, r3, #4
 800d10e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d110:	7d7b      	ldrb	r3, [r7, #21]
 800d112:	b29c      	uxth	r4, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f8 fb94 	bl	8005846 <lwip_htonl>
 800d11e:	4603      	mov	r3, r0
 800d120:	2200      	movs	r2, #0
 800d122:	4621      	mov	r1, r4
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f7ff fec1 	bl	800ceac <tcp_output_alloc_header>
 800d12a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d109      	bne.n	800d146 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	8b5b      	ldrh	r3, [r3, #26]
 800d136:	f043 0303 	orr.w	r3, r3, #3
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d140:	f06f 0301 	mvn.w	r3, #1
 800d144:	e023      	b.n	800d18e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d146:	7dbb      	ldrb	r3, [r7, #22]
 800d148:	7dfa      	ldrb	r2, [r7, #23]
 800d14a:	6939      	ldr	r1, [r7, #16]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff feeb 	bl	800cf28 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3304      	adds	r3, #4
 800d158:	6939      	ldr	r1, [r7, #16]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff ff24 	bl	800cfa8 <tcp_output_control_segment>
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d007      	beq.n	800d17c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	8b5b      	ldrh	r3, [r3, #26]
 800d170:	f043 0303 	orr.w	r3, r3, #3
 800d174:	b29a      	uxth	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	835a      	strh	r2, [r3, #26]
 800d17a:	e006      	b.n	800d18a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	8b5b      	ldrh	r3, [r3, #26]
 800d180:	f023 0303 	bic.w	r3, r3, #3
 800d184:	b29a      	uxth	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d18e:	4618      	mov	r0, r3
 800d190:	371c      	adds	r7, #28
 800d192:	46bd      	mov	sp, r7
 800d194:	bd90      	pop	{r4, r7, pc}
 800d196:	bf00      	nop
 800d198:	08014a24 	.word	0x08014a24
 800d19c:	080151e0 	.word	0x080151e0
 800d1a0:	08014a78 	.word	0x08014a78

0800d1a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d106      	bne.n	800d1c4 <tcp_keepalive+0x20>
 800d1b6:	4b18      	ldr	r3, [pc, #96]	; (800d218 <tcp_keepalive+0x74>)
 800d1b8:	f640 0224 	movw	r2, #2084	; 0x824
 800d1bc:	4917      	ldr	r1, [pc, #92]	; (800d21c <tcp_keepalive+0x78>)
 800d1be:	4818      	ldr	r0, [pc, #96]	; (800d220 <tcp_keepalive+0x7c>)
 800d1c0:	f005 f87a 	bl	80122b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d1c4:	7dfb      	ldrb	r3, [r7, #23]
 800d1c6:	b29c      	uxth	r4, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f8 fb39 	bl	8005846 <lwip_htonl>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	4621      	mov	r1, r4
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f7ff fe66 	bl	800ceac <tcp_output_alloc_header>
 800d1e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d1e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ec:	e010      	b.n	800d210 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	6939      	ldr	r1, [r7, #16]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fe97 	bl	800cf28 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	3304      	adds	r3, #4
 800d200:	6939      	ldr	r1, [r7, #16]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff fed0 	bl	800cfa8 <tcp_output_control_segment>
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d210:	4618      	mov	r0, r3
 800d212:	371c      	adds	r7, #28
 800d214:	46bd      	mov	sp, r7
 800d216:	bd90      	pop	{r4, r7, pc}
 800d218:	08014a24 	.word	0x08014a24
 800d21c:	08015200 	.word	0x08015200
 800d220:	08014a78 	.word	0x08014a78

0800d224 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d224:	b590      	push	{r4, r7, lr}
 800d226:	b08b      	sub	sp, #44	; 0x2c
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d22c:	2300      	movs	r3, #0
 800d22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d106      	bne.n	800d246 <tcp_zero_window_probe+0x22>
 800d238:	4b4c      	ldr	r3, [pc, #304]	; (800d36c <tcp_zero_window_probe+0x148>)
 800d23a:	f640 024f 	movw	r2, #2127	; 0x84f
 800d23e:	494c      	ldr	r1, [pc, #304]	; (800d370 <tcp_zero_window_probe+0x14c>)
 800d240:	484c      	ldr	r0, [pc, #304]	; (800d374 <tcp_zero_window_probe+0x150>)
 800d242:	f005 f839 	bl	80122b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d24a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d24c:	6a3b      	ldr	r3, [r7, #32]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d101      	bne.n	800d256 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	e086      	b.n	800d364 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d25c:	2bff      	cmp	r3, #255	; 0xff
 800d25e:	d007      	beq.n	800d270 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d266:	3301      	adds	r3, #1
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	899b      	ldrh	r3, [r3, #12]
 800d276:	b29b      	uxth	r3, r3
 800d278:	4618      	mov	r0, r3
 800d27a:	f7f8 facf 	bl	800581c <lwip_htons>
 800d27e:	4603      	mov	r3, r0
 800d280:	b2db      	uxtb	r3, r3
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	d005      	beq.n	800d296 <tcp_zero_window_probe+0x72>
 800d28a:	6a3b      	ldr	r3, [r7, #32]
 800d28c:	891b      	ldrh	r3, [r3, #8]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d101      	bne.n	800d296 <tcp_zero_window_probe+0x72>
 800d292:	2301      	movs	r3, #1
 800d294:	e000      	b.n	800d298 <tcp_zero_window_probe+0x74>
 800d296:	2300      	movs	r3, #0
 800d298:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d29a:	7ffb      	ldrb	r3, [r7, #31]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	bf0c      	ite	eq
 800d2a0:	2301      	moveq	r3, #1
 800d2a2:	2300      	movne	r3, #0
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ac:	b299      	uxth	r1, r3
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	8bba      	ldrh	r2, [r7, #28]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f7ff fdf8 	bl	800ceac <tcp_output_alloc_header>
 800d2bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d102      	bne.n	800d2ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c8:	e04c      	b.n	800d364 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d2d0:	7ffb      	ldrb	r3, [r7, #31]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d011      	beq.n	800d2fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	899b      	ldrh	r3, [r3, #12]
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d2e2:	b21c      	sxth	r4, r3
 800d2e4:	2011      	movs	r0, #17
 800d2e6:	f7f8 fa99 	bl	800581c <lwip_htons>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	b21b      	sxth	r3, r3
 800d2ee:	4323      	orrs	r3, r4
 800d2f0:	b21b      	sxth	r3, r3
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	819a      	strh	r2, [r3, #12]
 800d2f8:	e010      	b.n	800d31c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	3314      	adds	r3, #20
 800d300:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d302:	6a3b      	ldr	r3, [r7, #32]
 800d304:	6858      	ldr	r0, [r3, #4]
 800d306:	6a3b      	ldr	r3, [r7, #32]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	891a      	ldrh	r2, [r3, #8]
 800d30c:	6a3b      	ldr	r3, [r7, #32]
 800d30e:	891b      	ldrh	r3, [r3, #8]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	b29b      	uxth	r3, r3
 800d314:	2201      	movs	r2, #1
 800d316:	6939      	ldr	r1, [r7, #16]
 800d318:	f7f9 ff52 	bl	80071c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d31c:	6a3b      	ldr	r3, [r7, #32]
 800d31e:	68db      	ldr	r3, [r3, #12]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	f7f8 fa8f 	bl	8005846 <lwip_htonl>
 800d328:	4603      	mov	r3, r0
 800d32a:	3301      	adds	r3, #1
 800d32c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	1ad3      	subs	r3, r2, r3
 800d336:	2b00      	cmp	r3, #0
 800d338:	da02      	bge.n	800d340 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d344:	2200      	movs	r2, #0
 800d346:	69b9      	ldr	r1, [r7, #24]
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7ff fded 	bl	800cf28 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	3304      	adds	r3, #4
 800d354:	69b9      	ldr	r1, [r7, #24]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff fe26 	bl	800cfa8 <tcp_output_control_segment>
 800d35c:	4603      	mov	r3, r0
 800d35e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d360:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d364:	4618      	mov	r0, r3
 800d366:	372c      	adds	r7, #44	; 0x2c
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd90      	pop	{r4, r7, pc}
 800d36c:	08014a24 	.word	0x08014a24
 800d370:	0801521c 	.word	0x0801521c
 800d374:	08014a78 	.word	0x08014a78

0800d378 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d380:	f7fa f80c 	bl	800739c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d384:	4b0a      	ldr	r3, [pc, #40]	; (800d3b0 <tcpip_tcp_timer+0x38>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d103      	bne.n	800d394 <tcpip_tcp_timer+0x1c>
 800d38c:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <tcpip_tcp_timer+0x3c>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d005      	beq.n	800d3a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d394:	2200      	movs	r2, #0
 800d396:	4908      	ldr	r1, [pc, #32]	; (800d3b8 <tcpip_tcp_timer+0x40>)
 800d398:	20fa      	movs	r0, #250	; 0xfa
 800d39a:	f000 f8f1 	bl	800d580 <sys_timeout>
 800d39e:	e002      	b.n	800d3a6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d3a0:	4b06      	ldr	r3, [pc, #24]	; (800d3bc <tcpip_tcp_timer+0x44>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	601a      	str	r2, [r3, #0]
  }
}
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20007174 	.word	0x20007174
 800d3b4:	20007184 	.word	0x20007184
 800d3b8:	0800d379 	.word	0x0800d379
 800d3bc:	2000054c 	.word	0x2000054c

0800d3c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <tcp_timer_needed+0x30>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10f      	bne.n	800d3ec <tcp_timer_needed+0x2c>
 800d3cc:	4b09      	ldr	r3, [pc, #36]	; (800d3f4 <tcp_timer_needed+0x34>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d103      	bne.n	800d3dc <tcp_timer_needed+0x1c>
 800d3d4:	4b08      	ldr	r3, [pc, #32]	; (800d3f8 <tcp_timer_needed+0x38>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d007      	beq.n	800d3ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d3dc:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <tcp_timer_needed+0x30>)
 800d3de:	2201      	movs	r2, #1
 800d3e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	4905      	ldr	r1, [pc, #20]	; (800d3fc <tcp_timer_needed+0x3c>)
 800d3e6:	20fa      	movs	r0, #250	; 0xfa
 800d3e8:	f000 f8ca 	bl	800d580 <sys_timeout>
  }
}
 800d3ec:	bf00      	nop
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	2000054c 	.word	0x2000054c
 800d3f4:	20007174 	.word	0x20007174
 800d3f8:	20007184 	.word	0x20007184
 800d3fc:	0800d379 	.word	0x0800d379

0800d400 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d40c:	2006      	movs	r0, #6
 800d40e:	f7f8 fe91 	bl	8006134 <memp_malloc>
 800d412:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d109      	bne.n	800d42e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d151      	bne.n	800d4c4 <sys_timeout_abs+0xc4>
 800d420:	4b2a      	ldr	r3, [pc, #168]	; (800d4cc <sys_timeout_abs+0xcc>)
 800d422:	22be      	movs	r2, #190	; 0xbe
 800d424:	492a      	ldr	r1, [pc, #168]	; (800d4d0 <sys_timeout_abs+0xd0>)
 800d426:	482b      	ldr	r0, [pc, #172]	; (800d4d4 <sys_timeout_abs+0xd4>)
 800d428:	f004 ff46 	bl	80122b8 <iprintf>
    return;
 800d42c:	e04a      	b.n	800d4c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	68ba      	ldr	r2, [r7, #8]
 800d438:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	68fa      	ldr	r2, [r7, #12]
 800d444:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d446:	4b24      	ldr	r3, [pc, #144]	; (800d4d8 <sys_timeout_abs+0xd8>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d103      	bne.n	800d456 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d44e:	4a22      	ldr	r2, [pc, #136]	; (800d4d8 <sys_timeout_abs+0xd8>)
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	6013      	str	r3, [r2, #0]
    return;
 800d454:	e037      	b.n	800d4c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	4b1f      	ldr	r3, [pc, #124]	; (800d4d8 <sys_timeout_abs+0xd8>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	0fdb      	lsrs	r3, r3, #31
 800d464:	f003 0301 	and.w	r3, r3, #1
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d007      	beq.n	800d47e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d46e:	4b1a      	ldr	r3, [pc, #104]	; (800d4d8 <sys_timeout_abs+0xd8>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d476:	4a18      	ldr	r2, [pc, #96]	; (800d4d8 <sys_timeout_abs+0xd8>)
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	6013      	str	r3, [r2, #0]
 800d47c:	e023      	b.n	800d4c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d47e:	4b16      	ldr	r3, [pc, #88]	; (800d4d8 <sys_timeout_abs+0xd8>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	e01a      	b.n	800d4bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d00b      	beq.n	800d4a6 <sys_timeout_abs+0xa6>
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	685a      	ldr	r2, [r3, #4]
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	0fdb      	lsrs	r3, r3, #31
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d007      	beq.n	800d4b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	681a      	ldr	r2, [r3, #0]
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	693a      	ldr	r2, [r7, #16]
 800d4b2:	601a      	str	r2, [r3, #0]
        break;
 800d4b4:	e007      	b.n	800d4c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	617b      	str	r3, [r7, #20]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1e1      	bne.n	800d486 <sys_timeout_abs+0x86>
 800d4c2:	e000      	b.n	800d4c6 <sys_timeout_abs+0xc6>
    return;
 800d4c4:	bf00      	nop
      }
    }
  }
}
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	08015240 	.word	0x08015240
 800d4d0:	08015274 	.word	0x08015274
 800d4d4:	080152b4 	.word	0x080152b4
 800d4d8:	20000544 	.word	0x20000544

0800d4dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	4798      	blx	r3

  now = sys_now();
 800d4ee:	f7f7 fb73 	bl	8004bd8 <sys_now>
 800d4f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <lwip_cyclic_timer+0x5c>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	1ad3      	subs	r3, r2, r3
 800d506:	0fdb      	lsrs	r3, r3, #31
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	b2db      	uxtb	r3, r3
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	4413      	add	r3, r2
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	4907      	ldr	r1, [pc, #28]	; (800d53c <lwip_cyclic_timer+0x60>)
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff ff6e 	bl	800d400 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d524:	e004      	b.n	800d530 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	4904      	ldr	r1, [pc, #16]	; (800d53c <lwip_cyclic_timer+0x60>)
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff ff68 	bl	800d400 <sys_timeout_abs>
}
 800d530:	bf00      	nop
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	20000548 	.word	0x20000548
 800d53c:	0800d4dd 	.word	0x0800d4dd

0800d540 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b082      	sub	sp, #8
 800d544:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d546:	2301      	movs	r3, #1
 800d548:	607b      	str	r3, [r7, #4]
 800d54a:	e00e      	b.n	800d56a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d54c:	4a0a      	ldr	r2, [pc, #40]	; (800d578 <sys_timeouts_init+0x38>)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	00db      	lsls	r3, r3, #3
 800d558:	4a07      	ldr	r2, [pc, #28]	; (800d578 <sys_timeouts_init+0x38>)
 800d55a:	4413      	add	r3, r2
 800d55c:	461a      	mov	r2, r3
 800d55e:	4907      	ldr	r1, [pc, #28]	; (800d57c <sys_timeouts_init+0x3c>)
 800d560:	f000 f80e 	bl	800d580 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3301      	adds	r3, #1
 800d568:	607b      	str	r3, [r7, #4]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b04      	cmp	r3, #4
 800d56e:	d9ed      	bls.n	800d54c <sys_timeouts_init+0xc>
  }
}
 800d570:	bf00      	nop
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	0801e064 	.word	0x0801e064
 800d57c:	0800d4dd 	.word	0x0800d4dd

0800d580 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d592:	d306      	bcc.n	800d5a2 <sys_timeout+0x22>
 800d594:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <sys_timeout+0x40>)
 800d596:	f240 1229 	movw	r2, #297	; 0x129
 800d59a:	490a      	ldr	r1, [pc, #40]	; (800d5c4 <sys_timeout+0x44>)
 800d59c:	480a      	ldr	r0, [pc, #40]	; (800d5c8 <sys_timeout+0x48>)
 800d59e:	f004 fe8b 	bl	80122b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d5a2:	f7f7 fb19 	bl	8004bd8 <sys_now>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	4413      	add	r3, r2
 800d5ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	6978      	ldr	r0, [r7, #20]
 800d5b4:	f7ff ff24 	bl	800d400 <sys_timeout_abs>
#endif
}
 800d5b8:	bf00      	nop
 800d5ba:	3718      	adds	r7, #24
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}
 800d5c0:	08015240 	.word	0x08015240
 800d5c4:	080152dc 	.word	0x080152dc
 800d5c8:	080152b4 	.word	0x080152b4

0800d5cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d5d2:	f7f7 fb01 	bl	8004bd8 <sys_now>
 800d5d6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d5d8:	4b1a      	ldr	r3, [pc, #104]	; (800d644 <sys_check_timeouts+0x78>)
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d001      	beq.n	800d5e6 <sys_check_timeouts+0x1a>
 800d5e2:	f7f9 f8bd 	bl	8006760 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d5e6:	4b18      	ldr	r3, [pc, #96]	; (800d648 <sys_check_timeouts+0x7c>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d022      	beq.n	800d638 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	0fdb      	lsrs	r3, r3, #31
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	b2db      	uxtb	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	d11a      	bne.n	800d63c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a0f      	ldr	r2, [pc, #60]	; (800d648 <sys_check_timeouts+0x7c>)
 800d60c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	689b      	ldr	r3, [r3, #8]
 800d612:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	4a0b      	ldr	r2, [pc, #44]	; (800d64c <sys_check_timeouts+0x80>)
 800d620:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d622:	68b9      	ldr	r1, [r7, #8]
 800d624:	2006      	movs	r0, #6
 800d626:	f7f8 fdd1 	bl	80061cc <memp_free>
    if (handler != NULL) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d0d3      	beq.n	800d5d8 <sys_check_timeouts+0xc>
      handler(arg);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6838      	ldr	r0, [r7, #0]
 800d634:	4798      	blx	r3
  do {
 800d636:	e7cf      	b.n	800d5d8 <sys_check_timeouts+0xc>
      return;
 800d638:	bf00      	nop
 800d63a:	e000      	b.n	800d63e <sys_check_timeouts+0x72>
      return;
 800d63c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	2000716c 	.word	0x2000716c
 800d648:	20000544 	.word	0x20000544
 800d64c:	20000548 	.word	0x20000548

0800d650 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d654:	f004 fe48 	bl	80122e8 <rand>
 800d658:	4603      	mov	r3, r0
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d660:	b29b      	uxth	r3, r3
 800d662:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d666:	b29a      	uxth	r2, r3
 800d668:	4b01      	ldr	r3, [pc, #4]	; (800d670 <udp_init+0x20>)
 800d66a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d66c:	bf00      	nop
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	20000010 	.word	0x20000010

0800d674 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d67a:	2300      	movs	r3, #0
 800d67c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d67e:	4b17      	ldr	r3, [pc, #92]	; (800d6dc <udp_new_port+0x68>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	b291      	uxth	r1, r2
 800d686:	4a15      	ldr	r2, [pc, #84]	; (800d6dc <udp_new_port+0x68>)
 800d688:	8011      	strh	r1, [r2, #0]
 800d68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d68e:	4293      	cmp	r3, r2
 800d690:	d103      	bne.n	800d69a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d692:	4b12      	ldr	r3, [pc, #72]	; (800d6dc <udp_new_port+0x68>)
 800d694:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d698:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d69a:	4b11      	ldr	r3, [pc, #68]	; (800d6e0 <udp_new_port+0x6c>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	603b      	str	r3, [r7, #0]
 800d6a0:	e011      	b.n	800d6c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	8a5a      	ldrh	r2, [r3, #18]
 800d6a6:	4b0d      	ldr	r3, [pc, #52]	; (800d6dc <udp_new_port+0x68>)
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d108      	bne.n	800d6c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d6ae:	88fb      	ldrh	r3, [r7, #6]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	80fb      	strh	r3, [r7, #6]
 800d6b4:	88fb      	ldrh	r3, [r7, #6]
 800d6b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d6ba:	d3e0      	bcc.n	800d67e <udp_new_port+0xa>
        return 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	e007      	b.n	800d6d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	603b      	str	r3, [r7, #0]
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1ea      	bne.n	800d6a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d6cc:	4b03      	ldr	r3, [pc, #12]	; (800d6dc <udp_new_port+0x68>)
 800d6ce:	881b      	ldrh	r3, [r3, #0]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr
 800d6dc:	20000010 	.word	0x20000010
 800d6e0:	2000718c 	.word	0x2000718c

0800d6e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d105      	bne.n	800d704 <udp_input_local_match+0x20>
 800d6f8:	4b27      	ldr	r3, [pc, #156]	; (800d798 <udp_input_local_match+0xb4>)
 800d6fa:	2287      	movs	r2, #135	; 0x87
 800d6fc:	4927      	ldr	r1, [pc, #156]	; (800d79c <udp_input_local_match+0xb8>)
 800d6fe:	4828      	ldr	r0, [pc, #160]	; (800d7a0 <udp_input_local_match+0xbc>)
 800d700:	f004 fdda 	bl	80122b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d105      	bne.n	800d716 <udp_input_local_match+0x32>
 800d70a:	4b23      	ldr	r3, [pc, #140]	; (800d798 <udp_input_local_match+0xb4>)
 800d70c:	2288      	movs	r2, #136	; 0x88
 800d70e:	4925      	ldr	r1, [pc, #148]	; (800d7a4 <udp_input_local_match+0xc0>)
 800d710:	4823      	ldr	r0, [pc, #140]	; (800d7a0 <udp_input_local_match+0xbc>)
 800d712:	f004 fdd1 	bl	80122b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	7a1b      	ldrb	r3, [r3, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00b      	beq.n	800d736 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	7a1a      	ldrb	r2, [r3, #8]
 800d722:	4b21      	ldr	r3, [pc, #132]	; (800d7a8 <udp_input_local_match+0xc4>)
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d72a:	3301      	adds	r3, #1
 800d72c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d72e:	429a      	cmp	r2, r3
 800d730:	d001      	beq.n	800d736 <udp_input_local_match+0x52>
    return 0;
 800d732:	2300      	movs	r3, #0
 800d734:	e02b      	b.n	800d78e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d018      	beq.n	800d76e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d013      	beq.n	800d76a <udp_input_local_match+0x86>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00f      	beq.n	800d76a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d74a:	4b17      	ldr	r3, [pc, #92]	; (800d7a8 <udp_input_local_match+0xc4>)
 800d74c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d752:	d00a      	beq.n	800d76a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	4b13      	ldr	r3, [pc, #76]	; (800d7a8 <udp_input_local_match+0xc4>)
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	405a      	eors	r2, r3
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	3308      	adds	r3, #8
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d766:	2b00      	cmp	r3, #0
 800d768:	d110      	bne.n	800d78c <udp_input_local_match+0xa8>
          return 1;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e00f      	b.n	800d78e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d009      	beq.n	800d788 <udp_input_local_match+0xa4>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d005      	beq.n	800d788 <udp_input_local_match+0xa4>
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	4b09      	ldr	r3, [pc, #36]	; (800d7a8 <udp_input_local_match+0xc4>)
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	429a      	cmp	r2, r3
 800d786:	d101      	bne.n	800d78c <udp_input_local_match+0xa8>
        return 1;
 800d788:	2301      	movs	r3, #1
 800d78a:	e000      	b.n	800d78e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	08015328 	.word	0x08015328
 800d79c:	08015358 	.word	0x08015358
 800d7a0:	0801537c 	.word	0x0801537c
 800d7a4:	080153a4 	.word	0x080153a4
 800d7a8:	20003c10 	.word	0x20003c10

0800d7ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d7ac:	b590      	push	{r4, r7, lr}
 800d7ae:	b08d      	sub	sp, #52	; 0x34
 800d7b0:	af02      	add	r7, sp, #8
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d105      	bne.n	800d7cc <udp_input+0x20>
 800d7c0:	4b7c      	ldr	r3, [pc, #496]	; (800d9b4 <udp_input+0x208>)
 800d7c2:	22cf      	movs	r2, #207	; 0xcf
 800d7c4:	497c      	ldr	r1, [pc, #496]	; (800d9b8 <udp_input+0x20c>)
 800d7c6:	487d      	ldr	r0, [pc, #500]	; (800d9bc <udp_input+0x210>)
 800d7c8:	f004 fd76 	bl	80122b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d105      	bne.n	800d7de <udp_input+0x32>
 800d7d2:	4b78      	ldr	r3, [pc, #480]	; (800d9b4 <udp_input+0x208>)
 800d7d4:	22d0      	movs	r2, #208	; 0xd0
 800d7d6:	497a      	ldr	r1, [pc, #488]	; (800d9c0 <udp_input+0x214>)
 800d7d8:	4878      	ldr	r0, [pc, #480]	; (800d9bc <udp_input+0x210>)
 800d7da:	f004 fd6d 	bl	80122b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	895b      	ldrh	r3, [r3, #10]
 800d7e2:	2b07      	cmp	r3, #7
 800d7e4:	d803      	bhi.n	800d7ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7f9 faf0 	bl	8006dcc <pbuf_free>
    goto end;
 800d7ec:	e0de      	b.n	800d9ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d7f4:	4b73      	ldr	r3, [pc, #460]	; (800d9c4 <udp_input+0x218>)
 800d7f6:	695a      	ldr	r2, [r3, #20]
 800d7f8:	4b72      	ldr	r3, [pc, #456]	; (800d9c4 <udp_input+0x218>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	4610      	mov	r0, r2
 800d800:	f003 fdc8 	bl	8011394 <ip4_addr_isbroadcast_u32>
 800d804:	4603      	mov	r3, r0
 800d806:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	881b      	ldrh	r3, [r3, #0]
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	4618      	mov	r0, r3
 800d810:	f7f8 f804 	bl	800581c <lwip_htons>
 800d814:	4603      	mov	r3, r0
 800d816:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	885b      	ldrh	r3, [r3, #2]
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	4618      	mov	r0, r3
 800d820:	f7f7 fffc 	bl	800581c <lwip_htons>
 800d824:	4603      	mov	r3, r0
 800d826:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d828:	2300      	movs	r3, #0
 800d82a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d82c:	2300      	movs	r3, #0
 800d82e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d830:	2300      	movs	r3, #0
 800d832:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d834:	4b64      	ldr	r3, [pc, #400]	; (800d9c8 <udp_input+0x21c>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
 800d83a:	e054      	b.n	800d8e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83e:	8a5b      	ldrh	r3, [r3, #18]
 800d840:	89fa      	ldrh	r2, [r7, #14]
 800d842:	429a      	cmp	r2, r3
 800d844:	d14a      	bne.n	800d8dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d846:	7cfb      	ldrb	r3, [r7, #19]
 800d848:	461a      	mov	r2, r3
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d84e:	f7ff ff49 	bl	800d6e4 <udp_input_local_match>
 800d852:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d854:	2b00      	cmp	r3, #0
 800d856:	d041      	beq.n	800d8dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	7c1b      	ldrb	r3, [r3, #16]
 800d85c:	f003 0304 	and.w	r3, r3, #4
 800d860:	2b00      	cmp	r3, #0
 800d862:	d11d      	bne.n	800d8a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d102      	bne.n	800d870 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	61fb      	str	r3, [r7, #28]
 800d86e:	e017      	b.n	800d8a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d870:	7cfb      	ldrb	r3, [r7, #19]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d014      	beq.n	800d8a0 <udp_input+0xf4>
 800d876:	4b53      	ldr	r3, [pc, #332]	; (800d9c4 <udp_input+0x218>)
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87e:	d10f      	bne.n	800d8a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	3304      	adds	r3, #4
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d008      	beq.n	800d8a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	3304      	adds	r3, #4
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d101      	bne.n	800d8a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a2:	8a9b      	ldrh	r3, [r3, #20]
 800d8a4:	8a3a      	ldrh	r2, [r7, #16]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d118      	bne.n	800d8dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d005      	beq.n	800d8be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	4b43      	ldr	r3, [pc, #268]	; (800d9c4 <udp_input+0x218>)
 800d8b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d10e      	bne.n	800d8dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d8be:	6a3b      	ldr	r3, [r7, #32]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d014      	beq.n	800d8ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	68da      	ldr	r2, [r3, #12]
 800d8c8:	6a3b      	ldr	r3, [r7, #32]
 800d8ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d8cc:	4b3e      	ldr	r3, [pc, #248]	; (800d9c8 <udp_input+0x21c>)
 800d8ce:	681a      	ldr	r2, [r3, #0]
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d8d4:	4a3c      	ldr	r2, [pc, #240]	; (800d9c8 <udp_input+0x21c>)
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d8da:	e008      	b.n	800d8ee <udp_input+0x142>
      }
    }

    prev = pcb;
 800d8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e2:	68db      	ldr	r3, [r3, #12]
 800d8e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1a7      	bne.n	800d83c <udp_input+0x90>
 800d8ec:	e000      	b.n	800d8f0 <udp_input+0x144>
        break;
 800d8ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d101      	bne.n	800d8fa <udp_input+0x14e>
    pcb = uncon_pcb;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <udp_input+0x15a>
    for_us = 1;
 800d900:	2301      	movs	r3, #1
 800d902:	76fb      	strb	r3, [r7, #27]
 800d904:	e00a      	b.n	800d91c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	3304      	adds	r3, #4
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	4b2d      	ldr	r3, [pc, #180]	; (800d9c4 <udp_input+0x218>)
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	429a      	cmp	r2, r3
 800d912:	bf0c      	ite	eq
 800d914:	2301      	moveq	r3, #1
 800d916:	2300      	movne	r3, #0
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d91c:	7efb      	ldrb	r3, [r7, #27]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d041      	beq.n	800d9a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d922:	2108      	movs	r1, #8
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7f9 f9cb 	bl	8006cc0 <pbuf_remove_header>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00a      	beq.n	800d946 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d930:	4b20      	ldr	r3, [pc, #128]	; (800d9b4 <udp_input+0x208>)
 800d932:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d936:	4925      	ldr	r1, [pc, #148]	; (800d9cc <udp_input+0x220>)
 800d938:	4820      	ldr	r0, [pc, #128]	; (800d9bc <udp_input+0x210>)
 800d93a:	f004 fcbd 	bl	80122b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f7f9 fa44 	bl	8006dcc <pbuf_free>
      goto end;
 800d944:	e032      	b.n	800d9ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d012      	beq.n	800d972 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00a      	beq.n	800d96a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	699c      	ldr	r4, [r3, #24]
 800d958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95a:	69d8      	ldr	r0, [r3, #28]
 800d95c:	8a3b      	ldrh	r3, [r7, #16]
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <udp_input+0x224>)
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d966:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d968:	e021      	b.n	800d9ae <udp_input+0x202>
        pbuf_free(p);
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7f9 fa2e 	bl	8006dcc <pbuf_free>
        goto end;
 800d970:	e01c      	b.n	800d9ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d972:	7cfb      	ldrb	r3, [r7, #19]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d112      	bne.n	800d99e <udp_input+0x1f2>
 800d978:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <udp_input+0x218>)
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d980:	2be0      	cmp	r3, #224	; 0xe0
 800d982:	d00c      	beq.n	800d99e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d984:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <udp_input+0x218>)
 800d986:	899b      	ldrh	r3, [r3, #12]
 800d988:	3308      	adds	r3, #8
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	b21b      	sxth	r3, r3
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7f9 fa08 	bl	8006da6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d996:	2103      	movs	r1, #3
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f003 f9bf 	bl	8010d1c <icmp_dest_unreach>
      pbuf_free(p);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7f9 fa14 	bl	8006dcc <pbuf_free>
  return;
 800d9a4:	e003      	b.n	800d9ae <udp_input+0x202>
    pbuf_free(p);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7f9 fa10 	bl	8006dcc <pbuf_free>
  return;
 800d9ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d9ae:	372c      	adds	r7, #44	; 0x2c
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd90      	pop	{r4, r7, pc}
 800d9b4:	08015328 	.word	0x08015328
 800d9b8:	080153cc 	.word	0x080153cc
 800d9bc:	0801537c 	.word	0x0801537c
 800d9c0:	080153e4 	.word	0x080153e4
 800d9c4:	20003c10 	.word	0x20003c10
 800d9c8:	2000718c 	.word	0x2000718c
 800d9cc:	08015400 	.word	0x08015400
 800d9d0:	20003c20 	.word	0x20003c20

0800d9d4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b088      	sub	sp, #32
 800d9d8:	af02      	add	r7, sp, #8
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	607a      	str	r2, [r7, #4]
 800d9e0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d109      	bne.n	800d9fc <udp_sendto_if+0x28>
 800d9e8:	4b2e      	ldr	r3, [pc, #184]	; (800daa4 <udp_sendto_if+0xd0>)
 800d9ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9ee:	492e      	ldr	r1, [pc, #184]	; (800daa8 <udp_sendto_if+0xd4>)
 800d9f0:	482e      	ldr	r0, [pc, #184]	; (800daac <udp_sendto_if+0xd8>)
 800d9f2:	f004 fc61 	bl	80122b8 <iprintf>
 800d9f6:	f06f 030f 	mvn.w	r3, #15
 800d9fa:	e04f      	b.n	800da9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d109      	bne.n	800da16 <udp_sendto_if+0x42>
 800da02:	4b28      	ldr	r3, [pc, #160]	; (800daa4 <udp_sendto_if+0xd0>)
 800da04:	f240 2281 	movw	r2, #641	; 0x281
 800da08:	4929      	ldr	r1, [pc, #164]	; (800dab0 <udp_sendto_if+0xdc>)
 800da0a:	4828      	ldr	r0, [pc, #160]	; (800daac <udp_sendto_if+0xd8>)
 800da0c:	f004 fc54 	bl	80122b8 <iprintf>
 800da10:	f06f 030f 	mvn.w	r3, #15
 800da14:	e042      	b.n	800da9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d109      	bne.n	800da30 <udp_sendto_if+0x5c>
 800da1c:	4b21      	ldr	r3, [pc, #132]	; (800daa4 <udp_sendto_if+0xd0>)
 800da1e:	f240 2282 	movw	r2, #642	; 0x282
 800da22:	4924      	ldr	r1, [pc, #144]	; (800dab4 <udp_sendto_if+0xe0>)
 800da24:	4821      	ldr	r0, [pc, #132]	; (800daac <udp_sendto_if+0xd8>)
 800da26:	f004 fc47 	bl	80122b8 <iprintf>
 800da2a:	f06f 030f 	mvn.w	r3, #15
 800da2e:	e035      	b.n	800da9c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800da30:	6a3b      	ldr	r3, [r7, #32]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d109      	bne.n	800da4a <udp_sendto_if+0x76>
 800da36:	4b1b      	ldr	r3, [pc, #108]	; (800daa4 <udp_sendto_if+0xd0>)
 800da38:	f240 2283 	movw	r2, #643	; 0x283
 800da3c:	491e      	ldr	r1, [pc, #120]	; (800dab8 <udp_sendto_if+0xe4>)
 800da3e:	481b      	ldr	r0, [pc, #108]	; (800daac <udp_sendto_if+0xd8>)
 800da40:	f004 fc3a 	bl	80122b8 <iprintf>
 800da44:	f06f 030f 	mvn.w	r3, #15
 800da48:	e028      	b.n	800da9c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d009      	beq.n	800da64 <udp_sendto_if+0x90>
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d005      	beq.n	800da64 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800da60:	2be0      	cmp	r3, #224	; 0xe0
 800da62:	d103      	bne.n	800da6c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800da64:	6a3b      	ldr	r3, [r7, #32]
 800da66:	3304      	adds	r3, #4
 800da68:	617b      	str	r3, [r7, #20]
 800da6a:	e00b      	b.n	800da84 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	6a3b      	ldr	r3, [r7, #32]
 800da72:	3304      	adds	r3, #4
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	429a      	cmp	r2, r3
 800da78:	d002      	beq.n	800da80 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800da7a:	f06f 0303 	mvn.w	r3, #3
 800da7e:	e00d      	b.n	800da9c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800da84:	887a      	ldrh	r2, [r7, #2]
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	6a3b      	ldr	r3, [r7, #32]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	4613      	mov	r3, r2
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	68b9      	ldr	r1, [r7, #8]
 800da94:	68f8      	ldr	r0, [r7, #12]
 800da96:	f000 f811 	bl	800dabc <udp_sendto_if_src>
 800da9a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3718      	adds	r7, #24
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	08015328 	.word	0x08015328
 800daa8:	0801549c 	.word	0x0801549c
 800daac:	0801537c 	.word	0x0801537c
 800dab0:	080154b8 	.word	0x080154b8
 800dab4:	080154d4 	.word	0x080154d4
 800dab8:	080154f4 	.word	0x080154f4

0800dabc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b08c      	sub	sp, #48	; 0x30
 800dac0:	af04      	add	r7, sp, #16
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
 800dac8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d109      	bne.n	800dae4 <udp_sendto_if_src+0x28>
 800dad0:	4b65      	ldr	r3, [pc, #404]	; (800dc68 <udp_sendto_if_src+0x1ac>)
 800dad2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dad6:	4965      	ldr	r1, [pc, #404]	; (800dc6c <udp_sendto_if_src+0x1b0>)
 800dad8:	4865      	ldr	r0, [pc, #404]	; (800dc70 <udp_sendto_if_src+0x1b4>)
 800dada:	f004 fbed 	bl	80122b8 <iprintf>
 800dade:	f06f 030f 	mvn.w	r3, #15
 800dae2:	e0bc      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d109      	bne.n	800dafe <udp_sendto_if_src+0x42>
 800daea:	4b5f      	ldr	r3, [pc, #380]	; (800dc68 <udp_sendto_if_src+0x1ac>)
 800daec:	f240 22d2 	movw	r2, #722	; 0x2d2
 800daf0:	4960      	ldr	r1, [pc, #384]	; (800dc74 <udp_sendto_if_src+0x1b8>)
 800daf2:	485f      	ldr	r0, [pc, #380]	; (800dc70 <udp_sendto_if_src+0x1b4>)
 800daf4:	f004 fbe0 	bl	80122b8 <iprintf>
 800daf8:	f06f 030f 	mvn.w	r3, #15
 800dafc:	e0af      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d109      	bne.n	800db18 <udp_sendto_if_src+0x5c>
 800db04:	4b58      	ldr	r3, [pc, #352]	; (800dc68 <udp_sendto_if_src+0x1ac>)
 800db06:	f240 22d3 	movw	r2, #723	; 0x2d3
 800db0a:	495b      	ldr	r1, [pc, #364]	; (800dc78 <udp_sendto_if_src+0x1bc>)
 800db0c:	4858      	ldr	r0, [pc, #352]	; (800dc70 <udp_sendto_if_src+0x1b4>)
 800db0e:	f004 fbd3 	bl	80122b8 <iprintf>
 800db12:	f06f 030f 	mvn.w	r3, #15
 800db16:	e0a2      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800db18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d109      	bne.n	800db32 <udp_sendto_if_src+0x76>
 800db1e:	4b52      	ldr	r3, [pc, #328]	; (800dc68 <udp_sendto_if_src+0x1ac>)
 800db20:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800db24:	4955      	ldr	r1, [pc, #340]	; (800dc7c <udp_sendto_if_src+0x1c0>)
 800db26:	4852      	ldr	r0, [pc, #328]	; (800dc70 <udp_sendto_if_src+0x1b4>)
 800db28:	f004 fbc6 	bl	80122b8 <iprintf>
 800db2c:	f06f 030f 	mvn.w	r3, #15
 800db30:	e095      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <udp_sendto_if_src+0x90>
 800db38:	4b4b      	ldr	r3, [pc, #300]	; (800dc68 <udp_sendto_if_src+0x1ac>)
 800db3a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800db3e:	4950      	ldr	r1, [pc, #320]	; (800dc80 <udp_sendto_if_src+0x1c4>)
 800db40:	484b      	ldr	r0, [pc, #300]	; (800dc70 <udp_sendto_if_src+0x1b4>)
 800db42:	f004 fbb9 	bl	80122b8 <iprintf>
 800db46:	f06f 030f 	mvn.w	r3, #15
 800db4a:	e088      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	8a5b      	ldrh	r3, [r3, #18]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d10f      	bne.n	800db74 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800db54:	68f9      	ldr	r1, [r7, #12]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	8a5b      	ldrh	r3, [r3, #18]
 800db5a:	461a      	mov	r2, r3
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 f893 	bl	800dc88 <udp_bind>
 800db62:	4603      	mov	r3, r0
 800db64:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800db66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800db6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800db72:	e074      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	891b      	ldrh	r3, [r3, #8]
 800db78:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d902      	bls.n	800db86 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800db80:	f04f 33ff 	mov.w	r3, #4294967295
 800db84:	e06b      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800db86:	2108      	movs	r1, #8
 800db88:	68b8      	ldr	r0, [r7, #8]
 800db8a:	f7f9 f889 	bl	8006ca0 <pbuf_add_header>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d015      	beq.n	800dbc0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800db94:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db98:	2108      	movs	r1, #8
 800db9a:	2022      	movs	r0, #34	; 0x22
 800db9c:	f7f8 fe36 	bl	800680c <pbuf_alloc>
 800dba0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800dba8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbac:	e057      	b.n	800dc5e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	891b      	ldrh	r3, [r3, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d006      	beq.n	800dbc4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800dbb6:	68b9      	ldr	r1, [r7, #8]
 800dbb8:	69f8      	ldr	r0, [r7, #28]
 800dbba:	f7f9 fa1f 	bl	8006ffc <pbuf_chain>
 800dbbe:	e001      	b.n	800dbc4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	895b      	ldrh	r3, [r3, #10]
 800dbc8:	2b07      	cmp	r3, #7
 800dbca:	d806      	bhi.n	800dbda <udp_sendto_if_src+0x11e>
 800dbcc:	4b26      	ldr	r3, [pc, #152]	; (800dc68 <udp_sendto_if_src+0x1ac>)
 800dbce:	f240 320e 	movw	r2, #782	; 0x30e
 800dbd2:	492c      	ldr	r1, [pc, #176]	; (800dc84 <udp_sendto_if_src+0x1c8>)
 800dbd4:	4826      	ldr	r0, [pc, #152]	; (800dc70 <udp_sendto_if_src+0x1b4>)
 800dbd6:	f004 fb6f 	bl	80122b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	8a5b      	ldrh	r3, [r3, #18]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7f7 fe19 	bl	800581c <lwip_htons>
 800dbea:	4603      	mov	r3, r0
 800dbec:	461a      	mov	r2, r3
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dbf2:	887b      	ldrh	r3, [r7, #2]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7f7 fe11 	bl	800581c <lwip_htons>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2200      	movs	r2, #0
 800dc06:	719a      	strb	r2, [r3, #6]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	891b      	ldrh	r3, [r3, #8]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7f7 fe03 	bl	800581c <lwip_htons>
 800dc16:	4603      	mov	r3, r0
 800dc18:	461a      	mov	r2, r3
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800dc1e:	2311      	movs	r3, #17
 800dc20:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	7adb      	ldrb	r3, [r3, #11]
 800dc26:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	7a9b      	ldrb	r3, [r3, #10]
 800dc2c:	7cb9      	ldrb	r1, [r7, #18]
 800dc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc30:	9202      	str	r2, [sp, #8]
 800dc32:	7cfa      	ldrb	r2, [r7, #19]
 800dc34:	9201      	str	r2, [sp, #4]
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc3e:	69f8      	ldr	r0, [r7, #28]
 800dc40:	f003 fafa 	bl	8011238 <ip4_output_if_src>
 800dc44:	4603      	mov	r3, r0
 800dc46:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800dc48:	69fa      	ldr	r2, [r7, #28]
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d004      	beq.n	800dc5a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800dc50:	69f8      	ldr	r0, [r7, #28]
 800dc52:	f7f9 f8bb 	bl	8006dcc <pbuf_free>
    q = NULL;
 800dc56:	2300      	movs	r3, #0
 800dc58:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800dc5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3720      	adds	r7, #32
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	08015328 	.word	0x08015328
 800dc6c:	08015514 	.word	0x08015514
 800dc70:	0801537c 	.word	0x0801537c
 800dc74:	08015534 	.word	0x08015534
 800dc78:	08015554 	.word	0x08015554
 800dc7c:	08015578 	.word	0x08015578
 800dc80:	0801559c 	.word	0x0801559c
 800dc84:	080155c0 	.word	0x080155c0

0800dc88 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	4613      	mov	r3, r2
 800dc94:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d101      	bne.n	800dca0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800dc9c:	4b39      	ldr	r3, [pc, #228]	; (800dd84 <udp_bind+0xfc>)
 800dc9e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d109      	bne.n	800dcba <udp_bind+0x32>
 800dca6:	4b38      	ldr	r3, [pc, #224]	; (800dd88 <udp_bind+0x100>)
 800dca8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800dcac:	4937      	ldr	r1, [pc, #220]	; (800dd8c <udp_bind+0x104>)
 800dcae:	4838      	ldr	r0, [pc, #224]	; (800dd90 <udp_bind+0x108>)
 800dcb0:	f004 fb02 	bl	80122b8 <iprintf>
 800dcb4:	f06f 030f 	mvn.w	r3, #15
 800dcb8:	e060      	b.n	800dd7c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dcbe:	4b35      	ldr	r3, [pc, #212]	; (800dd94 <udp_bind+0x10c>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	617b      	str	r3, [r7, #20]
 800dcc4:	e009      	b.n	800dcda <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800dcc6:	68fa      	ldr	r2, [r7, #12]
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d102      	bne.n	800dcd4 <udp_bind+0x4c>
      rebind = 1;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	74fb      	strb	r3, [r7, #19]
      break;
 800dcd2:	e005      	b.n	800dce0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	617b      	str	r3, [r7, #20]
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d1f2      	bne.n	800dcc6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d109      	bne.n	800dcfa <udp_bind+0x72>
    port = udp_new_port();
 800dce6:	f7ff fcc5 	bl	800d674 <udp_new_port>
 800dcea:	4603      	mov	r3, r0
 800dcec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dcee:	88fb      	ldrh	r3, [r7, #6]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d12c      	bne.n	800dd4e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800dcf4:	f06f 0307 	mvn.w	r3, #7
 800dcf8:	e040      	b.n	800dd7c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dcfa:	4b26      	ldr	r3, [pc, #152]	; (800dd94 <udp_bind+0x10c>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	e022      	b.n	800dd48 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800dd02:	68fa      	ldr	r2, [r7, #12]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d01b      	beq.n	800dd42 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	8a5b      	ldrh	r3, [r3, #18]
 800dd0e:	88fa      	ldrh	r2, [r7, #6]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d116      	bne.n	800dd42 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d00d      	beq.n	800dd3c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d00a      	beq.n	800dd3c <udp_bind+0xb4>
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d006      	beq.n	800dd3c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dd2e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d003      	beq.n	800dd3c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d102      	bne.n	800dd42 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800dd3c:	f06f 0307 	mvn.w	r3, #7
 800dd40:	e01c      	b.n	800dd7c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	617b      	str	r3, [r7, #20]
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1d9      	bne.n	800dd02 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d002      	beq.n	800dd5a <udp_bind+0xd2>
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	e000      	b.n	800dd5c <udp_bind+0xd4>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	68fa      	ldr	r2, [r7, #12]
 800dd5e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	88fa      	ldrh	r2, [r7, #6]
 800dd64:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800dd66:	7cfb      	ldrb	r3, [r7, #19]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800dd6c:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <udp_bind+0x10c>)
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800dd74:	4a07      	ldr	r2, [pc, #28]	; (800dd94 <udp_bind+0x10c>)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3718      	adds	r7, #24
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0801e08c 	.word	0x0801e08c
 800dd88:	08015328 	.word	0x08015328
 800dd8c:	080155f0 	.word	0x080155f0
 800dd90:	0801537c 	.word	0x0801537c
 800dd94:	2000718c 	.word	0x2000718c

0800dd98 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b086      	sub	sp, #24
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	60f8      	str	r0, [r7, #12]
 800dda0:	60b9      	str	r1, [r7, #8]
 800dda2:	4613      	mov	r3, r2
 800dda4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d109      	bne.n	800ddc0 <udp_connect+0x28>
 800ddac:	4b2c      	ldr	r3, [pc, #176]	; (800de60 <udp_connect+0xc8>)
 800ddae:	f240 4235 	movw	r2, #1077	; 0x435
 800ddb2:	492c      	ldr	r1, [pc, #176]	; (800de64 <udp_connect+0xcc>)
 800ddb4:	482c      	ldr	r0, [pc, #176]	; (800de68 <udp_connect+0xd0>)
 800ddb6:	f004 fa7f 	bl	80122b8 <iprintf>
 800ddba:	f06f 030f 	mvn.w	r3, #15
 800ddbe:	e04b      	b.n	800de58 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d109      	bne.n	800ddda <udp_connect+0x42>
 800ddc6:	4b26      	ldr	r3, [pc, #152]	; (800de60 <udp_connect+0xc8>)
 800ddc8:	f240 4236 	movw	r2, #1078	; 0x436
 800ddcc:	4927      	ldr	r1, [pc, #156]	; (800de6c <udp_connect+0xd4>)
 800ddce:	4826      	ldr	r0, [pc, #152]	; (800de68 <udp_connect+0xd0>)
 800ddd0:	f004 fa72 	bl	80122b8 <iprintf>
 800ddd4:	f06f 030f 	mvn.w	r3, #15
 800ddd8:	e03e      	b.n	800de58 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	8a5b      	ldrh	r3, [r3, #18]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10f      	bne.n	800de02 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800dde2:	68f9      	ldr	r1, [r7, #12]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	8a5b      	ldrh	r3, [r3, #18]
 800dde8:	461a      	mov	r2, r3
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff ff4c 	bl	800dc88 <udp_bind>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ddf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d002      	beq.n	800de02 <udp_connect+0x6a>
      return err;
 800ddfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de00:	e02a      	b.n	800de58 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <udp_connect+0x76>
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	e000      	b.n	800de10 <udp_connect+0x78>
 800de0e:	2300      	movs	r3, #0
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	88fa      	ldrh	r2, [r7, #6]
 800de18:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	7c1b      	ldrb	r3, [r3, #16]
 800de1e:	f043 0304 	orr.w	r3, r3, #4
 800de22:	b2da      	uxtb	r2, r3
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de28:	4b11      	ldr	r3, [pc, #68]	; (800de70 <udp_connect+0xd8>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	617b      	str	r3, [r7, #20]
 800de2e:	e008      	b.n	800de42 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800de30:	68fa      	ldr	r2, [r7, #12]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	429a      	cmp	r2, r3
 800de36:	d101      	bne.n	800de3c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800de38:	2300      	movs	r3, #0
 800de3a:	e00d      	b.n	800de58 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	617b      	str	r3, [r7, #20]
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f3      	bne.n	800de30 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800de48:	4b09      	ldr	r3, [pc, #36]	; (800de70 <udp_connect+0xd8>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800de50:	4a07      	ldr	r2, [pc, #28]	; (800de70 <udp_connect+0xd8>)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3718      	adds	r7, #24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	08015328 	.word	0x08015328
 800de64:	08015608 	.word	0x08015608
 800de68:	0801537c 	.word	0x0801537c
 800de6c:	08015624 	.word	0x08015624
 800de70:	2000718c 	.word	0x2000718c

0800de74 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d107      	bne.n	800de96 <udp_recv+0x22>
 800de86:	4b08      	ldr	r3, [pc, #32]	; (800dea8 <udp_recv+0x34>)
 800de88:	f240 428a 	movw	r2, #1162	; 0x48a
 800de8c:	4907      	ldr	r1, [pc, #28]	; (800deac <udp_recv+0x38>)
 800de8e:	4808      	ldr	r0, [pc, #32]	; (800deb0 <udp_recv+0x3c>)
 800de90:	f004 fa12 	bl	80122b8 <iprintf>
 800de94:	e005      	b.n	800dea2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	61da      	str	r2, [r3, #28]
}
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	08015328 	.word	0x08015328
 800deac:	0801565c 	.word	0x0801565c
 800deb0:	0801537c 	.word	0x0801537c

0800deb4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d107      	bne.n	800ded2 <udp_remove+0x1e>
 800dec2:	4b19      	ldr	r3, [pc, #100]	; (800df28 <udp_remove+0x74>)
 800dec4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800dec8:	4918      	ldr	r1, [pc, #96]	; (800df2c <udp_remove+0x78>)
 800deca:	4819      	ldr	r0, [pc, #100]	; (800df30 <udp_remove+0x7c>)
 800decc:	f004 f9f4 	bl	80122b8 <iprintf>
 800ded0:	e026      	b.n	800df20 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ded2:	4b18      	ldr	r3, [pc, #96]	; (800df34 <udp_remove+0x80>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d105      	bne.n	800dee8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800dedc:	4b15      	ldr	r3, [pc, #84]	; (800df34 <udp_remove+0x80>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	4a14      	ldr	r2, [pc, #80]	; (800df34 <udp_remove+0x80>)
 800dee4:	6013      	str	r3, [r2, #0]
 800dee6:	e017      	b.n	800df18 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800dee8:	4b12      	ldr	r3, [pc, #72]	; (800df34 <udp_remove+0x80>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60fb      	str	r3, [r7, #12]
 800deee:	e010      	b.n	800df12 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68db      	ldr	r3, [r3, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d009      	beq.n	800df0c <udp_remove+0x58>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	429a      	cmp	r2, r3
 800df00:	d104      	bne.n	800df0c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	68da      	ldr	r2, [r3, #12]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	60da      	str	r2, [r3, #12]
        break;
 800df0a:	e005      	b.n	800df18 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1eb      	bne.n	800def0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	2000      	movs	r0, #0
 800df1c:	f7f8 f956 	bl	80061cc <memp_free>
}
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	08015328 	.word	0x08015328
 800df2c:	08015674 	.word	0x08015674
 800df30:	0801537c 	.word	0x0801537c
 800df34:	2000718c 	.word	0x2000718c

0800df38 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800df3e:	2000      	movs	r0, #0
 800df40:	f7f8 f8f8 	bl	8006134 <memp_malloc>
 800df44:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d007      	beq.n	800df5c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800df4c:	2220      	movs	r2, #32
 800df4e:	2100      	movs	r1, #0
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f004 f9a9 	bl	80122a8 <memset>
    pcb->ttl = UDP_TTL;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	22ff      	movs	r2, #255	; 0xff
 800df5a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800df5c:	687b      	ldr	r3, [r7, #4]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}
	...

0800df68 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01e      	beq.n	800dfb6 <udp_netif_ip_addr_changed+0x4e>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d01a      	beq.n	800dfb6 <udp_netif_ip_addr_changed+0x4e>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d017      	beq.n	800dfb6 <udp_netif_ip_addr_changed+0x4e>
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d013      	beq.n	800dfb6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800df8e:	4b0d      	ldr	r3, [pc, #52]	; (800dfc4 <udp_netif_ip_addr_changed+0x5c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	e00c      	b.n	800dfb0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d103      	bne.n	800dfaa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1ef      	bne.n	800df96 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800dfb6:	bf00      	nop
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	2000718c 	.word	0x2000718c

0800dfc8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800dfcc:	4b20      	ldr	r3, [pc, #128]	; (800e050 <dhcp_inc_pcb_refcount+0x88>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d133      	bne.n	800e03c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800dfd4:	4b1f      	ldr	r3, [pc, #124]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d005      	beq.n	800dfe8 <dhcp_inc_pcb_refcount+0x20>
 800dfdc:	4b1e      	ldr	r3, [pc, #120]	; (800e058 <dhcp_inc_pcb_refcount+0x90>)
 800dfde:	22e5      	movs	r2, #229	; 0xe5
 800dfe0:	491e      	ldr	r1, [pc, #120]	; (800e05c <dhcp_inc_pcb_refcount+0x94>)
 800dfe2:	481f      	ldr	r0, [pc, #124]	; (800e060 <dhcp_inc_pcb_refcount+0x98>)
 800dfe4:	f004 f968 	bl	80122b8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800dfe8:	f7ff ffa6 	bl	800df38 <udp_new>
 800dfec:	4602      	mov	r2, r0
 800dfee:	4b19      	ldr	r3, [pc, #100]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800dff0:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800dff2:	4b18      	ldr	r3, [pc, #96]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800dffa:	f04f 33ff 	mov.w	r3, #4294967295
 800dffe:	e024      	b.n	800e04a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e000:	4b14      	ldr	r3, [pc, #80]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	7a5a      	ldrb	r2, [r3, #9]
 800e006:	4b13      	ldr	r3, [pc, #76]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0220 	orr.w	r2, r2, #32
 800e00e:	b2d2      	uxtb	r2, r2
 800e010:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e012:	4b10      	ldr	r3, [pc, #64]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2244      	movs	r2, #68	; 0x44
 800e018:	4912      	ldr	r1, [pc, #72]	; (800e064 <dhcp_inc_pcb_refcount+0x9c>)
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7ff fe34 	bl	800dc88 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e020:	4b0c      	ldr	r3, [pc, #48]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	2243      	movs	r2, #67	; 0x43
 800e026:	490f      	ldr	r1, [pc, #60]	; (800e064 <dhcp_inc_pcb_refcount+0x9c>)
 800e028:	4618      	mov	r0, r3
 800e02a:	f7ff feb5 	bl	800dd98 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e02e:	4b09      	ldr	r3, [pc, #36]	; (800e054 <dhcp_inc_pcb_refcount+0x8c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2200      	movs	r2, #0
 800e034:	490c      	ldr	r1, [pc, #48]	; (800e068 <dhcp_inc_pcb_refcount+0xa0>)
 800e036:	4618      	mov	r0, r3
 800e038:	f7ff ff1c 	bl	800de74 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <dhcp_inc_pcb_refcount+0x88>)
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	3301      	adds	r3, #1
 800e042:	b2da      	uxtb	r2, r3
 800e044:	4b02      	ldr	r3, [pc, #8]	; (800e050 <dhcp_inc_pcb_refcount+0x88>)
 800e046:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e048:	2300      	movs	r3, #0
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	20000554 	.word	0x20000554
 800e054:	20000550 	.word	0x20000550
 800e058:	0801568c 	.word	0x0801568c
 800e05c:	080156c4 	.word	0x080156c4
 800e060:	080156ec 	.word	0x080156ec
 800e064:	0801e08c 	.word	0x0801e08c
 800e068:	0800f889 	.word	0x0800f889

0800e06c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e070:	4b0e      	ldr	r3, [pc, #56]	; (800e0ac <dhcp_dec_pcb_refcount+0x40>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d105      	bne.n	800e084 <dhcp_dec_pcb_refcount+0x18>
 800e078:	4b0d      	ldr	r3, [pc, #52]	; (800e0b0 <dhcp_dec_pcb_refcount+0x44>)
 800e07a:	22ff      	movs	r2, #255	; 0xff
 800e07c:	490d      	ldr	r1, [pc, #52]	; (800e0b4 <dhcp_dec_pcb_refcount+0x48>)
 800e07e:	480e      	ldr	r0, [pc, #56]	; (800e0b8 <dhcp_dec_pcb_refcount+0x4c>)
 800e080:	f004 f91a 	bl	80122b8 <iprintf>
  dhcp_pcb_refcount--;
 800e084:	4b09      	ldr	r3, [pc, #36]	; (800e0ac <dhcp_dec_pcb_refcount+0x40>)
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	3b01      	subs	r3, #1
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	4b07      	ldr	r3, [pc, #28]	; (800e0ac <dhcp_dec_pcb_refcount+0x40>)
 800e08e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e090:	4b06      	ldr	r3, [pc, #24]	; (800e0ac <dhcp_dec_pcb_refcount+0x40>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d107      	bne.n	800e0a8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e098:	4b08      	ldr	r3, [pc, #32]	; (800e0bc <dhcp_dec_pcb_refcount+0x50>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7ff ff09 	bl	800deb4 <udp_remove>
    dhcp_pcb = NULL;
 800e0a2:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <dhcp_dec_pcb_refcount+0x50>)
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	601a      	str	r2, [r3, #0]
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	20000554 	.word	0x20000554
 800e0b0:	0801568c 	.word	0x0801568c
 800e0b4:	08015714 	.word	0x08015714
 800e0b8:	080156ec 	.word	0x080156ec
 800e0bc:	20000550 	.word	0x20000550

0800e0c0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b084      	sub	sp, #16
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a1b      	ldr	r3, [r3, #32]
 800e0cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e0ce:	210c      	movs	r1, #12
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f001 f81b 	bl	800f10c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e0d6:	4b06      	ldr	r3, [pc, #24]	; (800e0f0 <dhcp_handle_nak+0x30>)
 800e0d8:	4a05      	ldr	r2, [pc, #20]	; (800e0f0 <dhcp_handle_nak+0x30>)
 800e0da:	4905      	ldr	r1, [pc, #20]	; (800e0f0 <dhcp_handle_nak+0x30>)
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f7f8 fa13 	bl	8006508 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 fc0e 	bl	800e904 <dhcp_discover>
}
 800e0e8:	bf00      	nop
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	0801e08c 	.word	0x0801e08c

0800e0f4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e102:	2108      	movs	r1, #8
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f001 f801 	bl	800f10c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	331c      	adds	r3, #28
 800e10e:	2200      	movs	r2, #0
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f002 fb00 	bl	8010718 <etharp_query>
 800e118:	4603      	mov	r3, r0
 800e11a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	799b      	ldrb	r3, [r3, #6]
 800e120:	2bff      	cmp	r3, #255	; 0xff
 800e122:	d005      	beq.n	800e130 <dhcp_check+0x3c>
    dhcp->tries++;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	799b      	ldrb	r3, [r3, #6]
 800e128:	3301      	adds	r3, #1
 800e12a:	b2da      	uxtb	r2, r3
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e130:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e134:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e136:	893b      	ldrh	r3, [r7, #8]
 800e138:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e13c:	4a06      	ldr	r2, [pc, #24]	; (800e158 <dhcp_check+0x64>)
 800e13e:	fb82 1203 	smull	r1, r2, r2, r3
 800e142:	1152      	asrs	r2, r2, #5
 800e144:	17db      	asrs	r3, r3, #31
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	b29a      	uxth	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	10624dd3 	.word	0x10624dd3

0800e15c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a1b      	ldr	r3, [r3, #32]
 800e16a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e16c:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <dhcp_handle_offer+0x44>)
 800e16e:	789b      	ldrb	r3, [r3, #2]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d011      	beq.n	800e198 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e17a:	4b0a      	ldr	r3, [pc, #40]	; (800e1a4 <dhcp_handle_offer+0x48>)
 800e17c:	689b      	ldr	r3, [r3, #8]
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f7 fb61 	bl	8005846 <lwip_htonl>
 800e184:	4602      	mov	r2, r0
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	691a      	ldr	r2, [r3, #16]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f808 	bl	800e1a8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e198:	bf00      	nop
 800e19a:	3710      	adds	r7, #16
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	20007190 	.word	0x20007190
 800e1a4:	20007198 	.word	0x20007198

0800e1a8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e1a8:	b5b0      	push	{r4, r5, r7, lr}
 800e1aa:	b08a      	sub	sp, #40	; 0x28
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d109      	bne.n	800e1ca <dhcp_select+0x22>
 800e1b6:	4b71      	ldr	r3, [pc, #452]	; (800e37c <dhcp_select+0x1d4>)
 800e1b8:	f240 1277 	movw	r2, #375	; 0x177
 800e1bc:	4970      	ldr	r1, [pc, #448]	; (800e380 <dhcp_select+0x1d8>)
 800e1be:	4871      	ldr	r0, [pc, #452]	; (800e384 <dhcp_select+0x1dc>)
 800e1c0:	f004 f87a 	bl	80122b8 <iprintf>
 800e1c4:	f06f 030f 	mvn.w	r3, #15
 800e1c8:	e0d3      	b.n	800e372 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d109      	bne.n	800e1ea <dhcp_select+0x42>
 800e1d6:	4b69      	ldr	r3, [pc, #420]	; (800e37c <dhcp_select+0x1d4>)
 800e1d8:	f240 1279 	movw	r2, #377	; 0x179
 800e1dc:	496a      	ldr	r1, [pc, #424]	; (800e388 <dhcp_select+0x1e0>)
 800e1de:	4869      	ldr	r0, [pc, #420]	; (800e384 <dhcp_select+0x1dc>)
 800e1e0:	f004 f86a 	bl	80122b8 <iprintf>
 800e1e4:	f06f 0305 	mvn.w	r3, #5
 800e1e8:	e0c3      	b.n	800e372 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e1ea:	2101      	movs	r1, #1
 800e1ec:	69b8      	ldr	r0, [r7, #24]
 800e1ee:	f000 ff8d 	bl	800f10c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e1f2:	f107 030c 	add.w	r3, r7, #12
 800e1f6:	2203      	movs	r2, #3
 800e1f8:	69b9      	ldr	r1, [r7, #24]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f001 fc10 	bl	800fa20 <dhcp_create_msg>
 800e200:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 8085 	beq.w	800e314 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	685b      	ldr	r3, [r3, #4]
 800e20e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e210:	89b8      	ldrh	r0, [r7, #12]
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e218:	2302      	movs	r3, #2
 800e21a:	2239      	movs	r2, #57	; 0x39
 800e21c:	f000 ff90 	bl	800f140 <dhcp_option>
 800e220:	4603      	mov	r3, r0
 800e222:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e224:	89b8      	ldrh	r0, [r7, #12]
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e230:	461a      	mov	r2, r3
 800e232:	f000 ffdf 	bl	800f1f4 <dhcp_option_short>
 800e236:	4603      	mov	r3, r0
 800e238:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e23a:	89b8      	ldrh	r0, [r7, #12]
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e242:	2304      	movs	r3, #4
 800e244:	2232      	movs	r2, #50	; 0x32
 800e246:	f000 ff7b 	bl	800f140 <dhcp_option>
 800e24a:	4603      	mov	r3, r0
 800e24c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e24e:	89bc      	ldrh	r4, [r7, #12]
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7f7 faf3 	bl	8005846 <lwip_htonl>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	4629      	mov	r1, r5
 800e266:	4620      	mov	r0, r4
 800e268:	f000 fff6 	bl	800f258 <dhcp_option_long>
 800e26c:	4603      	mov	r3, r0
 800e26e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e270:	89b8      	ldrh	r0, [r7, #12]
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e278:	2304      	movs	r3, #4
 800e27a:	2236      	movs	r2, #54	; 0x36
 800e27c:	f000 ff60 	bl	800f140 <dhcp_option>
 800e280:	4603      	mov	r3, r0
 800e282:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e284:	89bc      	ldrh	r4, [r7, #12]
 800e286:	693b      	ldr	r3, [r7, #16]
 800e288:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	699b      	ldr	r3, [r3, #24]
 800e290:	4618      	mov	r0, r3
 800e292:	f7f7 fad8 	bl	8005846 <lwip_htonl>
 800e296:	4603      	mov	r3, r0
 800e298:	461a      	mov	r2, r3
 800e29a:	4629      	mov	r1, r5
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 ffdb 	bl	800f258 <dhcp_option_long>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e2a6:	89b8      	ldrh	r0, [r7, #12]
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	2237      	movs	r2, #55	; 0x37
 800e2b2:	f000 ff45 	bl	800f140 <dhcp_option>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	77bb      	strb	r3, [r7, #30]
 800e2be:	e00e      	b.n	800e2de <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e2c0:	89b8      	ldrh	r0, [r7, #12]
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e2c8:	7fbb      	ldrb	r3, [r7, #30]
 800e2ca:	4a30      	ldr	r2, [pc, #192]	; (800e38c <dhcp_select+0x1e4>)
 800e2cc:	5cd3      	ldrb	r3, [r2, r3]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	f000 ff6a 	bl	800f1a8 <dhcp_option_byte>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e2d8:	7fbb      	ldrb	r3, [r7, #30]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	77bb      	strb	r3, [r7, #30]
 800e2de:	7fbb      	ldrb	r3, [r7, #30]
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d9ed      	bls.n	800e2c0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e2e4:	89b8      	ldrh	r0, [r7, #12]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	33f0      	adds	r3, #240	; 0xf0
 800e2ea:	697a      	ldr	r2, [r7, #20]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	f001 fc6d 	bl	800fbcc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e2f2:	4b27      	ldr	r3, [pc, #156]	; (800e390 <dhcp_select+0x1e8>)
 800e2f4:	6818      	ldr	r0, [r3, #0]
 800e2f6:	4b27      	ldr	r3, [pc, #156]	; (800e394 <dhcp_select+0x1ec>)
 800e2f8:	9301      	str	r3, [sp, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	2343      	movs	r3, #67	; 0x43
 800e300:	4a25      	ldr	r2, [pc, #148]	; (800e398 <dhcp_select+0x1f0>)
 800e302:	6979      	ldr	r1, [r7, #20]
 800e304:	f7ff fbda 	bl	800dabc <udp_sendto_if_src>
 800e308:	4603      	mov	r3, r0
 800e30a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e30c:	6978      	ldr	r0, [r7, #20]
 800e30e:	f7f8 fd5d 	bl	8006dcc <pbuf_free>
 800e312:	e001      	b.n	800e318 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e314:	23ff      	movs	r3, #255	; 0xff
 800e316:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	799b      	ldrb	r3, [r3, #6]
 800e31c:	2bff      	cmp	r3, #255	; 0xff
 800e31e:	d005      	beq.n	800e32c <dhcp_select+0x184>
    dhcp->tries++;
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	799b      	ldrb	r3, [r3, #6]
 800e324:	3301      	adds	r3, #1
 800e326:	b2da      	uxtb	r2, r3
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	799b      	ldrb	r3, [r3, #6]
 800e330:	2b05      	cmp	r3, #5
 800e332:	d80d      	bhi.n	800e350 <dhcp_select+0x1a8>
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	799b      	ldrb	r3, [r3, #6]
 800e338:	461a      	mov	r2, r3
 800e33a:	2301      	movs	r3, #1
 800e33c:	4093      	lsls	r3, r2
 800e33e:	b29b      	uxth	r3, r3
 800e340:	461a      	mov	r2, r3
 800e342:	0152      	lsls	r2, r2, #5
 800e344:	1ad2      	subs	r2, r2, r3
 800e346:	0092      	lsls	r2, r2, #2
 800e348:	4413      	add	r3, r2
 800e34a:	00db      	lsls	r3, r3, #3
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	e001      	b.n	800e354 <dhcp_select+0x1ac>
 800e350:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e354:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e356:	89fb      	ldrh	r3, [r7, #14]
 800e358:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e35c:	4a0f      	ldr	r2, [pc, #60]	; (800e39c <dhcp_select+0x1f4>)
 800e35e:	fb82 1203 	smull	r1, r2, r2, r3
 800e362:	1152      	asrs	r2, r2, #5
 800e364:	17db      	asrs	r3, r3, #31
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	b29a      	uxth	r2, r3
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e36e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3720      	adds	r7, #32
 800e376:	46bd      	mov	sp, r7
 800e378:	bdb0      	pop	{r4, r5, r7, pc}
 800e37a:	bf00      	nop
 800e37c:	0801568c 	.word	0x0801568c
 800e380:	08015738 	.word	0x08015738
 800e384:	080156ec 	.word	0x080156ec
 800e388:	08015754 	.word	0x08015754
 800e38c:	20000014 	.word	0x20000014
 800e390:	20000550 	.word	0x20000550
 800e394:	0801e08c 	.word	0x0801e08c
 800e398:	0801e090 	.word	0x0801e090
 800e39c:	10624dd3 	.word	0x10624dd3

0800e3a0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e3a6:	4b27      	ldr	r3, [pc, #156]	; (800e444 <dhcp_coarse_tmr+0xa4>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	607b      	str	r3, [r7, #4]
 800e3ac:	e042      	b.n	800e434 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6a1b      	ldr	r3, [r3, #32]
 800e3b2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d039      	beq.n	800e42e <dhcp_coarse_tmr+0x8e>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	795b      	ldrb	r3, [r3, #5]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d035      	beq.n	800e42e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	8a9b      	ldrh	r3, [r3, #20]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d012      	beq.n	800e3f0 <dhcp_coarse_tmr+0x50>
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	8a5b      	ldrh	r3, [r3, #18]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	825a      	strh	r2, [r3, #18]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	8a5a      	ldrh	r2, [r3, #18]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	8a9b      	ldrh	r3, [r3, #20]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d106      	bne.n	800e3f0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fdf8 	bl	800efd8 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f96b 	bl	800e6c4 <dhcp_start>
 800e3ee:	e01e      	b.n	800e42e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	8a1b      	ldrh	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d00b      	beq.n	800e410 <dhcp_coarse_tmr+0x70>
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	8a1b      	ldrh	r3, [r3, #16]
 800e3fc:	1e5a      	subs	r2, r3, #1
 800e3fe:	b291      	uxth	r1, r2
 800e400:	683a      	ldr	r2, [r7, #0]
 800e402:	8211      	strh	r1, [r2, #16]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d103      	bne.n	800e410 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 f8c7 	bl	800e59c <dhcp_t2_timeout>
 800e40e:	e00e      	b.n	800e42e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	89db      	ldrh	r3, [r3, #14]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00a      	beq.n	800e42e <dhcp_coarse_tmr+0x8e>
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	89db      	ldrh	r3, [r3, #14]
 800e41c:	1e5a      	subs	r2, r3, #1
 800e41e:	b291      	uxth	r1, r2
 800e420:	683a      	ldr	r2, [r7, #0]
 800e422:	81d1      	strh	r1, [r2, #14]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d102      	bne.n	800e42e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f888 	bl	800e53e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	607b      	str	r3, [r7, #4]
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d1b9      	bne.n	800e3ae <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800e43a:	bf00      	nop
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	20007164 	.word	0x20007164

0800e448 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e44e:	4b16      	ldr	r3, [pc, #88]	; (800e4a8 <dhcp_fine_tmr+0x60>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	607b      	str	r3, [r7, #4]
 800e454:	e020      	b.n	800e498 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6a1b      	ldr	r3, [r3, #32]
 800e45a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d017      	beq.n	800e492 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	891b      	ldrh	r3, [r3, #8]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d906      	bls.n	800e478 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	891b      	ldrh	r3, [r3, #8]
 800e46e:	3b01      	subs	r3, #1
 800e470:	b29a      	uxth	r2, r3
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	811a      	strh	r2, [r3, #8]
 800e476:	e00c      	b.n	800e492 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	891b      	ldrh	r3, [r3, #8]
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d108      	bne.n	800e492 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	891b      	ldrh	r3, [r3, #8]
 800e484:	3b01      	subs	r3, #1
 800e486:	b29a      	uxth	r2, r3
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f80d 	bl	800e4ac <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	607b      	str	r3, [r7, #4]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1db      	bne.n	800e456 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e49e:	bf00      	nop
 800e4a0:	3708      	adds	r7, #8
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20007164 	.word	0x20007164

0800e4ac <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6a1b      	ldr	r3, [r3, #32]
 800e4b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	795b      	ldrb	r3, [r3, #5]
 800e4be:	2b0c      	cmp	r3, #12
 800e4c0:	d003      	beq.n	800e4ca <dhcp_timeout+0x1e>
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	795b      	ldrb	r3, [r3, #5]
 800e4c6:	2b06      	cmp	r3, #6
 800e4c8:	d103      	bne.n	800e4d2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 fa1a 	bl	800e904 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e4d0:	e031      	b.n	800e536 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	795b      	ldrb	r3, [r3, #5]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d10e      	bne.n	800e4f8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	799b      	ldrb	r3, [r3, #6]
 800e4de:	2b05      	cmp	r3, #5
 800e4e0:	d803      	bhi.n	800e4ea <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7ff fe60 	bl	800e1a8 <dhcp_select>
}
 800e4e8:	e025      	b.n	800e536 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 fd74 	bl	800efd8 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f8e7 	bl	800e6c4 <dhcp_start>
}
 800e4f6:	e01e      	b.n	800e536 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	795b      	ldrb	r3, [r3, #5]
 800e4fc:	2b08      	cmp	r3, #8
 800e4fe:	d10b      	bne.n	800e518 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	799b      	ldrb	r3, [r3, #6]
 800e504:	2b01      	cmp	r3, #1
 800e506:	d803      	bhi.n	800e510 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff fdf3 	bl	800e0f4 <dhcp_check>
}
 800e50e:	e012      	b.n	800e536 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fa99 	bl	800ea48 <dhcp_bind>
}
 800e516:	e00e      	b.n	800e536 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	795b      	ldrb	r3, [r3, #5]
 800e51c:	2b03      	cmp	r3, #3
 800e51e:	d10a      	bne.n	800e536 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	799b      	ldrb	r3, [r3, #6]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d803      	bhi.n	800e530 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 fc9f 	bl	800ee6c <dhcp_reboot>
}
 800e52e:	e002      	b.n	800e536 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f9e7 	bl	800e904 <dhcp_discover>
}
 800e536:	bf00      	nop
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b084      	sub	sp, #16
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6a1b      	ldr	r3, [r3, #32]
 800e54a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	795b      	ldrb	r3, [r3, #5]
 800e550:	2b01      	cmp	r3, #1
 800e552:	d007      	beq.n	800e564 <dhcp_t1_timeout+0x26>
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	795b      	ldrb	r3, [r3, #5]
 800e558:	2b0a      	cmp	r3, #10
 800e55a:	d003      	beq.n	800e564 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e560:	2b05      	cmp	r3, #5
 800e562:	d117      	bne.n	800e594 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 fb49 	bl	800ebfc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	899b      	ldrh	r3, [r3, #12]
 800e56e:	461a      	mov	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	8a5b      	ldrh	r3, [r3, #18]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	2b01      	cmp	r3, #1
 800e578:	dd0c      	ble.n	800e594 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	899b      	ldrh	r3, [r3, #12]
 800e57e:	461a      	mov	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	8a5b      	ldrh	r3, [r3, #18]
 800e584:	1ad3      	subs	r3, r2, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	da00      	bge.n	800e58c <dhcp_t1_timeout+0x4e>
 800e58a:	3301      	adds	r3, #1
 800e58c:	105b      	asrs	r3, r3, #1
 800e58e:	b29a      	uxth	r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e594:	bf00      	nop
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6a1b      	ldr	r3, [r3, #32]
 800e5a8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	795b      	ldrb	r3, [r3, #5]
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d00b      	beq.n	800e5ca <dhcp_t2_timeout+0x2e>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	795b      	ldrb	r3, [r3, #5]
 800e5b6:	2b0a      	cmp	r3, #10
 800e5b8:	d007      	beq.n	800e5ca <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d003      	beq.n	800e5ca <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	795b      	ldrb	r3, [r3, #5]
 800e5c6:	2b04      	cmp	r3, #4
 800e5c8:	d117      	bne.n	800e5fa <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 fbb2 	bl	800ed34 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8a9b      	ldrh	r3, [r3, #20]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	8a5b      	ldrh	r3, [r3, #18]
 800e5da:	1ad3      	subs	r3, r2, r3
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	dd0c      	ble.n	800e5fa <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	8a9b      	ldrh	r3, [r3, #20]
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	8a5b      	ldrh	r3, [r3, #18]
 800e5ea:	1ad3      	subs	r3, r2, r3
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	da00      	bge.n	800e5f2 <dhcp_t2_timeout+0x56>
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	105b      	asrs	r3, r3, #1
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e5fa:	bf00      	nop
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
	...

0800e604 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e620:	4b26      	ldr	r3, [pc, #152]	; (800e6bc <dhcp_handle_ack+0xb8>)
 800e622:	78db      	ldrb	r3, [r3, #3]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d003      	beq.n	800e630 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e628:	4b25      	ldr	r3, [pc, #148]	; (800e6c0 <dhcp_handle_ack+0xbc>)
 800e62a:	68da      	ldr	r2, [r3, #12]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e630:	4b22      	ldr	r3, [pc, #136]	; (800e6bc <dhcp_handle_ack+0xb8>)
 800e632:	791b      	ldrb	r3, [r3, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d004      	beq.n	800e642 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e638:	4b21      	ldr	r3, [pc, #132]	; (800e6c0 <dhcp_handle_ack+0xbc>)
 800e63a:	691a      	ldr	r2, [r3, #16]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	62da      	str	r2, [r3, #44]	; 0x2c
 800e640:	e004      	b.n	800e64c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e646:	085a      	lsrs	r2, r3, #1
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e64c:	4b1b      	ldr	r3, [pc, #108]	; (800e6bc <dhcp_handle_ack+0xb8>)
 800e64e:	795b      	ldrb	r3, [r3, #5]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d004      	beq.n	800e65e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e654:	4b1a      	ldr	r3, [pc, #104]	; (800e6c0 <dhcp_handle_ack+0xbc>)
 800e656:	695a      	ldr	r2, [r3, #20]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	631a      	str	r2, [r3, #48]	; 0x30
 800e65c:	e007      	b.n	800e66e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e662:	4613      	mov	r3, r2
 800e664:	00db      	lsls	r3, r3, #3
 800e666:	1a9b      	subs	r3, r3, r2
 800e668:	08da      	lsrs	r2, r3, #3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	691a      	ldr	r2, [r3, #16]
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e676:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <dhcp_handle_ack+0xb8>)
 800e678:	799b      	ldrb	r3, [r3, #6]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00b      	beq.n	800e696 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e67e:	4b10      	ldr	r3, [pc, #64]	; (800e6c0 <dhcp_handle_ack+0xbc>)
 800e680:	699b      	ldr	r3, [r3, #24]
 800e682:	4618      	mov	r0, r3
 800e684:	f7f7 f8df 	bl	8005846 <lwip_htonl>
 800e688:	4602      	mov	r2, r0
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2201      	movs	r2, #1
 800e692:	71da      	strb	r2, [r3, #7]
 800e694:	e002      	b.n	800e69c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	2200      	movs	r2, #0
 800e69a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e69c:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <dhcp_handle_ack+0xb8>)
 800e69e:	79db      	ldrb	r3, [r3, #7]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d007      	beq.n	800e6b4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e6a4:	4b06      	ldr	r3, [pc, #24]	; (800e6c0 <dhcp_handle_ack+0xbc>)
 800e6a6:	69db      	ldr	r3, [r3, #28]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f7f7 f8cc 	bl	8005846 <lwip_htonl>
 800e6ae:	4602      	mov	r2, r0
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e6b4:	bf00      	nop
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	20007190 	.word	0x20007190
 800e6c0:	20007198 	.word	0x20007198

0800e6c4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d109      	bne.n	800e6e6 <dhcp_start+0x22>
 800e6d2:	4b37      	ldr	r3, [pc, #220]	; (800e7b0 <dhcp_start+0xec>)
 800e6d4:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e6d8:	4936      	ldr	r1, [pc, #216]	; (800e7b4 <dhcp_start+0xf0>)
 800e6da:	4837      	ldr	r0, [pc, #220]	; (800e7b8 <dhcp_start+0xf4>)
 800e6dc:	f003 fdec 	bl	80122b8 <iprintf>
 800e6e0:	f06f 030f 	mvn.w	r3, #15
 800e6e4:	e060      	b.n	800e7a8 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d109      	bne.n	800e708 <dhcp_start+0x44>
 800e6f4:	4b2e      	ldr	r3, [pc, #184]	; (800e7b0 <dhcp_start+0xec>)
 800e6f6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e6fa:	4930      	ldr	r1, [pc, #192]	; (800e7bc <dhcp_start+0xf8>)
 800e6fc:	482e      	ldr	r0, [pc, #184]	; (800e7b8 <dhcp_start+0xf4>)
 800e6fe:	f003 fddb 	bl	80122b8 <iprintf>
 800e702:	f06f 030f 	mvn.w	r3, #15
 800e706:	e04f      	b.n	800e7a8 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a1b      	ldr	r3, [r3, #32]
 800e70c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e712:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e716:	d202      	bcs.n	800e71e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e718:	f04f 33ff 	mov.w	r3, #4294967295
 800e71c:	e044      	b.n	800e7a8 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10d      	bne.n	800e740 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e724:	2034      	movs	r0, #52	; 0x34
 800e726:	f7f7 fb97 	bl	8005e58 <mem_malloc>
 800e72a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d102      	bne.n	800e738 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e732:	f04f 33ff 	mov.w	r3, #4294967295
 800e736:	e037      	b.n	800e7a8 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	68fa      	ldr	r2, [r7, #12]
 800e73c:	621a      	str	r2, [r3, #32]
 800e73e:	e005      	b.n	800e74c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	791b      	ldrb	r3, [r3, #4]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d001      	beq.n	800e74c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e748:	f7ff fc90 	bl	800e06c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e74c:	2234      	movs	r2, #52	; 0x34
 800e74e:	2100      	movs	r1, #0
 800e750:	68f8      	ldr	r0, [r7, #12]
 800e752:	f003 fda9 	bl	80122a8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e756:	f7ff fc37 	bl	800dfc8 <dhcp_inc_pcb_refcount>
 800e75a:	4603      	mov	r3, r0
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <dhcp_start+0xa2>
    return ERR_MEM;
 800e760:	f04f 33ff 	mov.w	r3, #4294967295
 800e764:	e020      	b.n	800e7a8 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2201      	movs	r2, #1
 800e76a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e772:	f003 0304 	and.w	r3, r3, #4
 800e776:	2b00      	cmp	r3, #0
 800e778:	d105      	bne.n	800e786 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800e77a:	2102      	movs	r1, #2
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 fcc5 	bl	800f10c <dhcp_set_state>
    return ERR_OK;
 800e782:	2300      	movs	r3, #0
 800e784:	e010      	b.n	800e7a8 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f8bc 	bl	800e904 <dhcp_discover>
 800e78c:	4603      	mov	r3, r0
 800e78e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800e790:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d005      	beq.n	800e7a4 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fc1d 	bl	800efd8 <dhcp_release_and_stop>
    return ERR_MEM;
 800e79e:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a2:	e001      	b.n	800e7a8 <dhcp_start+0xe4>
  }
  return result;
 800e7a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	0801568c 	.word	0x0801568c
 800e7b4:	08015770 	.word	0x08015770
 800e7b8:	080156ec 	.word	0x080156ec
 800e7bc:	080157b4 	.word	0x080157b4

0800e7c0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d107      	bne.n	800e7e0 <dhcp_arp_reply+0x20>
 800e7d0:	4b0e      	ldr	r3, [pc, #56]	; (800e80c <dhcp_arp_reply+0x4c>)
 800e7d2:	f240 328b 	movw	r2, #907	; 0x38b
 800e7d6:	490e      	ldr	r1, [pc, #56]	; (800e810 <dhcp_arp_reply+0x50>)
 800e7d8:	480e      	ldr	r0, [pc, #56]	; (800e814 <dhcp_arp_reply+0x54>)
 800e7da:	f003 fd6d 	bl	80122b8 <iprintf>
 800e7de:	e012      	b.n	800e806 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a1b      	ldr	r3, [r3, #32]
 800e7e4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00c      	beq.n	800e806 <dhcp_arp_reply+0x46>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	795b      	ldrb	r3, [r3, #5]
 800e7f0:	2b08      	cmp	r3, #8
 800e7f2:	d108      	bne.n	800e806 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	69db      	ldr	r3, [r3, #28]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d102      	bne.n	800e806 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 f809 	bl	800e818 <dhcp_decline>
    }
  }
}
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	0801568c 	.word	0x0801568c
 800e810:	08015770 	.word	0x08015770
 800e814:	080156ec 	.word	0x080156ec

0800e818 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800e818:	b5b0      	push	{r4, r5, r7, lr}
 800e81a:	b08a      	sub	sp, #40	; 0x28
 800e81c:	af02      	add	r7, sp, #8
 800e81e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e826:	210c      	movs	r1, #12
 800e828:	69b8      	ldr	r0, [r7, #24]
 800e82a:	f000 fc6f 	bl	800f10c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800e82e:	f107 030c 	add.w	r3, r7, #12
 800e832:	2204      	movs	r2, #4
 800e834:	69b9      	ldr	r1, [r7, #24]
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f001 f8f2 	bl	800fa20 <dhcp_create_msg>
 800e83c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d035      	beq.n	800e8b0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e84a:	89b8      	ldrh	r0, [r7, #12]
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e852:	2304      	movs	r3, #4
 800e854:	2232      	movs	r2, #50	; 0x32
 800e856:	f000 fc73 	bl	800f140 <dhcp_option>
 800e85a:	4603      	mov	r3, r0
 800e85c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e85e:	89bc      	ldrh	r4, [r7, #12]
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	69db      	ldr	r3, [r3, #28]
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7f6 ffeb 	bl	8005846 <lwip_htonl>
 800e870:	4603      	mov	r3, r0
 800e872:	461a      	mov	r2, r3
 800e874:	4629      	mov	r1, r5
 800e876:	4620      	mov	r0, r4
 800e878:	f000 fcee 	bl	800f258 <dhcp_option_long>
 800e87c:	4603      	mov	r3, r0
 800e87e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e880:	89b8      	ldrh	r0, [r7, #12]
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	33f0      	adds	r3, #240	; 0xf0
 800e886:	697a      	ldr	r2, [r7, #20]
 800e888:	4619      	mov	r1, r3
 800e88a:	f001 f99f 	bl	800fbcc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e88e:	4b19      	ldr	r3, [pc, #100]	; (800e8f4 <dhcp_decline+0xdc>)
 800e890:	6818      	ldr	r0, [r3, #0]
 800e892:	4b19      	ldr	r3, [pc, #100]	; (800e8f8 <dhcp_decline+0xe0>)
 800e894:	9301      	str	r3, [sp, #4]
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	2343      	movs	r3, #67	; 0x43
 800e89c:	4a17      	ldr	r2, [pc, #92]	; (800e8fc <dhcp_decline+0xe4>)
 800e89e:	6979      	ldr	r1, [r7, #20]
 800e8a0:	f7ff f90c 	bl	800dabc <udp_sendto_if_src>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e8a8:	6978      	ldr	r0, [r7, #20]
 800e8aa:	f7f8 fa8f 	bl	8006dcc <pbuf_free>
 800e8ae:	e001      	b.n	800e8b4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e8b0:	23ff      	movs	r3, #255	; 0xff
 800e8b2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	799b      	ldrb	r3, [r3, #6]
 800e8b8:	2bff      	cmp	r3, #255	; 0xff
 800e8ba:	d005      	beq.n	800e8c8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	799b      	ldrb	r3, [r3, #6]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	b2da      	uxtb	r2, r3
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800e8c8:	f242 7310 	movw	r3, #10000	; 0x2710
 800e8cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e8ce:	89fb      	ldrh	r3, [r7, #14]
 800e8d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e8d4:	4a0a      	ldr	r2, [pc, #40]	; (800e900 <dhcp_decline+0xe8>)
 800e8d6:	fb82 1203 	smull	r1, r2, r2, r3
 800e8da:	1152      	asrs	r2, r2, #5
 800e8dc:	17db      	asrs	r3, r3, #31
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	69bb      	ldr	r3, [r7, #24]
 800e8e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e8e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3720      	adds	r7, #32
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8f2:	bf00      	nop
 800e8f4:	20000550 	.word	0x20000550
 800e8f8:	0801e08c 	.word	0x0801e08c
 800e8fc:	0801e090 	.word	0x0801e090
 800e900:	10624dd3 	.word	0x10624dd3

0800e904 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b08a      	sub	sp, #40	; 0x28
 800e908:	af02      	add	r7, sp, #8
 800e90a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6a1b      	ldr	r3, [r3, #32]
 800e910:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2200      	movs	r2, #0
 800e91a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800e91c:	2106      	movs	r1, #6
 800e91e:	69b8      	ldr	r0, [r7, #24]
 800e920:	f000 fbf4 	bl	800f10c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800e924:	f107 0308 	add.w	r3, r7, #8
 800e928:	2201      	movs	r2, #1
 800e92a:	69b9      	ldr	r1, [r7, #24]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f001 f877 	bl	800fa20 <dhcp_create_msg>
 800e932:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d04b      	beq.n	800e9d2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e940:	8938      	ldrh	r0, [r7, #8]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e948:	2302      	movs	r3, #2
 800e94a:	2239      	movs	r2, #57	; 0x39
 800e94c:	f000 fbf8 	bl	800f140 <dhcp_option>
 800e950:	4603      	mov	r3, r0
 800e952:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e954:	8938      	ldrh	r0, [r7, #8]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e960:	461a      	mov	r2, r3
 800e962:	f000 fc47 	bl	800f1f4 <dhcp_option_short>
 800e966:	4603      	mov	r3, r0
 800e968:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e96a:	8938      	ldrh	r0, [r7, #8]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e972:	2303      	movs	r3, #3
 800e974:	2237      	movs	r2, #55	; 0x37
 800e976:	f000 fbe3 	bl	800f140 <dhcp_option>
 800e97a:	4603      	mov	r3, r0
 800e97c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e97e:	2300      	movs	r3, #0
 800e980:	77fb      	strb	r3, [r7, #31]
 800e982:	e00e      	b.n	800e9a2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e984:	8938      	ldrh	r0, [r7, #8]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e98c:	7ffb      	ldrb	r3, [r7, #31]
 800e98e:	4a29      	ldr	r2, [pc, #164]	; (800ea34 <dhcp_discover+0x130>)
 800e990:	5cd3      	ldrb	r3, [r2, r3]
 800e992:	461a      	mov	r2, r3
 800e994:	f000 fc08 	bl	800f1a8 <dhcp_option_byte>
 800e998:	4603      	mov	r3, r0
 800e99a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e99c:	7ffb      	ldrb	r3, [r7, #31]
 800e99e:	3301      	adds	r3, #1
 800e9a0:	77fb      	strb	r3, [r7, #31]
 800e9a2:	7ffb      	ldrb	r3, [r7, #31]
 800e9a4:	2b02      	cmp	r3, #2
 800e9a6:	d9ed      	bls.n	800e984 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e9a8:	8938      	ldrh	r0, [r7, #8]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	33f0      	adds	r3, #240	; 0xf0
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	f001 f90b 	bl	800fbcc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e9b6:	4b20      	ldr	r3, [pc, #128]	; (800ea38 <dhcp_discover+0x134>)
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	4b20      	ldr	r3, [pc, #128]	; (800ea3c <dhcp_discover+0x138>)
 800e9bc:	9301      	str	r3, [sp, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	2343      	movs	r3, #67	; 0x43
 800e9c4:	4a1e      	ldr	r2, [pc, #120]	; (800ea40 <dhcp_discover+0x13c>)
 800e9c6:	6939      	ldr	r1, [r7, #16]
 800e9c8:	f7ff f878 	bl	800dabc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800e9cc:	6938      	ldr	r0, [r7, #16]
 800e9ce:	f7f8 f9fd 	bl	8006dcc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	799b      	ldrb	r3, [r3, #6]
 800e9d6:	2bff      	cmp	r3, #255	; 0xff
 800e9d8:	d005      	beq.n	800e9e6 <dhcp_discover+0xe2>
    dhcp->tries++;
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	799b      	ldrb	r3, [r3, #6]
 800e9de:	3301      	adds	r3, #1
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	799b      	ldrb	r3, [r3, #6]
 800e9ea:	2b05      	cmp	r3, #5
 800e9ec:	d80d      	bhi.n	800ea0a <dhcp_discover+0x106>
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	799b      	ldrb	r3, [r3, #6]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	4093      	lsls	r3, r2
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	0152      	lsls	r2, r2, #5
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	0092      	lsls	r2, r2, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	00db      	lsls	r3, r3, #3
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	e001      	b.n	800ea0e <dhcp_discover+0x10a>
 800ea0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ea0e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ea10:	897b      	ldrh	r3, [r7, #10]
 800ea12:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ea16:	4a0b      	ldr	r2, [pc, #44]	; (800ea44 <dhcp_discover+0x140>)
 800ea18:	fb82 1203 	smull	r1, r2, r2, r3
 800ea1c:	1152      	asrs	r2, r2, #5
 800ea1e:	17db      	asrs	r3, r3, #31
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ea28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	20000014 	.word	0x20000014
 800ea38:	20000550 	.word	0x20000550
 800ea3c:	0801e08c 	.word	0x0801e08c
 800ea40:	0801e090 	.word	0x0801e090
 800ea44:	10624dd3 	.word	0x10624dd3

0800ea48 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b088      	sub	sp, #32
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d107      	bne.n	800ea66 <dhcp_bind+0x1e>
 800ea56:	4b64      	ldr	r3, [pc, #400]	; (800ebe8 <dhcp_bind+0x1a0>)
 800ea58:	f240 4215 	movw	r2, #1045	; 0x415
 800ea5c:	4963      	ldr	r1, [pc, #396]	; (800ebec <dhcp_bind+0x1a4>)
 800ea5e:	4864      	ldr	r0, [pc, #400]	; (800ebf0 <dhcp_bind+0x1a8>)
 800ea60:	f003 fc2a 	bl	80122b8 <iprintf>
 800ea64:	e0bc      	b.n	800ebe0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a1b      	ldr	r3, [r3, #32]
 800ea6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d107      	bne.n	800ea82 <dhcp_bind+0x3a>
 800ea72:	4b5d      	ldr	r3, [pc, #372]	; (800ebe8 <dhcp_bind+0x1a0>)
 800ea74:	f240 4217 	movw	r2, #1047	; 0x417
 800ea78:	495e      	ldr	r1, [pc, #376]	; (800ebf4 <dhcp_bind+0x1ac>)
 800ea7a:	485d      	ldr	r0, [pc, #372]	; (800ebf0 <dhcp_bind+0x1a8>)
 800ea7c:	f003 fc1c 	bl	80122b8 <iprintf>
 800ea80:	e0ae      	b.n	800ebe0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	2200      	movs	r2, #0
 800ea86:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea90:	d019      	beq.n	800eac6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea96:	331e      	adds	r3, #30
 800ea98:	4a57      	ldr	r2, [pc, #348]	; (800ebf8 <dhcp_bind+0x1b0>)
 800ea9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ea9e:	095b      	lsrs	r3, r3, #5
 800eaa0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eaa8:	d302      	bcc.n	800eab0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800eaaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	8a9b      	ldrh	r3, [r3, #20]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d102      	bne.n	800eac6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	2201      	movs	r2, #1
 800eac4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eace:	d01d      	beq.n	800eb0c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead4:	331e      	adds	r3, #30
 800ead6:	4a48      	ldr	r2, [pc, #288]	; (800ebf8 <dhcp_bind+0x1b0>)
 800ead8:	fba2 2303 	umull	r2, r3, r2, r3
 800eadc:	095b      	lsrs	r3, r3, #5
 800eade:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eae6:	d302      	bcc.n	800eaee <dhcp_bind+0xa6>
      timeout = 0xffff;
 800eae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eaec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	b29a      	uxth	r2, r3
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	895b      	ldrh	r3, [r3, #10]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	2201      	movs	r2, #1
 800eb02:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800eb04:	69bb      	ldr	r3, [r7, #24]
 800eb06:	895a      	ldrh	r2, [r3, #10]
 800eb08:	69bb      	ldr	r3, [r7, #24]
 800eb0a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb14:	d01d      	beq.n	800eb52 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb1a:	331e      	adds	r3, #30
 800eb1c:	4a36      	ldr	r2, [pc, #216]	; (800ebf8 <dhcp_bind+0x1b0>)
 800eb1e:	fba2 2303 	umull	r2, r3, r2, r3
 800eb22:	095b      	lsrs	r3, r3, #5
 800eb24:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb2c:	d302      	bcc.n	800eb34 <dhcp_bind+0xec>
      timeout = 0xffff;
 800eb2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb32:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800eb34:	69fb      	ldr	r3, [r7, #28]
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	899b      	ldrh	r3, [r3, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d102      	bne.n	800eb4a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	2201      	movs	r2, #1
 800eb48:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	899a      	ldrh	r2, [r3, #12]
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	895a      	ldrh	r2, [r3, #10]
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	899b      	ldrh	r3, [r3, #12]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d306      	bcc.n	800eb6c <dhcp_bind+0x124>
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	899b      	ldrh	r3, [r3, #12]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	79db      	ldrb	r3, [r3, #7]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d003      	beq.n	800eb7c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	6a1b      	ldr	r3, [r3, #32]
 800eb78:	613b      	str	r3, [r7, #16]
 800eb7a:	e014      	b.n	800eba6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	331c      	adds	r3, #28
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800eb84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	db02      	blt.n	800eb92 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800eb8c:	23ff      	movs	r3, #255	; 0xff
 800eb8e:	613b      	str	r3, [r7, #16]
 800eb90:	e009      	b.n	800eba6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800eb92:	7dfb      	ldrb	r3, [r7, #23]
 800eb94:	2bbf      	cmp	r3, #191	; 0xbf
 800eb96:	d903      	bls.n	800eba0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800eb98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800eb9c:	613b      	str	r3, [r7, #16]
 800eb9e:	e002      	b.n	800eba6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800eba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eba4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d108      	bne.n	800ebc4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	69da      	ldr	r2, [r3, #28]
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	4013      	ands	r3, r2
 800ebba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ebc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ebc4:	210a      	movs	r1, #10
 800ebc6:	69b8      	ldr	r0, [r7, #24]
 800ebc8:	f000 faa0 	bl	800f10c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	f103 011c 	add.w	r1, r3, #28
 800ebd2:	f107 030c 	add.w	r3, r7, #12
 800ebd6:	f107 0210 	add.w	r2, r7, #16
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f7f7 fc94 	bl	8006508 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ebe0:	3720      	adds	r7, #32
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	0801568c 	.word	0x0801568c
 800ebec:	080157ec 	.word	0x080157ec
 800ebf0:	080156ec 	.word	0x080156ec
 800ebf4:	08015808 	.word	0x08015808
 800ebf8:	88888889 	.word	0x88888889

0800ebfc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b08a      	sub	sp, #40	; 0x28
 800ec00:	af02      	add	r7, sp, #8
 800ec02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a1b      	ldr	r3, [r3, #32]
 800ec08:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ec0a:	2105      	movs	r1, #5
 800ec0c:	69b8      	ldr	r0, [r7, #24]
 800ec0e:	f000 fa7d 	bl	800f10c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ec12:	f107 030c 	add.w	r3, r7, #12
 800ec16:	2203      	movs	r2, #3
 800ec18:	69b9      	ldr	r1, [r7, #24]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 ff00 	bl	800fa20 <dhcp_create_msg>
 800ec20:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d04e      	beq.n	800ecc6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ec28:	697b      	ldr	r3, [r7, #20]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ec2e:	89b8      	ldrh	r0, [r7, #12]
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec36:	2302      	movs	r3, #2
 800ec38:	2239      	movs	r2, #57	; 0x39
 800ec3a:	f000 fa81 	bl	800f140 <dhcp_option>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ec42:	89b8      	ldrh	r0, [r7, #12]
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec4e:	461a      	mov	r2, r3
 800ec50:	f000 fad0 	bl	800f1f4 <dhcp_option_short>
 800ec54:	4603      	mov	r3, r0
 800ec56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec58:	89b8      	ldrh	r0, [r7, #12]
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec60:	2303      	movs	r3, #3
 800ec62:	2237      	movs	r2, #55	; 0x37
 800ec64:	f000 fa6c 	bl	800f140 <dhcp_option>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	77bb      	strb	r3, [r7, #30]
 800ec70:	e00e      	b.n	800ec90 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec72:	89b8      	ldrh	r0, [r7, #12]
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec7a:	7fbb      	ldrb	r3, [r7, #30]
 800ec7c:	4a2a      	ldr	r2, [pc, #168]	; (800ed28 <dhcp_renew+0x12c>)
 800ec7e:	5cd3      	ldrb	r3, [r2, r3]
 800ec80:	461a      	mov	r2, r3
 800ec82:	f000 fa91 	bl	800f1a8 <dhcp_option_byte>
 800ec86:	4603      	mov	r3, r0
 800ec88:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec8a:	7fbb      	ldrb	r3, [r7, #30]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	77bb      	strb	r3, [r7, #30]
 800ec90:	7fbb      	ldrb	r3, [r7, #30]
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d9ed      	bls.n	800ec72 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec96:	89b8      	ldrh	r0, [r7, #12]
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	33f0      	adds	r3, #240	; 0xf0
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	4619      	mov	r1, r3
 800eca0:	f000 ff94 	bl	800fbcc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800eca4:	4b21      	ldr	r3, [pc, #132]	; (800ed2c <dhcp_renew+0x130>)
 800eca6:	6818      	ldr	r0, [r3, #0]
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	f103 0218 	add.w	r2, r3, #24
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	2343      	movs	r3, #67	; 0x43
 800ecb4:	6979      	ldr	r1, [r7, #20]
 800ecb6:	f7fe fe8d 	bl	800d9d4 <udp_sendto_if>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ecbe:	6978      	ldr	r0, [r7, #20]
 800ecc0:	f7f8 f884 	bl	8006dcc <pbuf_free>
 800ecc4:	e001      	b.n	800ecca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ecc6:	23ff      	movs	r3, #255	; 0xff
 800ecc8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ecca:	69bb      	ldr	r3, [r7, #24]
 800eccc:	799b      	ldrb	r3, [r3, #6]
 800ecce:	2bff      	cmp	r3, #255	; 0xff
 800ecd0:	d005      	beq.n	800ecde <dhcp_renew+0xe2>
    dhcp->tries++;
 800ecd2:	69bb      	ldr	r3, [r7, #24]
 800ecd4:	799b      	ldrb	r3, [r3, #6]
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	b2da      	uxtb	r2, r3
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	799b      	ldrb	r3, [r3, #6]
 800ece2:	2b09      	cmp	r3, #9
 800ece4:	d80a      	bhi.n	800ecfc <dhcp_renew+0x100>
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	799b      	ldrb	r3, [r3, #6]
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	461a      	mov	r2, r3
 800ecee:	0152      	lsls	r2, r2, #5
 800ecf0:	1ad2      	subs	r2, r2, r3
 800ecf2:	0092      	lsls	r2, r2, #2
 800ecf4:	4413      	add	r3, r2
 800ecf6:	011b      	lsls	r3, r3, #4
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	e001      	b.n	800ed00 <dhcp_renew+0x104>
 800ecfc:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ed00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ed02:	89fb      	ldrh	r3, [r7, #14]
 800ed04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ed08:	4a09      	ldr	r2, [pc, #36]	; (800ed30 <dhcp_renew+0x134>)
 800ed0a:	fb82 1203 	smull	r1, r2, r2, r3
 800ed0e:	1152      	asrs	r2, r2, #5
 800ed10:	17db      	asrs	r3, r3, #31
 800ed12:	1ad3      	subs	r3, r2, r3
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ed1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3720      	adds	r7, #32
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}
 800ed26:	bf00      	nop
 800ed28:	20000014 	.word	0x20000014
 800ed2c:	20000550 	.word	0x20000550
 800ed30:	10624dd3 	.word	0x10624dd3

0800ed34 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b08a      	sub	sp, #40	; 0x28
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6a1b      	ldr	r3, [r3, #32]
 800ed40:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800ed42:	2104      	movs	r1, #4
 800ed44:	69b8      	ldr	r0, [r7, #24]
 800ed46:	f000 f9e1 	bl	800f10c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ed4a:	f107 030c 	add.w	r3, r7, #12
 800ed4e:	2203      	movs	r2, #3
 800ed50:	69b9      	ldr	r1, [r7, #24]
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f000 fe64 	bl	800fa20 <dhcp_create_msg>
 800ed58:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d04c      	beq.n	800edfa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ed66:	89b8      	ldrh	r0, [r7, #12]
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed6e:	2302      	movs	r3, #2
 800ed70:	2239      	movs	r2, #57	; 0x39
 800ed72:	f000 f9e5 	bl	800f140 <dhcp_option>
 800ed76:	4603      	mov	r3, r0
 800ed78:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ed7a:	89b8      	ldrh	r0, [r7, #12]
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed86:	461a      	mov	r2, r3
 800ed88:	f000 fa34 	bl	800f1f4 <dhcp_option_short>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ed90:	89b8      	ldrh	r0, [r7, #12]
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ed98:	2303      	movs	r3, #3
 800ed9a:	2237      	movs	r2, #55	; 0x37
 800ed9c:	f000 f9d0 	bl	800f140 <dhcp_option>
 800eda0:	4603      	mov	r3, r0
 800eda2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800eda4:	2300      	movs	r3, #0
 800eda6:	77bb      	strb	r3, [r7, #30]
 800eda8:	e00e      	b.n	800edc8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800edaa:	89b8      	ldrh	r0, [r7, #12]
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800edb2:	7fbb      	ldrb	r3, [r7, #30]
 800edb4:	4a29      	ldr	r2, [pc, #164]	; (800ee5c <dhcp_rebind+0x128>)
 800edb6:	5cd3      	ldrb	r3, [r2, r3]
 800edb8:	461a      	mov	r2, r3
 800edba:	f000 f9f5 	bl	800f1a8 <dhcp_option_byte>
 800edbe:	4603      	mov	r3, r0
 800edc0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800edc2:	7fbb      	ldrb	r3, [r7, #30]
 800edc4:	3301      	adds	r3, #1
 800edc6:	77bb      	strb	r3, [r7, #30]
 800edc8:	7fbb      	ldrb	r3, [r7, #30]
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d9ed      	bls.n	800edaa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800edce:	89b8      	ldrh	r0, [r7, #12]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	33f0      	adds	r3, #240	; 0xf0
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	4619      	mov	r1, r3
 800edd8:	f000 fef8 	bl	800fbcc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800eddc:	4b20      	ldr	r3, [pc, #128]	; (800ee60 <dhcp_rebind+0x12c>)
 800edde:	6818      	ldr	r0, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	2343      	movs	r3, #67	; 0x43
 800ede6:	4a1f      	ldr	r2, [pc, #124]	; (800ee64 <dhcp_rebind+0x130>)
 800ede8:	6979      	ldr	r1, [r7, #20]
 800edea:	f7fe fdf3 	bl	800d9d4 <udp_sendto_if>
 800edee:	4603      	mov	r3, r0
 800edf0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800edf2:	6978      	ldr	r0, [r7, #20]
 800edf4:	f7f7 ffea 	bl	8006dcc <pbuf_free>
 800edf8:	e001      	b.n	800edfe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800edfa:	23ff      	movs	r3, #255	; 0xff
 800edfc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	799b      	ldrb	r3, [r3, #6]
 800ee02:	2bff      	cmp	r3, #255	; 0xff
 800ee04:	d005      	beq.n	800ee12 <dhcp_rebind+0xde>
    dhcp->tries++;
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	799b      	ldrb	r3, [r3, #6]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	799b      	ldrb	r3, [r3, #6]
 800ee16:	2b09      	cmp	r3, #9
 800ee18:	d80a      	bhi.n	800ee30 <dhcp_rebind+0xfc>
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	799b      	ldrb	r3, [r3, #6]
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	461a      	mov	r2, r3
 800ee22:	0152      	lsls	r2, r2, #5
 800ee24:	1ad2      	subs	r2, r2, r3
 800ee26:	0092      	lsls	r2, r2, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	e001      	b.n	800ee34 <dhcp_rebind+0x100>
 800ee30:	f242 7310 	movw	r3, #10000	; 0x2710
 800ee34:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ee36:	89fb      	ldrh	r3, [r7, #14]
 800ee38:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ee3c:	4a0a      	ldr	r2, [pc, #40]	; (800ee68 <dhcp_rebind+0x134>)
 800ee3e:	fb82 1203 	smull	r1, r2, r2, r3
 800ee42:	1152      	asrs	r2, r2, #5
 800ee44:	17db      	asrs	r3, r3, #31
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ee4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3720      	adds	r7, #32
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20000014 	.word	0x20000014
 800ee60:	20000550 	.word	0x20000550
 800ee64:	0801e090 	.word	0x0801e090
 800ee68:	10624dd3 	.word	0x10624dd3

0800ee6c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800ee6c:	b5b0      	push	{r4, r5, r7, lr}
 800ee6e:	b08a      	sub	sp, #40	; 0x28
 800ee70:	af02      	add	r7, sp, #8
 800ee72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a1b      	ldr	r3, [r3, #32]
 800ee78:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800ee7a:	2103      	movs	r1, #3
 800ee7c:	69b8      	ldr	r0, [r7, #24]
 800ee7e:	f000 f945 	bl	800f10c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ee82:	f107 030c 	add.w	r3, r7, #12
 800ee86:	2203      	movs	r2, #3
 800ee88:	69b9      	ldr	r1, [r7, #24]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fdc8 	bl	800fa20 <dhcp_create_msg>
 800ee90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d066      	beq.n	800ef66 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ee9e:	89b8      	ldrh	r0, [r7, #12]
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eea6:	2302      	movs	r3, #2
 800eea8:	2239      	movs	r2, #57	; 0x39
 800eeaa:	f000 f949 	bl	800f140 <dhcp_option>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800eeb2:	89b8      	ldrh	r0, [r7, #12]
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	33f0      	adds	r3, #240	; 0xf0
 800eeb8:	f44f 7210 	mov.w	r2, #576	; 0x240
 800eebc:	4619      	mov	r1, r3
 800eebe:	f000 f999 	bl	800f1f4 <dhcp_option_short>
 800eec2:	4603      	mov	r3, r0
 800eec4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800eec6:	89b8      	ldrh	r0, [r7, #12]
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eece:	2304      	movs	r3, #4
 800eed0:	2232      	movs	r2, #50	; 0x32
 800eed2:	f000 f935 	bl	800f140 <dhcp_option>
 800eed6:	4603      	mov	r3, r0
 800eed8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eeda:	89bc      	ldrh	r4, [r7, #12]
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	69db      	ldr	r3, [r3, #28]
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7f6 fcad 	bl	8005846 <lwip_htonl>
 800eeec:	4603      	mov	r3, r0
 800eeee:	461a      	mov	r2, r3
 800eef0:	4629      	mov	r1, r5
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 f9b0 	bl	800f258 <dhcp_option_long>
 800eef8:	4603      	mov	r3, r0
 800eefa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800eefc:	89b8      	ldrh	r0, [r7, #12]
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef04:	2303      	movs	r3, #3
 800ef06:	2237      	movs	r2, #55	; 0x37
 800ef08:	f000 f91a 	bl	800f140 <dhcp_option>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef10:	2300      	movs	r3, #0
 800ef12:	77bb      	strb	r3, [r7, #30]
 800ef14:	e00e      	b.n	800ef34 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ef16:	89b8      	ldrh	r0, [r7, #12]
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef1e:	7fbb      	ldrb	r3, [r7, #30]
 800ef20:	4a29      	ldr	r2, [pc, #164]	; (800efc8 <dhcp_reboot+0x15c>)
 800ef22:	5cd3      	ldrb	r3, [r2, r3]
 800ef24:	461a      	mov	r2, r3
 800ef26:	f000 f93f 	bl	800f1a8 <dhcp_option_byte>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef2e:	7fbb      	ldrb	r3, [r7, #30]
 800ef30:	3301      	adds	r3, #1
 800ef32:	77bb      	strb	r3, [r7, #30]
 800ef34:	7fbb      	ldrb	r3, [r7, #30]
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d9ed      	bls.n	800ef16 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ef3a:	89b8      	ldrh	r0, [r7, #12]
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	33f0      	adds	r3, #240	; 0xf0
 800ef40:	697a      	ldr	r2, [r7, #20]
 800ef42:	4619      	mov	r1, r3
 800ef44:	f000 fe42 	bl	800fbcc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ef48:	4b20      	ldr	r3, [pc, #128]	; (800efcc <dhcp_reboot+0x160>)
 800ef4a:	6818      	ldr	r0, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	9300      	str	r3, [sp, #0]
 800ef50:	2343      	movs	r3, #67	; 0x43
 800ef52:	4a1f      	ldr	r2, [pc, #124]	; (800efd0 <dhcp_reboot+0x164>)
 800ef54:	6979      	ldr	r1, [r7, #20]
 800ef56:	f7fe fd3d 	bl	800d9d4 <udp_sendto_if>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ef5e:	6978      	ldr	r0, [r7, #20]
 800ef60:	f7f7 ff34 	bl	8006dcc <pbuf_free>
 800ef64:	e001      	b.n	800ef6a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ef66:	23ff      	movs	r3, #255	; 0xff
 800ef68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	799b      	ldrb	r3, [r3, #6]
 800ef6e:	2bff      	cmp	r3, #255	; 0xff
 800ef70:	d005      	beq.n	800ef7e <dhcp_reboot+0x112>
    dhcp->tries++;
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	799b      	ldrb	r3, [r3, #6]
 800ef76:	3301      	adds	r3, #1
 800ef78:	b2da      	uxtb	r2, r3
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	799b      	ldrb	r3, [r3, #6]
 800ef82:	2b09      	cmp	r3, #9
 800ef84:	d80a      	bhi.n	800ef9c <dhcp_reboot+0x130>
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	799b      	ldrb	r3, [r3, #6]
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	0152      	lsls	r2, r2, #5
 800ef90:	1ad2      	subs	r2, r2, r3
 800ef92:	0092      	lsls	r2, r2, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	e001      	b.n	800efa0 <dhcp_reboot+0x134>
 800ef9c:	f242 7310 	movw	r3, #10000	; 0x2710
 800efa0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800efa2:	89fb      	ldrh	r3, [r7, #14]
 800efa4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800efa8:	4a0a      	ldr	r2, [pc, #40]	; (800efd4 <dhcp_reboot+0x168>)
 800efaa:	fb82 1203 	smull	r1, r2, r2, r3
 800efae:	1152      	asrs	r2, r2, #5
 800efb0:	17db      	asrs	r3, r3, #31
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800efba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3720      	adds	r7, #32
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bdb0      	pop	{r4, r5, r7, pc}
 800efc6:	bf00      	nop
 800efc8:	20000014 	.word	0x20000014
 800efcc:	20000550 	.word	0x20000550
 800efd0:	0801e090 	.word	0x0801e090
 800efd4:	10624dd3 	.word	0x10624dd3

0800efd8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800efd8:	b5b0      	push	{r4, r5, r7, lr}
 800efda:	b08a      	sub	sp, #40	; 0x28
 800efdc:	af02      	add	r7, sp, #8
 800efde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a1b      	ldr	r3, [r3, #32]
 800efe4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800efe6:	69fb      	ldr	r3, [r7, #28]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	f000 8084 	beq.w	800f0f6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	795b      	ldrb	r3, [r3, #5]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 8081 	beq.w	800f0fa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	699b      	ldr	r3, [r3, #24]
 800effc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800effe:	69fb      	ldr	r3, [r7, #28]
 800f000:	2200      	movs	r2, #0
 800f002:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	2200      	movs	r2, #0
 800f008:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	2200      	movs	r2, #0
 800f00e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	2200      	movs	r2, #0
 800f014:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	2200      	movs	r2, #0
 800f01a:	631a      	str	r2, [r3, #48]	; 0x30
 800f01c:	69fb      	ldr	r3, [r7, #28]
 800f01e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	62da      	str	r2, [r3, #44]	; 0x2c
 800f024:	69fb      	ldr	r3, [r7, #28]
 800f026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	2200      	movs	r2, #0
 800f030:	829a      	strh	r2, [r3, #20]
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	8a9a      	ldrh	r2, [r3, #20]
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	825a      	strh	r2, [r3, #18]
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	8a5a      	ldrh	r2, [r3, #18]
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	821a      	strh	r2, [r3, #16]
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	8a1a      	ldrh	r2, [r3, #16]
 800f046:	69fb      	ldr	r3, [r7, #28]
 800f048:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 fdec 	bl	800fc28 <dhcp_supplied_address>
 800f050:	4603      	mov	r3, r0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d03b      	beq.n	800f0ce <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f056:	f107 030e 	add.w	r3, r7, #14
 800f05a:	2207      	movs	r2, #7
 800f05c:	69f9      	ldr	r1, [r7, #28]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 fcde 	bl	800fa20 <dhcp_create_msg>
 800f064:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d030      	beq.n	800f0ce <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f072:	89f8      	ldrh	r0, [r7, #14]
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f07a:	2304      	movs	r3, #4
 800f07c:	2236      	movs	r2, #54	; 0x36
 800f07e:	f000 f85f 	bl	800f140 <dhcp_option>
 800f082:	4603      	mov	r3, r0
 800f084:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f086:	89fc      	ldrh	r4, [r7, #14]
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	4618      	mov	r0, r3
 800f092:	f7f6 fbd8 	bl	8005846 <lwip_htonl>
 800f096:	4603      	mov	r3, r0
 800f098:	461a      	mov	r2, r3
 800f09a:	4629      	mov	r1, r5
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 f8db 	bl	800f258 <dhcp_option_long>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f0a6:	89f8      	ldrh	r0, [r7, #14]
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	33f0      	adds	r3, #240	; 0xf0
 800f0ac:	69ba      	ldr	r2, [r7, #24]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	f000 fd8c 	bl	800fbcc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f0b4:	4b13      	ldr	r3, [pc, #76]	; (800f104 <dhcp_release_and_stop+0x12c>)
 800f0b6:	6818      	ldr	r0, [r3, #0]
 800f0b8:	f107 0210 	add.w	r2, r7, #16
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	9300      	str	r3, [sp, #0]
 800f0c0:	2343      	movs	r3, #67	; 0x43
 800f0c2:	69b9      	ldr	r1, [r7, #24]
 800f0c4:	f7fe fc86 	bl	800d9d4 <udp_sendto_if>
      pbuf_free(p_out);
 800f0c8:	69b8      	ldr	r0, [r7, #24]
 800f0ca:	f7f7 fe7f 	bl	8006dcc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f0ce:	4b0e      	ldr	r3, [pc, #56]	; (800f108 <dhcp_release_and_stop+0x130>)
 800f0d0:	4a0d      	ldr	r2, [pc, #52]	; (800f108 <dhcp_release_and_stop+0x130>)
 800f0d2:	490d      	ldr	r1, [pc, #52]	; (800f108 <dhcp_release_and_stop+0x130>)
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7f7 fa17 	bl	8006508 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f0da:	2100      	movs	r1, #0
 800f0dc:	69f8      	ldr	r0, [r7, #28]
 800f0de:	f000 f815 	bl	800f10c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	791b      	ldrb	r3, [r3, #4]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d008      	beq.n	800f0fc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f0ea:	f7fe ffbf 	bl	800e06c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	711a      	strb	r2, [r3, #4]
 800f0f4:	e002      	b.n	800f0fc <dhcp_release_and_stop+0x124>
    return;
 800f0f6:	bf00      	nop
 800f0f8:	e000      	b.n	800f0fc <dhcp_release_and_stop+0x124>
    return;
 800f0fa:	bf00      	nop
  }
}
 800f0fc:	3720      	adds	r7, #32
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bdb0      	pop	{r4, r5, r7, pc}
 800f102:	bf00      	nop
 800f104:	20000550 	.word	0x20000550
 800f108:	0801e08c 	.word	0x0801e08c

0800f10c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	460b      	mov	r3, r1
 800f116:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	795b      	ldrb	r3, [r3, #5]
 800f11c:	78fa      	ldrb	r2, [r7, #3]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d008      	beq.n	800f134 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	78fa      	ldrb	r2, [r7, #3]
 800f126:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	811a      	strh	r2, [r3, #8]
  }
}
 800f134:	bf00      	nop
 800f136:	370c      	adds	r7, #12
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6039      	str	r1, [r7, #0]
 800f148:	4611      	mov	r1, r2
 800f14a:	461a      	mov	r2, r3
 800f14c:	4603      	mov	r3, r0
 800f14e:	80fb      	strh	r3, [r7, #6]
 800f150:	460b      	mov	r3, r1
 800f152:	717b      	strb	r3, [r7, #5]
 800f154:	4613      	mov	r3, r2
 800f156:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f158:	88fa      	ldrh	r2, [r7, #6]
 800f15a:	793b      	ldrb	r3, [r7, #4]
 800f15c:	4413      	add	r3, r2
 800f15e:	3302      	adds	r3, #2
 800f160:	2b44      	cmp	r3, #68	; 0x44
 800f162:	d906      	bls.n	800f172 <dhcp_option+0x32>
 800f164:	4b0d      	ldr	r3, [pc, #52]	; (800f19c <dhcp_option+0x5c>)
 800f166:	f240 529a 	movw	r2, #1434	; 0x59a
 800f16a:	490d      	ldr	r1, [pc, #52]	; (800f1a0 <dhcp_option+0x60>)
 800f16c:	480d      	ldr	r0, [pc, #52]	; (800f1a4 <dhcp_option+0x64>)
 800f16e:	f003 f8a3 	bl	80122b8 <iprintf>
  options[options_out_len++] = option_type;
 800f172:	88fb      	ldrh	r3, [r7, #6]
 800f174:	1c5a      	adds	r2, r3, #1
 800f176:	80fa      	strh	r2, [r7, #6]
 800f178:	461a      	mov	r2, r3
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	4413      	add	r3, r2
 800f17e:	797a      	ldrb	r2, [r7, #5]
 800f180:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f182:	88fb      	ldrh	r3, [r7, #6]
 800f184:	1c5a      	adds	r2, r3, #1
 800f186:	80fa      	strh	r2, [r7, #6]
 800f188:	461a      	mov	r2, r3
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	4413      	add	r3, r2
 800f18e:	793a      	ldrb	r2, [r7, #4]
 800f190:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f192:	88fb      	ldrh	r3, [r7, #6]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	0801568c 	.word	0x0801568c
 800f1a0:	08015820 	.word	0x08015820
 800f1a4:	080156ec 	.word	0x080156ec

0800f1a8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	6039      	str	r1, [r7, #0]
 800f1b2:	80fb      	strh	r3, [r7, #6]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f1b8:	88fb      	ldrh	r3, [r7, #6]
 800f1ba:	2b43      	cmp	r3, #67	; 0x43
 800f1bc:	d906      	bls.n	800f1cc <dhcp_option_byte+0x24>
 800f1be:	4b0a      	ldr	r3, [pc, #40]	; (800f1e8 <dhcp_option_byte+0x40>)
 800f1c0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f1c4:	4909      	ldr	r1, [pc, #36]	; (800f1ec <dhcp_option_byte+0x44>)
 800f1c6:	480a      	ldr	r0, [pc, #40]	; (800f1f0 <dhcp_option_byte+0x48>)
 800f1c8:	f003 f876 	bl	80122b8 <iprintf>
  options[options_out_len++] = value;
 800f1cc:	88fb      	ldrh	r3, [r7, #6]
 800f1ce:	1c5a      	adds	r2, r3, #1
 800f1d0:	80fa      	strh	r2, [r7, #6]
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	797a      	ldrb	r2, [r7, #5]
 800f1da:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f1dc:	88fb      	ldrh	r3, [r7, #6]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	0801568c 	.word	0x0801568c
 800f1ec:	08015864 	.word	0x08015864
 800f1f0:	080156ec 	.word	0x080156ec

0800f1f4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b082      	sub	sp, #8
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	6039      	str	r1, [r7, #0]
 800f1fe:	80fb      	strh	r3, [r7, #6]
 800f200:	4613      	mov	r3, r2
 800f202:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f204:	88fb      	ldrh	r3, [r7, #6]
 800f206:	3302      	adds	r3, #2
 800f208:	2b44      	cmp	r3, #68	; 0x44
 800f20a:	d906      	bls.n	800f21a <dhcp_option_short+0x26>
 800f20c:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <dhcp_option_short+0x58>)
 800f20e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f212:	490f      	ldr	r1, [pc, #60]	; (800f250 <dhcp_option_short+0x5c>)
 800f214:	480f      	ldr	r0, [pc, #60]	; (800f254 <dhcp_option_short+0x60>)
 800f216:	f003 f84f 	bl	80122b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f21a:	88bb      	ldrh	r3, [r7, #4]
 800f21c:	0a1b      	lsrs	r3, r3, #8
 800f21e:	b29a      	uxth	r2, r3
 800f220:	88fb      	ldrh	r3, [r7, #6]
 800f222:	1c59      	adds	r1, r3, #1
 800f224:	80f9      	strh	r1, [r7, #6]
 800f226:	4619      	mov	r1, r3
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	440b      	add	r3, r1
 800f22c:	b2d2      	uxtb	r2, r2
 800f22e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f230:	88fb      	ldrh	r3, [r7, #6]
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	80fa      	strh	r2, [r7, #6]
 800f236:	461a      	mov	r2, r3
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	4413      	add	r3, r2
 800f23c:	88ba      	ldrh	r2, [r7, #4]
 800f23e:	b2d2      	uxtb	r2, r2
 800f240:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f242:	88fb      	ldrh	r3, [r7, #6]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	0801568c 	.word	0x0801568c
 800f250:	0801589c 	.word	0x0801589c
 800f254:	080156ec 	.word	0x080156ec

0800f258 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	4603      	mov	r3, r0
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
 800f264:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f266:	89fb      	ldrh	r3, [r7, #14]
 800f268:	3304      	adds	r3, #4
 800f26a:	2b44      	cmp	r3, #68	; 0x44
 800f26c:	d906      	bls.n	800f27c <dhcp_option_long+0x24>
 800f26e:	4b19      	ldr	r3, [pc, #100]	; (800f2d4 <dhcp_option_long+0x7c>)
 800f270:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f274:	4918      	ldr	r1, [pc, #96]	; (800f2d8 <dhcp_option_long+0x80>)
 800f276:	4819      	ldr	r0, [pc, #100]	; (800f2dc <dhcp_option_long+0x84>)
 800f278:	f003 f81e 	bl	80122b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	0e1a      	lsrs	r2, r3, #24
 800f280:	89fb      	ldrh	r3, [r7, #14]
 800f282:	1c59      	adds	r1, r3, #1
 800f284:	81f9      	strh	r1, [r7, #14]
 800f286:	4619      	mov	r1, r3
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	440b      	add	r3, r1
 800f28c:	b2d2      	uxtb	r2, r2
 800f28e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	0c1a      	lsrs	r2, r3, #16
 800f294:	89fb      	ldrh	r3, [r7, #14]
 800f296:	1c59      	adds	r1, r3, #1
 800f298:	81f9      	strh	r1, [r7, #14]
 800f29a:	4619      	mov	r1, r3
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	440b      	add	r3, r1
 800f2a0:	b2d2      	uxtb	r2, r2
 800f2a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	0a1a      	lsrs	r2, r3, #8
 800f2a8:	89fb      	ldrh	r3, [r7, #14]
 800f2aa:	1c59      	adds	r1, r3, #1
 800f2ac:	81f9      	strh	r1, [r7, #14]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	440b      	add	r3, r1
 800f2b4:	b2d2      	uxtb	r2, r2
 800f2b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f2b8:	89fb      	ldrh	r3, [r7, #14]
 800f2ba:	1c5a      	adds	r2, r3, #1
 800f2bc:	81fa      	strh	r2, [r7, #14]
 800f2be:	461a      	mov	r2, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	4413      	add	r3, r2
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	b2d2      	uxtb	r2, r2
 800f2c8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f2ca:	89fb      	ldrh	r3, [r7, #14]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3710      	adds	r7, #16
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}
 800f2d4:	0801568c 	.word	0x0801568c
 800f2d8:	080158d8 	.word	0x080158d8
 800f2dc:	080156ec 	.word	0x080156ec

0800f2e0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b090      	sub	sp, #64	; 0x40
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f2f2:	2208      	movs	r2, #8
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	48be      	ldr	r0, [pc, #760]	; (800f5f0 <dhcp_parse_reply+0x310>)
 800f2f8:	f002 ffd6 	bl	80122a8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	895b      	ldrh	r3, [r3, #10]
 800f300:	2b2b      	cmp	r3, #43	; 0x2b
 800f302:	d802      	bhi.n	800f30a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f304:	f06f 0301 	mvn.w	r3, #1
 800f308:	e2a8      	b.n	800f85c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f310:	23f0      	movs	r3, #240	; 0xf0
 800f312:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	891b      	ldrh	r3, [r3, #8]
 800f318:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f31e:	e00c      	b.n	800f33a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f322:	895b      	ldrh	r3, [r3, #10]
 800f324:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f32c:	895b      	ldrh	r3, [r3, #10]
 800f32e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f330:	1ad3      	subs	r3, r2, r3
 800f332:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d004      	beq.n	800f34a <dhcp_parse_reply+0x6a>
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	895b      	ldrh	r3, [r3, #10]
 800f344:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f346:	429a      	cmp	r2, r3
 800f348:	d2ea      	bcs.n	800f320 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d102      	bne.n	800f356 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f350:	f06f 0301 	mvn.w	r3, #1
 800f354:	e282      	b.n	800f85c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800f356:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f358:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f35a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f35c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f364:	e23a      	b.n	800f7dc <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800f366:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f36a:	4413      	add	r3, r2
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f376:	f04f 33ff 	mov.w	r3, #4294967295
 800f37a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f37c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f37e:	3302      	adds	r3, #2
 800f380:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f382:	8bfa      	ldrh	r2, [r7, #30]
 800f384:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f386:	429a      	cmp	r2, r3
 800f388:	d202      	bcs.n	800f390 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f38a:	f06f 0301 	mvn.w	r3, #1
 800f38e:	e265      	b.n	800f85c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f392:	3301      	adds	r3, #1
 800f394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f396:	8952      	ldrh	r2, [r2, #10]
 800f398:	4293      	cmp	r3, r2
 800f39a:	da07      	bge.n	800f3ac <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f39c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f39e:	3301      	adds	r3, #1
 800f3a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3a2:	4413      	add	r3, r2
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3aa:	e00b      	b.n	800f3c4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <dhcp_parse_reply+0xde>
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	e000      	b.n	800f3c0 <dhcp_parse_reply+0xe0>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
 800f3ce:	2b3b      	cmp	r3, #59	; 0x3b
 800f3d0:	f200 812d 	bhi.w	800f62e <dhcp_parse_reply+0x34e>
 800f3d4:	a201      	add	r2, pc, #4	; (adr r2, 800f3dc <dhcp_parse_reply+0xfc>)
 800f3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3da:	bf00      	nop
 800f3dc:	0800f4cd 	.word	0x0800f4cd
 800f3e0:	0800f4dd 	.word	0x0800f4dd
 800f3e4:	0800f62f 	.word	0x0800f62f
 800f3e8:	0800f4ff 	.word	0x0800f4ff
 800f3ec:	0800f62f 	.word	0x0800f62f
 800f3f0:	0800f62f 	.word	0x0800f62f
 800f3f4:	0800f62f 	.word	0x0800f62f
 800f3f8:	0800f62f 	.word	0x0800f62f
 800f3fc:	0800f62f 	.word	0x0800f62f
 800f400:	0800f62f 	.word	0x0800f62f
 800f404:	0800f62f 	.word	0x0800f62f
 800f408:	0800f62f 	.word	0x0800f62f
 800f40c:	0800f62f 	.word	0x0800f62f
 800f410:	0800f62f 	.word	0x0800f62f
 800f414:	0800f62f 	.word	0x0800f62f
 800f418:	0800f62f 	.word	0x0800f62f
 800f41c:	0800f62f 	.word	0x0800f62f
 800f420:	0800f62f 	.word	0x0800f62f
 800f424:	0800f62f 	.word	0x0800f62f
 800f428:	0800f62f 	.word	0x0800f62f
 800f42c:	0800f62f 	.word	0x0800f62f
 800f430:	0800f62f 	.word	0x0800f62f
 800f434:	0800f62f 	.word	0x0800f62f
 800f438:	0800f62f 	.word	0x0800f62f
 800f43c:	0800f62f 	.word	0x0800f62f
 800f440:	0800f62f 	.word	0x0800f62f
 800f444:	0800f62f 	.word	0x0800f62f
 800f448:	0800f62f 	.word	0x0800f62f
 800f44c:	0800f62f 	.word	0x0800f62f
 800f450:	0800f62f 	.word	0x0800f62f
 800f454:	0800f62f 	.word	0x0800f62f
 800f458:	0800f62f 	.word	0x0800f62f
 800f45c:	0800f62f 	.word	0x0800f62f
 800f460:	0800f62f 	.word	0x0800f62f
 800f464:	0800f62f 	.word	0x0800f62f
 800f468:	0800f62f 	.word	0x0800f62f
 800f46c:	0800f62f 	.word	0x0800f62f
 800f470:	0800f62f 	.word	0x0800f62f
 800f474:	0800f62f 	.word	0x0800f62f
 800f478:	0800f62f 	.word	0x0800f62f
 800f47c:	0800f62f 	.word	0x0800f62f
 800f480:	0800f62f 	.word	0x0800f62f
 800f484:	0800f62f 	.word	0x0800f62f
 800f488:	0800f62f 	.word	0x0800f62f
 800f48c:	0800f62f 	.word	0x0800f62f
 800f490:	0800f62f 	.word	0x0800f62f
 800f494:	0800f62f 	.word	0x0800f62f
 800f498:	0800f62f 	.word	0x0800f62f
 800f49c:	0800f62f 	.word	0x0800f62f
 800f4a0:	0800f62f 	.word	0x0800f62f
 800f4a4:	0800f62f 	.word	0x0800f62f
 800f4a8:	0800f52b 	.word	0x0800f52b
 800f4ac:	0800f54d 	.word	0x0800f54d
 800f4b0:	0800f589 	.word	0x0800f589
 800f4b4:	0800f5ab 	.word	0x0800f5ab
 800f4b8:	0800f62f 	.word	0x0800f62f
 800f4bc:	0800f62f 	.word	0x0800f62f
 800f4c0:	0800f62f 	.word	0x0800f62f
 800f4c4:	0800f5cd 	.word	0x0800f5cd
 800f4c8:	0800f60d 	.word	0x0800f60d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f4da:	e0ac      	b.n	800f636 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4e0:	2b04      	cmp	r3, #4
 800f4e2:	d009      	beq.n	800f4f8 <dhcp_parse_reply+0x218>
 800f4e4:	4b43      	ldr	r3, [pc, #268]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f4e6:	f240 622e 	movw	r2, #1582	; 0x62e
 800f4ea:	4943      	ldr	r1, [pc, #268]	; (800f5f8 <dhcp_parse_reply+0x318>)
 800f4ec:	4843      	ldr	r0, [pc, #268]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f4ee:	f002 fee3 	bl	80122b8 <iprintf>
 800f4f2:	f06f 0305 	mvn.w	r3, #5
 800f4f6:	e1b1      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f4f8:	2306      	movs	r3, #6
 800f4fa:	623b      	str	r3, [r7, #32]
        break;
 800f4fc:	e09b      	b.n	800f636 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f4fe:	2304      	movs	r3, #4
 800f500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f504:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d209      	bcs.n	800f524 <dhcp_parse_reply+0x244>
 800f510:	4b38      	ldr	r3, [pc, #224]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f512:	f240 6233 	movw	r2, #1587	; 0x633
 800f516:	493a      	ldr	r1, [pc, #232]	; (800f600 <dhcp_parse_reply+0x320>)
 800f518:	4838      	ldr	r0, [pc, #224]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f51a:	f002 fecd 	bl	80122b8 <iprintf>
 800f51e:	f06f 0305 	mvn.w	r3, #5
 800f522:	e19b      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f524:	2307      	movs	r3, #7
 800f526:	623b      	str	r3, [r7, #32]
        break;
 800f528:	e085      	b.n	800f636 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f52a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f52e:	2b04      	cmp	r3, #4
 800f530:	d009      	beq.n	800f546 <dhcp_parse_reply+0x266>
 800f532:	4b30      	ldr	r3, [pc, #192]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f534:	f240 6241 	movw	r2, #1601	; 0x641
 800f538:	492f      	ldr	r1, [pc, #188]	; (800f5f8 <dhcp_parse_reply+0x318>)
 800f53a:	4830      	ldr	r0, [pc, #192]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f53c:	f002 febc 	bl	80122b8 <iprintf>
 800f540:	f06f 0305 	mvn.w	r3, #5
 800f544:	e18a      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f546:	2303      	movs	r3, #3
 800f548:	623b      	str	r3, [r7, #32]
        break;
 800f54a:	e074      	b.n	800f636 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f550:	2b01      	cmp	r3, #1
 800f552:	d009      	beq.n	800f568 <dhcp_parse_reply+0x288>
 800f554:	4b27      	ldr	r3, [pc, #156]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f556:	f240 624f 	movw	r2, #1615	; 0x64f
 800f55a:	492a      	ldr	r1, [pc, #168]	; (800f604 <dhcp_parse_reply+0x324>)
 800f55c:	4827      	ldr	r0, [pc, #156]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f55e:	f002 feab 	bl	80122b8 <iprintf>
 800f562:	f06f 0305 	mvn.w	r3, #5
 800f566:	e179      	b.n	800f85c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f568:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f56a:	2bf0      	cmp	r3, #240	; 0xf0
 800f56c:	d009      	beq.n	800f582 <dhcp_parse_reply+0x2a2>
 800f56e:	4b21      	ldr	r3, [pc, #132]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f570:	f240 6251 	movw	r2, #1617	; 0x651
 800f574:	4924      	ldr	r1, [pc, #144]	; (800f608 <dhcp_parse_reply+0x328>)
 800f576:	4821      	ldr	r0, [pc, #132]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f578:	f002 fe9e 	bl	80122b8 <iprintf>
 800f57c:	f06f 0305 	mvn.w	r3, #5
 800f580:	e16c      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f582:	2300      	movs	r3, #0
 800f584:	623b      	str	r3, [r7, #32]
        break;
 800f586:	e056      	b.n	800f636 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d009      	beq.n	800f5a4 <dhcp_parse_reply+0x2c4>
 800f590:	4b18      	ldr	r3, [pc, #96]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f592:	f240 6255 	movw	r2, #1621	; 0x655
 800f596:	491b      	ldr	r1, [pc, #108]	; (800f604 <dhcp_parse_reply+0x324>)
 800f598:	4818      	ldr	r0, [pc, #96]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f59a:	f002 fe8d 	bl	80122b8 <iprintf>
 800f59e:	f06f 0305 	mvn.w	r3, #5
 800f5a2:	e15b      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	623b      	str	r3, [r7, #32]
        break;
 800f5a8:	e045      	b.n	800f636 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5ae:	2b04      	cmp	r3, #4
 800f5b0:	d009      	beq.n	800f5c6 <dhcp_parse_reply+0x2e6>
 800f5b2:	4b10      	ldr	r3, [pc, #64]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f5b4:	f240 6259 	movw	r2, #1625	; 0x659
 800f5b8:	490f      	ldr	r1, [pc, #60]	; (800f5f8 <dhcp_parse_reply+0x318>)
 800f5ba:	4810      	ldr	r0, [pc, #64]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f5bc:	f002 fe7c 	bl	80122b8 <iprintf>
 800f5c0:	f06f 0305 	mvn.w	r3, #5
 800f5c4:	e14a      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f5c6:	2302      	movs	r3, #2
 800f5c8:	623b      	str	r3, [r7, #32]
        break;
 800f5ca:	e034      	b.n	800f636 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5d0:	2b04      	cmp	r3, #4
 800f5d2:	d009      	beq.n	800f5e8 <dhcp_parse_reply+0x308>
 800f5d4:	4b07      	ldr	r3, [pc, #28]	; (800f5f4 <dhcp_parse_reply+0x314>)
 800f5d6:	f240 625d 	movw	r2, #1629	; 0x65d
 800f5da:	4907      	ldr	r1, [pc, #28]	; (800f5f8 <dhcp_parse_reply+0x318>)
 800f5dc:	4807      	ldr	r0, [pc, #28]	; (800f5fc <dhcp_parse_reply+0x31c>)
 800f5de:	f002 fe6b 	bl	80122b8 <iprintf>
 800f5e2:	f06f 0305 	mvn.w	r3, #5
 800f5e6:	e139      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f5e8:	2304      	movs	r3, #4
 800f5ea:	623b      	str	r3, [r7, #32]
        break;
 800f5ec:	e023      	b.n	800f636 <dhcp_parse_reply+0x356>
 800f5ee:	bf00      	nop
 800f5f0:	20007190 	.word	0x20007190
 800f5f4:	0801568c 	.word	0x0801568c
 800f5f8:	08015914 	.word	0x08015914
 800f5fc:	080156ec 	.word	0x080156ec
 800f600:	08015920 	.word	0x08015920
 800f604:	08015934 	.word	0x08015934
 800f608:	08015940 	.word	0x08015940
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f610:	2b04      	cmp	r3, #4
 800f612:	d009      	beq.n	800f628 <dhcp_parse_reply+0x348>
 800f614:	4b93      	ldr	r3, [pc, #588]	; (800f864 <dhcp_parse_reply+0x584>)
 800f616:	f240 6261 	movw	r2, #1633	; 0x661
 800f61a:	4993      	ldr	r1, [pc, #588]	; (800f868 <dhcp_parse_reply+0x588>)
 800f61c:	4893      	ldr	r0, [pc, #588]	; (800f86c <dhcp_parse_reply+0x58c>)
 800f61e:	f002 fe4b 	bl	80122b8 <iprintf>
 800f622:	f06f 0305 	mvn.w	r3, #5
 800f626:	e119      	b.n	800f85c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f628:	2305      	movs	r3, #5
 800f62a:	623b      	str	r3, [r7, #32]
        break;
 800f62c:	e003      	b.n	800f636 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800f62e:	2300      	movs	r3, #0
 800f630:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800f634:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800f636:	7dfb      	ldrb	r3, [r7, #23]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d103      	bne.n	800f644 <dhcp_parse_reply+0x364>
      offset++;
 800f63c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f63e:	3301      	adds	r3, #1
 800f640:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f642:	e0a1      	b.n	800f788 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800f644:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f646:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f64a:	4413      	add	r3, r2
 800f64c:	3302      	adds	r3, #2
 800f64e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f652:	db02      	blt.n	800f65a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800f654:	f06f 0301 	mvn.w	r3, #1
 800f658:	e100      	b.n	800f85c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800f65a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f65e:	b29a      	uxth	r2, r3
 800f660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f662:	4413      	add	r3, r2
 800f664:	b29b      	uxth	r3, r3
 800f666:	3302      	adds	r3, #2
 800f668:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800f66a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f000 808a 	beq.w	800f788 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800f674:	2300      	movs	r3, #0
 800f676:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	db02      	blt.n	800f684 <dhcp_parse_reply+0x3a4>
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	2b07      	cmp	r3, #7
 800f682:	dd06      	ble.n	800f692 <dhcp_parse_reply+0x3b2>
 800f684:	4b77      	ldr	r3, [pc, #476]	; (800f864 <dhcp_parse_reply+0x584>)
 800f686:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f68a:	4979      	ldr	r1, [pc, #484]	; (800f870 <dhcp_parse_reply+0x590>)
 800f68c:	4877      	ldr	r0, [pc, #476]	; (800f86c <dhcp_parse_reply+0x58c>)
 800f68e:	f002 fe13 	bl	80122b8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f692:	4a78      	ldr	r2, [pc, #480]	; (800f874 <dhcp_parse_reply+0x594>)
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	4413      	add	r3, r2
 800f698:	781b      	ldrb	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d174      	bne.n	800f788 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800f69e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6a2:	2b04      	cmp	r3, #4
 800f6a4:	bf28      	it	cs
 800f6a6:	2304      	movcs	r3, #4
 800f6a8:	b2db      	uxtb	r3, r3
 800f6aa:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f6ac:	8bfb      	ldrh	r3, [r7, #30]
 800f6ae:	8aba      	ldrh	r2, [r7, #20]
 800f6b0:	f107 0108 	add.w	r1, r7, #8
 800f6b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6b6:	f7f7 fd83 	bl	80071c0 <pbuf_copy_partial>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	461a      	mov	r2, r3
 800f6be:	8abb      	ldrh	r3, [r7, #20]
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d002      	beq.n	800f6ca <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800f6c4:	f06f 0301 	mvn.w	r3, #1
 800f6c8:	e0c8      	b.n	800f85c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800f6ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6ce:	2b04      	cmp	r3, #4
 800f6d0:	d933      	bls.n	800f73a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f6d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6d6:	f003 0303 	and.w	r3, r3, #3
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d009      	beq.n	800f6f4 <dhcp_parse_reply+0x414>
 800f6e0:	4b60      	ldr	r3, [pc, #384]	; (800f864 <dhcp_parse_reply+0x584>)
 800f6e2:	f240 6281 	movw	r2, #1665	; 0x681
 800f6e6:	4964      	ldr	r1, [pc, #400]	; (800f878 <dhcp_parse_reply+0x598>)
 800f6e8:	4860      	ldr	r0, [pc, #384]	; (800f86c <dhcp_parse_reply+0x58c>)
 800f6ea:	f002 fde5 	bl	80122b8 <iprintf>
 800f6ee:	f06f 0305 	mvn.w	r3, #5
 800f6f2:	e0b3      	b.n	800f85c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800f6f4:	4a5f      	ldr	r2, [pc, #380]	; (800f874 <dhcp_parse_reply+0x594>)
 800f6f6:	6a3b      	ldr	r3, [r7, #32]
 800f6f8:	4413      	add	r3, r2
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	4618      	mov	r0, r3
 800f702:	f7f6 f8a0 	bl	8005846 <lwip_htonl>
 800f706:	4601      	mov	r1, r0
 800f708:	4a5c      	ldr	r2, [pc, #368]	; (800f87c <dhcp_parse_reply+0x59c>)
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800f710:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f714:	3b04      	subs	r3, #4
 800f716:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800f71a:	8bfb      	ldrh	r3, [r7, #30]
 800f71c:	3304      	adds	r3, #4
 800f71e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800f720:	8a7a      	ldrh	r2, [r7, #18]
 800f722:	8bfb      	ldrh	r3, [r7, #30]
 800f724:	429a      	cmp	r2, r3
 800f726:	d202      	bcs.n	800f72e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800f728:	f06f 0301 	mvn.w	r3, #1
 800f72c:	e096      	b.n	800f85c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800f72e:	8a7b      	ldrh	r3, [r7, #18]
 800f730:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800f732:	6a3b      	ldr	r3, [r7, #32]
 800f734:	3301      	adds	r3, #1
 800f736:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800f738:	e79e      	b.n	800f678 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800f73a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f73e:	2b04      	cmp	r3, #4
 800f740:	d106      	bne.n	800f750 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	4618      	mov	r0, r3
 800f746:	f7f6 f87e 	bl	8005846 <lwip_htonl>
 800f74a:	4603      	mov	r3, r0
 800f74c:	60bb      	str	r3, [r7, #8]
 800f74e:	e011      	b.n	800f774 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800f750:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f754:	2b01      	cmp	r3, #1
 800f756:	d009      	beq.n	800f76c <dhcp_parse_reply+0x48c>
 800f758:	4b42      	ldr	r3, [pc, #264]	; (800f864 <dhcp_parse_reply+0x584>)
 800f75a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800f75e:	4948      	ldr	r1, [pc, #288]	; (800f880 <dhcp_parse_reply+0x5a0>)
 800f760:	4842      	ldr	r0, [pc, #264]	; (800f86c <dhcp_parse_reply+0x58c>)
 800f762:	f002 fda9 	bl	80122b8 <iprintf>
 800f766:	f06f 0305 	mvn.w	r3, #5
 800f76a:	e077      	b.n	800f85c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800f76c:	f107 0308 	add.w	r3, r7, #8
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800f774:	4a3f      	ldr	r2, [pc, #252]	; (800f874 <dhcp_parse_reply+0x594>)
 800f776:	6a3b      	ldr	r3, [r7, #32]
 800f778:	4413      	add	r3, r2
 800f77a:	2201      	movs	r2, #1
 800f77c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	493e      	ldr	r1, [pc, #248]	; (800f87c <dhcp_parse_reply+0x59c>)
 800f782:	6a3b      	ldr	r3, [r7, #32]
 800f784:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	895b      	ldrh	r3, [r3, #10]
 800f78c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f78e:	429a      	cmp	r2, r3
 800f790:	d324      	bcc.n	800f7dc <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	895b      	ldrh	r3, [r3, #10]
 800f796:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	895b      	ldrh	r3, [r3, #10]
 800f7a0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800f7a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f7a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	d213      	bcs.n	800f7d6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800f7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d109      	bne.n	800f7ce <dhcp_parse_reply+0x4ee>
 800f7ba:	4b2a      	ldr	r3, [pc, #168]	; (800f864 <dhcp_parse_reply+0x584>)
 800f7bc:	f240 629d 	movw	r2, #1693	; 0x69d
 800f7c0:	4930      	ldr	r1, [pc, #192]	; (800f884 <dhcp_parse_reply+0x5a4>)
 800f7c2:	482a      	ldr	r0, [pc, #168]	; (800f86c <dhcp_parse_reply+0x58c>)
 800f7c4:	f002 fd78 	bl	80122b8 <iprintf>
 800f7c8:	f06f 0305 	mvn.w	r3, #5
 800f7cc:	e046      	b.n	800f85c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7d4:	e002      	b.n	800f7dc <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800f7d6:	f06f 0301 	mvn.w	r3, #1
 800f7da:	e03f      	b.n	800f85c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00a      	beq.n	800f7f8 <dhcp_parse_reply+0x518>
 800f7e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f7e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d206      	bcs.n	800f7f8 <dhcp_parse_reply+0x518>
 800f7ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f7ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f7ee:	4413      	add	r3, r2
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	2bff      	cmp	r3, #255	; 0xff
 800f7f4:	f47f adb7 	bne.w	800f366 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800f7f8:	4b1e      	ldr	r3, [pc, #120]	; (800f874 <dhcp_parse_reply+0x594>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d018      	beq.n	800f832 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f800:	4b1e      	ldr	r3, [pc, #120]	; (800f87c <dhcp_parse_reply+0x59c>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800f806:	4b1b      	ldr	r3, [pc, #108]	; (800f874 <dhcp_parse_reply+0x594>)
 800f808:	2200      	movs	r2, #0
 800f80a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	d102      	bne.n	800f818 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800f812:	2301      	movs	r3, #1
 800f814:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f816:	e00c      	b.n	800f832 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	d102      	bne.n	800f824 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800f81e:	2301      	movs	r3, #1
 800f820:	62bb      	str	r3, [r7, #40]	; 0x28
 800f822:	e006      	b.n	800f832 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2b03      	cmp	r3, #3
 800f828:	d103      	bne.n	800f832 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800f82a:	2301      	movs	r3, #1
 800f82c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800f82e:	2301      	movs	r3, #1
 800f830:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800f832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f834:	2b00      	cmp	r3, #0
 800f836:	d006      	beq.n	800f846 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800f838:	2300      	movs	r3, #0
 800f83a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800f83c:	236c      	movs	r3, #108	; 0x6c
 800f83e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800f840:	23ec      	movs	r3, #236	; 0xec
 800f842:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800f844:	e569      	b.n	800f31a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d006      	beq.n	800f85a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800f84c:	2300      	movs	r3, #0
 800f84e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800f850:	232c      	movs	r3, #44	; 0x2c
 800f852:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800f854:	236c      	movs	r3, #108	; 0x6c
 800f856:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800f858:	e55f      	b.n	800f31a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3740      	adds	r7, #64	; 0x40
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	0801568c 	.word	0x0801568c
 800f868:	08015914 	.word	0x08015914
 800f86c:	080156ec 	.word	0x080156ec
 800f870:	08015958 	.word	0x08015958
 800f874:	20007190 	.word	0x20007190
 800f878:	0801596c 	.word	0x0801596c
 800f87c:	20007198 	.word	0x20007198
 800f880:	08015984 	.word	0x08015984
 800f884:	08015998 	.word	0x08015998

0800f888 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b08a      	sub	sp, #40	; 0x28
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
 800f894:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800f896:	4b5f      	ldr	r3, [pc, #380]	; (800fa14 <dhcp_recv+0x18c>)
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f89c:	6a3b      	ldr	r3, [r7, #32]
 800f89e:	6a1b      	ldr	r3, [r3, #32]
 800f8a0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f000 809d 	beq.w	800f9ea <dhcp_recv+0x162>
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	791b      	ldrb	r3, [r3, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	f000 8098 	beq.w	800f9ea <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	895b      	ldrh	r3, [r3, #10]
 800f8be:	2b2b      	cmp	r3, #43	; 0x2b
 800f8c0:	f240 8095 	bls.w	800f9ee <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b02      	cmp	r3, #2
 800f8ca:	f040 8092 	bne.w	800f9f2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8d4:	e012      	b.n	800f8fc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800f8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8da:	6a3a      	ldr	r2, [r7, #32]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8e6:	69b9      	ldr	r1, [r7, #24]
 800f8e8:	440b      	add	r3, r1
 800f8ea:	7f1b      	ldrb	r3, [r3, #28]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	f040 8082 	bne.w	800f9f6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800f8f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f6:	3301      	adds	r3, #1
 800f8f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f902:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f906:	429a      	cmp	r2, r3
 800f908:	d203      	bcs.n	800f912 <dhcp_recv+0x8a>
 800f90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f90e:	2b05      	cmp	r3, #5
 800f910:	d9e1      	bls.n	800f8d6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	4618      	mov	r0, r3
 800f918:	f7f5 ff95 	bl	8005846 <lwip_htonl>
 800f91c:	4602      	mov	r2, r0
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d169      	bne.n	800f9fa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800f926:	69f9      	ldr	r1, [r7, #28]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff fcd9 	bl	800f2e0 <dhcp_parse_reply>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d164      	bne.n	800f9fe <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800f934:	4b38      	ldr	r3, [pc, #224]	; (800fa18 <dhcp_recv+0x190>)
 800f936:	785b      	ldrb	r3, [r3, #1]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d062      	beq.n	800fa02 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800f942:	4b36      	ldr	r3, [pc, #216]	; (800fa1c <dhcp_recv+0x194>)
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800f948:	7cfb      	ldrb	r3, [r7, #19]
 800f94a:	2b05      	cmp	r3, #5
 800f94c:	d12a      	bne.n	800f9a4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	795b      	ldrb	r3, [r3, #5]
 800f952:	2b01      	cmp	r3, #1
 800f954:	d112      	bne.n	800f97c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800f956:	6979      	ldr	r1, [r7, #20]
 800f958:	6a38      	ldr	r0, [r7, #32]
 800f95a:	f7fe fe53 	bl	800e604 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f964:	f003 0308 	and.w	r3, r3, #8
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d003      	beq.n	800f974 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800f96c:	6a38      	ldr	r0, [r7, #32]
 800f96e:	f7fe fbc1 	bl	800e0f4 <dhcp_check>
 800f972:	e047      	b.n	800fa04 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800f974:	6a38      	ldr	r0, [r7, #32]
 800f976:	f7ff f867 	bl	800ea48 <dhcp_bind>
 800f97a:	e043      	b.n	800fa04 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	795b      	ldrb	r3, [r3, #5]
 800f980:	2b03      	cmp	r3, #3
 800f982:	d007      	beq.n	800f994 <dhcp_recv+0x10c>
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	795b      	ldrb	r3, [r3, #5]
 800f988:	2b04      	cmp	r3, #4
 800f98a:	d003      	beq.n	800f994 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800f990:	2b05      	cmp	r3, #5
 800f992:	d137      	bne.n	800fa04 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800f994:	6979      	ldr	r1, [r7, #20]
 800f996:	6a38      	ldr	r0, [r7, #32]
 800f998:	f7fe fe34 	bl	800e604 <dhcp_handle_ack>
      dhcp_bind(netif);
 800f99c:	6a38      	ldr	r0, [r7, #32]
 800f99e:	f7ff f853 	bl	800ea48 <dhcp_bind>
 800f9a2:	e02f      	b.n	800fa04 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800f9a4:	7cfb      	ldrb	r3, [r7, #19]
 800f9a6:	2b06      	cmp	r3, #6
 800f9a8:	d113      	bne.n	800f9d2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800f9ae:	2b03      	cmp	r3, #3
 800f9b0:	d00b      	beq.n	800f9ca <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f9b2:	69fb      	ldr	r3, [r7, #28]
 800f9b4:	795b      	ldrb	r3, [r3, #5]
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d007      	beq.n	800f9ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800f9be:	2b04      	cmp	r3, #4
 800f9c0:	d003      	beq.n	800f9ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	795b      	ldrb	r3, [r3, #5]
 800f9c6:	2b05      	cmp	r3, #5
 800f9c8:	d103      	bne.n	800f9d2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800f9ca:	6a38      	ldr	r0, [r7, #32]
 800f9cc:	f7fe fb78 	bl	800e0c0 <dhcp_handle_nak>
 800f9d0:	e018      	b.n	800fa04 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800f9d2:	7cfb      	ldrb	r3, [r7, #19]
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d108      	bne.n	800f9ea <dhcp_recv+0x162>
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	795b      	ldrb	r3, [r3, #5]
 800f9dc:	2b06      	cmp	r3, #6
 800f9de:	d104      	bne.n	800f9ea <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800f9e0:	6979      	ldr	r1, [r7, #20]
 800f9e2:	6a38      	ldr	r0, [r7, #32]
 800f9e4:	f7fe fbba 	bl	800e15c <dhcp_handle_offer>
 800f9e8:	e00c      	b.n	800fa04 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800f9ea:	bf00      	nop
 800f9ec:	e00a      	b.n	800fa04 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f9ee:	bf00      	nop
 800f9f0:	e008      	b.n	800fa04 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f9f2:	bf00      	nop
 800f9f4:	e006      	b.n	800fa04 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800f9f6:	bf00      	nop
 800f9f8:	e004      	b.n	800fa04 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f9fa:	bf00      	nop
 800f9fc:	e002      	b.n	800fa04 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800f9fe:	bf00      	nop
 800fa00:	e000      	b.n	800fa04 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fa02:	bf00      	nop
  pbuf_free(p);
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7f7 f9e1 	bl	8006dcc <pbuf_free>
}
 800fa0a:	bf00      	nop
 800fa0c:	3728      	adds	r7, #40	; 0x28
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	20003c10 	.word	0x20003c10
 800fa18:	20007190 	.word	0x20007190
 800fa1c:	20007198 	.word	0x20007198

0800fa20 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b088      	sub	sp, #32
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	603b      	str	r3, [r7, #0]
 800fa2c:	4613      	mov	r3, r2
 800fa2e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d108      	bne.n	800fa48 <dhcp_create_msg+0x28>
 800fa36:	4b5f      	ldr	r3, [pc, #380]	; (800fbb4 <dhcp_create_msg+0x194>)
 800fa38:	f240 7269 	movw	r2, #1897	; 0x769
 800fa3c:	495e      	ldr	r1, [pc, #376]	; (800fbb8 <dhcp_create_msg+0x198>)
 800fa3e:	485f      	ldr	r0, [pc, #380]	; (800fbbc <dhcp_create_msg+0x19c>)
 800fa40:	f002 fc3a 	bl	80122b8 <iprintf>
 800fa44:	2300      	movs	r3, #0
 800fa46:	e0b1      	b.n	800fbac <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d108      	bne.n	800fa60 <dhcp_create_msg+0x40>
 800fa4e:	4b59      	ldr	r3, [pc, #356]	; (800fbb4 <dhcp_create_msg+0x194>)
 800fa50:	f240 726a 	movw	r2, #1898	; 0x76a
 800fa54:	495a      	ldr	r1, [pc, #360]	; (800fbc0 <dhcp_create_msg+0x1a0>)
 800fa56:	4859      	ldr	r0, [pc, #356]	; (800fbbc <dhcp_create_msg+0x19c>)
 800fa58:	f002 fc2e 	bl	80122b8 <iprintf>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e0a5      	b.n	800fbac <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fa60:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa64:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fa68:	2036      	movs	r0, #54	; 0x36
 800fa6a:	f7f6 fecf 	bl	800680c <pbuf_alloc>
 800fa6e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800fa76:	2300      	movs	r3, #0
 800fa78:	e098      	b.n	800fbac <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	895b      	ldrh	r3, [r3, #10]
 800fa7e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fa82:	d206      	bcs.n	800fa92 <dhcp_create_msg+0x72>
 800fa84:	4b4b      	ldr	r3, [pc, #300]	; (800fbb4 <dhcp_create_msg+0x194>)
 800fa86:	f240 7272 	movw	r2, #1906	; 0x772
 800fa8a:	494e      	ldr	r1, [pc, #312]	; (800fbc4 <dhcp_create_msg+0x1a4>)
 800fa8c:	484b      	ldr	r0, [pc, #300]	; (800fbbc <dhcp_create_msg+0x19c>)
 800fa8e:	f002 fc13 	bl	80122b8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d103      	bne.n	800faa0 <dhcp_create_msg+0x80>
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	795b      	ldrb	r3, [r3, #5]
 800fa9c:	2b03      	cmp	r3, #3
 800fa9e:	d10d      	bne.n	800fabc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	799b      	ldrb	r3, [r3, #6]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d105      	bne.n	800fab4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800faa8:	f002 fc1e 	bl	80122e8 <rand>
 800faac:	4603      	mov	r3, r0
 800faae:	461a      	mov	r2, r3
 800fab0:	4b45      	ldr	r3, [pc, #276]	; (800fbc8 <dhcp_create_msg+0x1a8>)
 800fab2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fab4:	4b44      	ldr	r3, [pc, #272]	; (800fbc8 <dhcp_create_msg+0x1a8>)
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800fac2:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fac6:	2100      	movs	r1, #0
 800fac8:	6978      	ldr	r0, [r7, #20]
 800faca:	f002 fbed 	bl	80122a8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	2201      	movs	r2, #1
 800fad2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2201      	movs	r2, #1
 800fad8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4618      	mov	r0, r3
 800faea:	f7f5 feac 	bl	8005846 <lwip_htonl>
 800faee:	4602      	mov	r2, r0
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	2b08      	cmp	r3, #8
 800faf8:	d010      	beq.n	800fb1c <dhcp_create_msg+0xfc>
 800fafa:	79fb      	ldrb	r3, [r7, #7]
 800fafc:	2b04      	cmp	r3, #4
 800fafe:	d00d      	beq.n	800fb1c <dhcp_create_msg+0xfc>
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	2b07      	cmp	r3, #7
 800fb04:	d00a      	beq.n	800fb1c <dhcp_create_msg+0xfc>
 800fb06:	79fb      	ldrb	r3, [r7, #7]
 800fb08:	2b03      	cmp	r3, #3
 800fb0a:	d10c      	bne.n	800fb26 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800fb10:	2b05      	cmp	r3, #5
 800fb12:	d003      	beq.n	800fb1c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	795b      	ldrb	r3, [r3, #5]
 800fb18:	2b04      	cmp	r3, #4
 800fb1a:	d104      	bne.n	800fb26 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	681a      	ldr	r2, [r3, #0]
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fb26:	2300      	movs	r3, #0
 800fb28:	83fb      	strh	r3, [r7, #30]
 800fb2a:	e00c      	b.n	800fb46 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800fb2c:	8bfa      	ldrh	r2, [r7, #30]
 800fb2e:	8bfb      	ldrh	r3, [r7, #30]
 800fb30:	68f9      	ldr	r1, [r7, #12]
 800fb32:	440a      	add	r2, r1
 800fb34:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 800fb38:	697a      	ldr	r2, [r7, #20]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	460a      	mov	r2, r1
 800fb3e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fb40:	8bfb      	ldrh	r3, [r7, #30]
 800fb42:	3301      	adds	r3, #1
 800fb44:	83fb      	strh	r3, [r7, #30]
 800fb46:	8bfb      	ldrh	r3, [r7, #30]
 800fb48:	2b05      	cmp	r3, #5
 800fb4a:	d9ef      	bls.n	800fb2c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fb54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800fb5e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800fb62:	2200      	movs	r2, #0
 800fb64:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fb68:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fb72:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	2235      	movs	r2, #53	; 0x35
 800fb80:	2000      	movs	r0, #0
 800fb82:	f7ff fadd 	bl	800f140 <dhcp_option>
 800fb86:	4603      	mov	r3, r0
 800fb88:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb90:	79fa      	ldrb	r2, [r7, #7]
 800fb92:	8a7b      	ldrh	r3, [r7, #18]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7ff fb07 	bl	800f1a8 <dhcp_option_byte>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d002      	beq.n	800fbaa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	8a7a      	ldrh	r2, [r7, #18]
 800fba8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800fbaa:	69bb      	ldr	r3, [r7, #24]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3720      	adds	r7, #32
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	0801568c 	.word	0x0801568c
 800fbb8:	080159ac 	.word	0x080159ac
 800fbbc:	080156ec 	.word	0x080156ec
 800fbc0:	080159cc 	.word	0x080159cc
 800fbc4:	080159ec 	.word	0x080159ec
 800fbc8:	20000558 	.word	0x20000558

0800fbcc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800fbda:	89fb      	ldrh	r3, [r7, #14]
 800fbdc:	1c5a      	adds	r2, r3, #1
 800fbde:	81fa      	strh	r2, [r7, #14]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	22ff      	movs	r2, #255	; 0xff
 800fbe8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fbea:	e007      	b.n	800fbfc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800fbec:	89fb      	ldrh	r3, [r7, #14]
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	81fa      	strh	r2, [r7, #14]
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fbfc:	89fb      	ldrh	r3, [r7, #14]
 800fbfe:	2b43      	cmp	r3, #67	; 0x43
 800fc00:	d904      	bls.n	800fc0c <dhcp_option_trailer+0x40>
 800fc02:	89fb      	ldrh	r3, [r7, #14]
 800fc04:	f003 0303 	and.w	r3, r3, #3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d002      	beq.n	800fc12 <dhcp_option_trailer+0x46>
 800fc0c:	89fb      	ldrh	r3, [r7, #14]
 800fc0e:	2b43      	cmp	r3, #67	; 0x43
 800fc10:	d9ec      	bls.n	800fbec <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800fc12:	89fb      	ldrh	r3, [r7, #14]
 800fc14:	33f0      	adds	r3, #240	; 0xf0
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	4619      	mov	r1, r3
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7f6 ff50 	bl	8006ac0 <pbuf_realloc>
}
 800fc20:	bf00      	nop
 800fc22:	3710      	adds	r7, #16
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d017      	beq.n	800fc66 <dhcp_supplied_address+0x3e>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	6a1b      	ldr	r3, [r3, #32]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d013      	beq.n	800fc66 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	795b      	ldrb	r3, [r3, #5]
 800fc48:	2b0a      	cmp	r3, #10
 800fc4a:	d007      	beq.n	800fc5c <dhcp_supplied_address+0x34>
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	795b      	ldrb	r3, [r3, #5]
 800fc50:	2b05      	cmp	r3, #5
 800fc52:	d003      	beq.n	800fc5c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fc58:	2b04      	cmp	r3, #4
 800fc5a:	d101      	bne.n	800fc60 <dhcp_supplied_address+0x38>
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e000      	b.n	800fc62 <dhcp_supplied_address+0x3a>
 800fc60:	2300      	movs	r3, #0
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	e000      	b.n	800fc68 <dhcp_supplied_address+0x40>
  }
  return 0;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3714      	adds	r7, #20
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800fc7c:	4915      	ldr	r1, [pc, #84]	; (800fcd4 <etharp_free_entry+0x60>)
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	4613      	mov	r3, r2
 800fc82:	005b      	lsls	r3, r3, #1
 800fc84:	4413      	add	r3, r2
 800fc86:	00db      	lsls	r3, r3, #3
 800fc88:	440b      	add	r3, r1
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d013      	beq.n	800fcb8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fc90:	4910      	ldr	r1, [pc, #64]	; (800fcd4 <etharp_free_entry+0x60>)
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	4613      	mov	r3, r2
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	4413      	add	r3, r2
 800fc9a:	00db      	lsls	r3, r3, #3
 800fc9c:	440b      	add	r3, r1
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7f7 f893 	bl	8006dcc <pbuf_free>
    arp_table[i].q = NULL;
 800fca6:	490b      	ldr	r1, [pc, #44]	; (800fcd4 <etharp_free_entry+0x60>)
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	4413      	add	r3, r2
 800fcb0:	00db      	lsls	r3, r3, #3
 800fcb2:	440b      	add	r3, r1
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fcb8:	4906      	ldr	r1, [pc, #24]	; (800fcd4 <etharp_free_entry+0x60>)
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	4613      	mov	r3, r2
 800fcbe:	005b      	lsls	r3, r3, #1
 800fcc0:	4413      	add	r3, r2
 800fcc2:	00db      	lsls	r3, r3, #3
 800fcc4:	440b      	add	r3, r1
 800fcc6:	3314      	adds	r3, #20
 800fcc8:	2200      	movs	r2, #0
 800fcca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	2000055c 	.word	0x2000055c

0800fcd8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b082      	sub	sp, #8
 800fcdc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fcde:	2300      	movs	r3, #0
 800fce0:	607b      	str	r3, [r7, #4]
 800fce2:	e096      	b.n	800fe12 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fce4:	494f      	ldr	r1, [pc, #316]	; (800fe24 <etharp_tmr+0x14c>)
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	4613      	mov	r3, r2
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	4413      	add	r3, r2
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	440b      	add	r3, r1
 800fcf2:	3314      	adds	r3, #20
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fcf8:	78fb      	ldrb	r3, [r7, #3]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	f000 8086 	beq.w	800fe0c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fd00:	4948      	ldr	r1, [pc, #288]	; (800fe24 <etharp_tmr+0x14c>)
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	4613      	mov	r3, r2
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	4413      	add	r3, r2
 800fd0a:	00db      	lsls	r3, r3, #3
 800fd0c:	440b      	add	r3, r1
 800fd0e:	3312      	adds	r3, #18
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	3301      	adds	r3, #1
 800fd14:	b298      	uxth	r0, r3
 800fd16:	4943      	ldr	r1, [pc, #268]	; (800fe24 <etharp_tmr+0x14c>)
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	4613      	mov	r3, r2
 800fd1c:	005b      	lsls	r3, r3, #1
 800fd1e:	4413      	add	r3, r2
 800fd20:	00db      	lsls	r3, r3, #3
 800fd22:	440b      	add	r3, r1
 800fd24:	3312      	adds	r3, #18
 800fd26:	4602      	mov	r2, r0
 800fd28:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fd2a:	493e      	ldr	r1, [pc, #248]	; (800fe24 <etharp_tmr+0x14c>)
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	005b      	lsls	r3, r3, #1
 800fd32:	4413      	add	r3, r2
 800fd34:	00db      	lsls	r3, r3, #3
 800fd36:	440b      	add	r3, r1
 800fd38:	3312      	adds	r3, #18
 800fd3a:	881b      	ldrh	r3, [r3, #0]
 800fd3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fd40:	d215      	bcs.n	800fd6e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fd42:	4938      	ldr	r1, [pc, #224]	; (800fe24 <etharp_tmr+0x14c>)
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	4613      	mov	r3, r2
 800fd48:	005b      	lsls	r3, r3, #1
 800fd4a:	4413      	add	r3, r2
 800fd4c:	00db      	lsls	r3, r3, #3
 800fd4e:	440b      	add	r3, r1
 800fd50:	3314      	adds	r3, #20
 800fd52:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d10e      	bne.n	800fd76 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fd58:	4932      	ldr	r1, [pc, #200]	; (800fe24 <etharp_tmr+0x14c>)
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	4613      	mov	r3, r2
 800fd5e:	005b      	lsls	r3, r3, #1
 800fd60:	4413      	add	r3, r2
 800fd62:	00db      	lsls	r3, r3, #3
 800fd64:	440b      	add	r3, r1
 800fd66:	3312      	adds	r3, #18
 800fd68:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fd6a:	2b04      	cmp	r3, #4
 800fd6c:	d903      	bls.n	800fd76 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f7ff ff80 	bl	800fc74 <etharp_free_entry>
 800fd74:	e04a      	b.n	800fe0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fd76:	492b      	ldr	r1, [pc, #172]	; (800fe24 <etharp_tmr+0x14c>)
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	005b      	lsls	r3, r3, #1
 800fd7e:	4413      	add	r3, r2
 800fd80:	00db      	lsls	r3, r3, #3
 800fd82:	440b      	add	r3, r1
 800fd84:	3314      	adds	r3, #20
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	2b03      	cmp	r3, #3
 800fd8a:	d10a      	bne.n	800fda2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fd8c:	4925      	ldr	r1, [pc, #148]	; (800fe24 <etharp_tmr+0x14c>)
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	4613      	mov	r3, r2
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	440b      	add	r3, r1
 800fd9a:	3314      	adds	r3, #20
 800fd9c:	2204      	movs	r2, #4
 800fd9e:	701a      	strb	r2, [r3, #0]
 800fda0:	e034      	b.n	800fe0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fda2:	4920      	ldr	r1, [pc, #128]	; (800fe24 <etharp_tmr+0x14c>)
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	00db      	lsls	r3, r3, #3
 800fdae:	440b      	add	r3, r1
 800fdb0:	3314      	adds	r3, #20
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	2b04      	cmp	r3, #4
 800fdb6:	d10a      	bne.n	800fdce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fdb8:	491a      	ldr	r1, [pc, #104]	; (800fe24 <etharp_tmr+0x14c>)
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	005b      	lsls	r3, r3, #1
 800fdc0:	4413      	add	r3, r2
 800fdc2:	00db      	lsls	r3, r3, #3
 800fdc4:	440b      	add	r3, r1
 800fdc6:	3314      	adds	r3, #20
 800fdc8:	2202      	movs	r2, #2
 800fdca:	701a      	strb	r2, [r3, #0]
 800fdcc:	e01e      	b.n	800fe0c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fdce:	4915      	ldr	r1, [pc, #84]	; (800fe24 <etharp_tmr+0x14c>)
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	005b      	lsls	r3, r3, #1
 800fdd6:	4413      	add	r3, r2
 800fdd8:	00db      	lsls	r3, r3, #3
 800fdda:	440b      	add	r3, r1
 800fddc:	3314      	adds	r3, #20
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d113      	bne.n	800fe0c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fde4:	490f      	ldr	r1, [pc, #60]	; (800fe24 <etharp_tmr+0x14c>)
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	4613      	mov	r3, r2
 800fdea:	005b      	lsls	r3, r3, #1
 800fdec:	4413      	add	r3, r2
 800fdee:	00db      	lsls	r3, r3, #3
 800fdf0:	440b      	add	r3, r1
 800fdf2:	3308      	adds	r3, #8
 800fdf4:	6818      	ldr	r0, [r3, #0]
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	4613      	mov	r3, r2
 800fdfa:	005b      	lsls	r3, r3, #1
 800fdfc:	4413      	add	r3, r2
 800fdfe:	00db      	lsls	r3, r3, #3
 800fe00:	4a08      	ldr	r2, [pc, #32]	; (800fe24 <etharp_tmr+0x14c>)
 800fe02:	4413      	add	r3, r2
 800fe04:	3304      	adds	r3, #4
 800fe06:	4619      	mov	r1, r3
 800fe08:	f000 fe72 	bl	8010af0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	607b      	str	r3, [r7, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b09      	cmp	r3, #9
 800fe16:	f77f af65 	ble.w	800fce4 <etharp_tmr+0xc>
      }
    }
  }
}
 800fe1a:	bf00      	nop
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	2000055c 	.word	0x2000055c

0800fe28 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b08a      	sub	sp, #40	; 0x28
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	60f8      	str	r0, [r7, #12]
 800fe30:	460b      	mov	r3, r1
 800fe32:	607a      	str	r2, [r7, #4]
 800fe34:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fe36:	230a      	movs	r3, #10
 800fe38:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fe3a:	230a      	movs	r3, #10
 800fe3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fe3e:	230a      	movs	r3, #10
 800fe40:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fe46:	230a      	movs	r3, #10
 800fe48:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	83bb      	strh	r3, [r7, #28]
 800fe4e:	2300      	movs	r3, #0
 800fe50:	837b      	strh	r3, [r7, #26]
 800fe52:	2300      	movs	r3, #0
 800fe54:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fe56:	2300      	movs	r3, #0
 800fe58:	843b      	strh	r3, [r7, #32]
 800fe5a:	e0ae      	b.n	800ffba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fe5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe60:	49a6      	ldr	r1, [pc, #664]	; (80100fc <etharp_find_entry+0x2d4>)
 800fe62:	4613      	mov	r3, r2
 800fe64:	005b      	lsls	r3, r3, #1
 800fe66:	4413      	add	r3, r2
 800fe68:	00db      	lsls	r3, r3, #3
 800fe6a:	440b      	add	r3, r1
 800fe6c:	3314      	adds	r3, #20
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fe72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe76:	2b0a      	cmp	r3, #10
 800fe78:	d105      	bne.n	800fe86 <etharp_find_entry+0x5e>
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d102      	bne.n	800fe86 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fe80:	8c3b      	ldrh	r3, [r7, #32]
 800fe82:	847b      	strh	r3, [r7, #34]	; 0x22
 800fe84:	e095      	b.n	800ffb2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fe86:	7dfb      	ldrb	r3, [r7, #23]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	f000 8092 	beq.w	800ffb2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fe8e:	7dfb      	ldrb	r3, [r7, #23]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d009      	beq.n	800fea8 <etharp_find_entry+0x80>
 800fe94:	7dfb      	ldrb	r3, [r7, #23]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d806      	bhi.n	800fea8 <etharp_find_entry+0x80>
 800fe9a:	4b99      	ldr	r3, [pc, #612]	; (8010100 <etharp_find_entry+0x2d8>)
 800fe9c:	f44f 7292 	mov.w	r2, #292	; 0x124
 800fea0:	4998      	ldr	r1, [pc, #608]	; (8010104 <etharp_find_entry+0x2dc>)
 800fea2:	4899      	ldr	r0, [pc, #612]	; (8010108 <etharp_find_entry+0x2e0>)
 800fea4:	f002 fa08 	bl	80122b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d020      	beq.n	800fef0 <etharp_find_entry+0xc8>
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	6819      	ldr	r1, [r3, #0]
 800feb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800feb6:	4891      	ldr	r0, [pc, #580]	; (80100fc <etharp_find_entry+0x2d4>)
 800feb8:	4613      	mov	r3, r2
 800feba:	005b      	lsls	r3, r3, #1
 800febc:	4413      	add	r3, r2
 800febe:	00db      	lsls	r3, r3, #3
 800fec0:	4403      	add	r3, r0
 800fec2:	3304      	adds	r3, #4
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	4299      	cmp	r1, r3
 800fec8:	d112      	bne.n	800fef0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00c      	beq.n	800feea <etharp_find_entry+0xc2>
 800fed0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fed4:	4989      	ldr	r1, [pc, #548]	; (80100fc <etharp_find_entry+0x2d4>)
 800fed6:	4613      	mov	r3, r2
 800fed8:	005b      	lsls	r3, r3, #1
 800feda:	4413      	add	r3, r2
 800fedc:	00db      	lsls	r3, r3, #3
 800fede:	440b      	add	r3, r1
 800fee0:	3308      	adds	r3, #8
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d102      	bne.n	800fef0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800feea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800feee:	e100      	b.n	80100f2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fef0:	7dfb      	ldrb	r3, [r7, #23]
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d140      	bne.n	800ff78 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fef6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fefa:	4980      	ldr	r1, [pc, #512]	; (80100fc <etharp_find_entry+0x2d4>)
 800fefc:	4613      	mov	r3, r2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	4413      	add	r3, r2
 800ff02:	00db      	lsls	r3, r3, #3
 800ff04:	440b      	add	r3, r1
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d01a      	beq.n	800ff42 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800ff0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff10:	497a      	ldr	r1, [pc, #488]	; (80100fc <etharp_find_entry+0x2d4>)
 800ff12:	4613      	mov	r3, r2
 800ff14:	005b      	lsls	r3, r3, #1
 800ff16:	4413      	add	r3, r2
 800ff18:	00db      	lsls	r3, r3, #3
 800ff1a:	440b      	add	r3, r1
 800ff1c:	3312      	adds	r3, #18
 800ff1e:	881b      	ldrh	r3, [r3, #0]
 800ff20:	8bba      	ldrh	r2, [r7, #28]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d845      	bhi.n	800ffb2 <etharp_find_entry+0x18a>
            old_queue = i;
 800ff26:	8c3b      	ldrh	r3, [r7, #32]
 800ff28:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ff2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff2e:	4973      	ldr	r1, [pc, #460]	; (80100fc <etharp_find_entry+0x2d4>)
 800ff30:	4613      	mov	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	4413      	add	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	440b      	add	r3, r1
 800ff3a:	3312      	adds	r3, #18
 800ff3c:	881b      	ldrh	r3, [r3, #0]
 800ff3e:	83bb      	strh	r3, [r7, #28]
 800ff40:	e037      	b.n	800ffb2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ff42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff46:	496d      	ldr	r1, [pc, #436]	; (80100fc <etharp_find_entry+0x2d4>)
 800ff48:	4613      	mov	r3, r2
 800ff4a:	005b      	lsls	r3, r3, #1
 800ff4c:	4413      	add	r3, r2
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	440b      	add	r3, r1
 800ff52:	3312      	adds	r3, #18
 800ff54:	881b      	ldrh	r3, [r3, #0]
 800ff56:	8b7a      	ldrh	r2, [r7, #26]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d82a      	bhi.n	800ffb2 <etharp_find_entry+0x18a>
            old_pending = i;
 800ff5c:	8c3b      	ldrh	r3, [r7, #32]
 800ff5e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ff60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff64:	4965      	ldr	r1, [pc, #404]	; (80100fc <etharp_find_entry+0x2d4>)
 800ff66:	4613      	mov	r3, r2
 800ff68:	005b      	lsls	r3, r3, #1
 800ff6a:	4413      	add	r3, r2
 800ff6c:	00db      	lsls	r3, r3, #3
 800ff6e:	440b      	add	r3, r1
 800ff70:	3312      	adds	r3, #18
 800ff72:	881b      	ldrh	r3, [r3, #0]
 800ff74:	837b      	strh	r3, [r7, #26]
 800ff76:	e01c      	b.n	800ffb2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ff78:	7dfb      	ldrb	r3, [r7, #23]
 800ff7a:	2b01      	cmp	r3, #1
 800ff7c:	d919      	bls.n	800ffb2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ff7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff82:	495e      	ldr	r1, [pc, #376]	; (80100fc <etharp_find_entry+0x2d4>)
 800ff84:	4613      	mov	r3, r2
 800ff86:	005b      	lsls	r3, r3, #1
 800ff88:	4413      	add	r3, r2
 800ff8a:	00db      	lsls	r3, r3, #3
 800ff8c:	440b      	add	r3, r1
 800ff8e:	3312      	adds	r3, #18
 800ff90:	881b      	ldrh	r3, [r3, #0]
 800ff92:	8b3a      	ldrh	r2, [r7, #24]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d80c      	bhi.n	800ffb2 <etharp_find_entry+0x18a>
            old_stable = i;
 800ff98:	8c3b      	ldrh	r3, [r7, #32]
 800ff9a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ff9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ffa0:	4956      	ldr	r1, [pc, #344]	; (80100fc <etharp_find_entry+0x2d4>)
 800ffa2:	4613      	mov	r3, r2
 800ffa4:	005b      	lsls	r3, r3, #1
 800ffa6:	4413      	add	r3, r2
 800ffa8:	00db      	lsls	r3, r3, #3
 800ffaa:	440b      	add	r3, r1
 800ffac:	3312      	adds	r3, #18
 800ffae:	881b      	ldrh	r3, [r3, #0]
 800ffb0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ffb2:	8c3b      	ldrh	r3, [r7, #32]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	843b      	strh	r3, [r7, #32]
 800ffba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ffbe:	2b09      	cmp	r3, #9
 800ffc0:	f77f af4c 	ble.w	800fe5c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ffc4:	7afb      	ldrb	r3, [r7, #11]
 800ffc6:	f003 0302 	and.w	r3, r3, #2
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d108      	bne.n	800ffe0 <etharp_find_entry+0x1b8>
 800ffce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffd2:	2b0a      	cmp	r3, #10
 800ffd4:	d107      	bne.n	800ffe6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ffd6:	7afb      	ldrb	r3, [r7, #11]
 800ffd8:	f003 0301 	and.w	r3, r3, #1
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d102      	bne.n	800ffe6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	e085      	b.n	80100f2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ffe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ffea:	2b09      	cmp	r3, #9
 800ffec:	dc02      	bgt.n	800fff4 <etharp_find_entry+0x1cc>
    i = empty;
 800ffee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fff0:	843b      	strh	r3, [r7, #32]
 800fff2:	e039      	b.n	8010068 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fff4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fff8:	2b09      	cmp	r3, #9
 800fffa:	dc14      	bgt.n	8010026 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fffc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fffe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010004:	493d      	ldr	r1, [pc, #244]	; (80100fc <etharp_find_entry+0x2d4>)
 8010006:	4613      	mov	r3, r2
 8010008:	005b      	lsls	r3, r3, #1
 801000a:	4413      	add	r3, r2
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	440b      	add	r3, r1
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d018      	beq.n	8010048 <etharp_find_entry+0x220>
 8010016:	4b3a      	ldr	r3, [pc, #232]	; (8010100 <etharp_find_entry+0x2d8>)
 8010018:	f240 126d 	movw	r2, #365	; 0x16d
 801001c:	493b      	ldr	r1, [pc, #236]	; (801010c <etharp_find_entry+0x2e4>)
 801001e:	483a      	ldr	r0, [pc, #232]	; (8010108 <etharp_find_entry+0x2e0>)
 8010020:	f002 f94a 	bl	80122b8 <iprintf>
 8010024:	e010      	b.n	8010048 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010026:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801002a:	2b09      	cmp	r3, #9
 801002c:	dc02      	bgt.n	8010034 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801002e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010030:	843b      	strh	r3, [r7, #32]
 8010032:	e009      	b.n	8010048 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010034:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010038:	2b09      	cmp	r3, #9
 801003a:	dc02      	bgt.n	8010042 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801003c:	8bfb      	ldrh	r3, [r7, #30]
 801003e:	843b      	strh	r3, [r7, #32]
 8010040:	e002      	b.n	8010048 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010042:	f04f 33ff 	mov.w	r3, #4294967295
 8010046:	e054      	b.n	80100f2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010048:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801004c:	2b09      	cmp	r3, #9
 801004e:	dd06      	ble.n	801005e <etharp_find_entry+0x236>
 8010050:	4b2b      	ldr	r3, [pc, #172]	; (8010100 <etharp_find_entry+0x2d8>)
 8010052:	f240 127f 	movw	r2, #383	; 0x17f
 8010056:	492e      	ldr	r1, [pc, #184]	; (8010110 <etharp_find_entry+0x2e8>)
 8010058:	482b      	ldr	r0, [pc, #172]	; (8010108 <etharp_find_entry+0x2e0>)
 801005a:	f002 f92d 	bl	80122b8 <iprintf>
    etharp_free_entry(i);
 801005e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fe06 	bl	800fc74 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010068:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801006c:	2b09      	cmp	r3, #9
 801006e:	dd06      	ble.n	801007e <etharp_find_entry+0x256>
 8010070:	4b23      	ldr	r3, [pc, #140]	; (8010100 <etharp_find_entry+0x2d8>)
 8010072:	f240 1283 	movw	r2, #387	; 0x183
 8010076:	4926      	ldr	r1, [pc, #152]	; (8010110 <etharp_find_entry+0x2e8>)
 8010078:	4823      	ldr	r0, [pc, #140]	; (8010108 <etharp_find_entry+0x2e0>)
 801007a:	f002 f91d 	bl	80122b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801007e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010082:	491e      	ldr	r1, [pc, #120]	; (80100fc <etharp_find_entry+0x2d4>)
 8010084:	4613      	mov	r3, r2
 8010086:	005b      	lsls	r3, r3, #1
 8010088:	4413      	add	r3, r2
 801008a:	00db      	lsls	r3, r3, #3
 801008c:	440b      	add	r3, r1
 801008e:	3314      	adds	r3, #20
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d006      	beq.n	80100a4 <etharp_find_entry+0x27c>
 8010096:	4b1a      	ldr	r3, [pc, #104]	; (8010100 <etharp_find_entry+0x2d8>)
 8010098:	f240 1285 	movw	r2, #389	; 0x185
 801009c:	491d      	ldr	r1, [pc, #116]	; (8010114 <etharp_find_entry+0x2ec>)
 801009e:	481a      	ldr	r0, [pc, #104]	; (8010108 <etharp_find_entry+0x2e0>)
 80100a0:	f002 f90a 	bl	80122b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00b      	beq.n	80100c2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80100aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	6819      	ldr	r1, [r3, #0]
 80100b2:	4812      	ldr	r0, [pc, #72]	; (80100fc <etharp_find_entry+0x2d4>)
 80100b4:	4613      	mov	r3, r2
 80100b6:	005b      	lsls	r3, r3, #1
 80100b8:	4413      	add	r3, r2
 80100ba:	00db      	lsls	r3, r3, #3
 80100bc:	4403      	add	r3, r0
 80100be:	3304      	adds	r3, #4
 80100c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80100c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100c6:	490d      	ldr	r1, [pc, #52]	; (80100fc <etharp_find_entry+0x2d4>)
 80100c8:	4613      	mov	r3, r2
 80100ca:	005b      	lsls	r3, r3, #1
 80100cc:	4413      	add	r3, r2
 80100ce:	00db      	lsls	r3, r3, #3
 80100d0:	440b      	add	r3, r1
 80100d2:	3312      	adds	r3, #18
 80100d4:	2200      	movs	r2, #0
 80100d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80100d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80100dc:	4907      	ldr	r1, [pc, #28]	; (80100fc <etharp_find_entry+0x2d4>)
 80100de:	4613      	mov	r3, r2
 80100e0:	005b      	lsls	r3, r3, #1
 80100e2:	4413      	add	r3, r2
 80100e4:	00db      	lsls	r3, r3, #3
 80100e6:	440b      	add	r3, r1
 80100e8:	3308      	adds	r3, #8
 80100ea:	687a      	ldr	r2, [r7, #4]
 80100ec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80100ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3728      	adds	r7, #40	; 0x28
 80100f6:	46bd      	mov	sp, r7
 80100f8:	bd80      	pop	{r7, pc}
 80100fa:	bf00      	nop
 80100fc:	2000055c 	.word	0x2000055c
 8010100:	08015a2c 	.word	0x08015a2c
 8010104:	08015a64 	.word	0x08015a64
 8010108:	08015aa4 	.word	0x08015aa4
 801010c:	08015acc 	.word	0x08015acc
 8010110:	08015ae4 	.word	0x08015ae4
 8010114:	08015af8 	.word	0x08015af8

08010118 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b088      	sub	sp, #32
 801011c:	af02      	add	r7, sp, #8
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
 8010124:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801012c:	2b06      	cmp	r3, #6
 801012e:	d006      	beq.n	801013e <etharp_update_arp_entry+0x26>
 8010130:	4b48      	ldr	r3, [pc, #288]	; (8010254 <etharp_update_arp_entry+0x13c>)
 8010132:	f240 12a9 	movw	r2, #425	; 0x1a9
 8010136:	4948      	ldr	r1, [pc, #288]	; (8010258 <etharp_update_arp_entry+0x140>)
 8010138:	4848      	ldr	r0, [pc, #288]	; (801025c <etharp_update_arp_entry+0x144>)
 801013a:	f002 f8bd 	bl	80122b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d012      	beq.n	801016a <etharp_update_arp_entry+0x52>
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00e      	beq.n	801016a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	68f9      	ldr	r1, [r7, #12]
 8010152:	4618      	mov	r0, r3
 8010154:	f001 f91e 	bl	8011394 <ip4_addr_isbroadcast_u32>
 8010158:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801015a:	2b00      	cmp	r3, #0
 801015c:	d105      	bne.n	801016a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010166:	2be0      	cmp	r3, #224	; 0xe0
 8010168:	d102      	bne.n	8010170 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801016a:	f06f 030f 	mvn.w	r3, #15
 801016e:	e06c      	b.n	801024a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010170:	78fb      	ldrb	r3, [r7, #3]
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	4619      	mov	r1, r3
 8010176:	68b8      	ldr	r0, [r7, #8]
 8010178:	f7ff fe56 	bl	800fe28 <etharp_find_entry>
 801017c:	4603      	mov	r3, r0
 801017e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010180:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010184:	2b00      	cmp	r3, #0
 8010186:	da02      	bge.n	801018e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010188:	8afb      	ldrh	r3, [r7, #22]
 801018a:	b25b      	sxtb	r3, r3
 801018c:	e05d      	b.n	801024a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801018e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010192:	4933      	ldr	r1, [pc, #204]	; (8010260 <etharp_update_arp_entry+0x148>)
 8010194:	4613      	mov	r3, r2
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	4413      	add	r3, r2
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	440b      	add	r3, r1
 801019e:	3314      	adds	r3, #20
 80101a0:	2202      	movs	r2, #2
 80101a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80101a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80101a8:	492d      	ldr	r1, [pc, #180]	; (8010260 <etharp_update_arp_entry+0x148>)
 80101aa:	4613      	mov	r3, r2
 80101ac:	005b      	lsls	r3, r3, #1
 80101ae:	4413      	add	r3, r2
 80101b0:	00db      	lsls	r3, r3, #3
 80101b2:	440b      	add	r3, r1
 80101b4:	3308      	adds	r3, #8
 80101b6:	68fa      	ldr	r2, [r7, #12]
 80101b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80101ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80101be:	4613      	mov	r3, r2
 80101c0:	005b      	lsls	r3, r3, #1
 80101c2:	4413      	add	r3, r2
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	3308      	adds	r3, #8
 80101c8:	4a25      	ldr	r2, [pc, #148]	; (8010260 <etharp_update_arp_entry+0x148>)
 80101ca:	4413      	add	r3, r2
 80101cc:	3304      	adds	r3, #4
 80101ce:	2206      	movs	r2, #6
 80101d0:	6879      	ldr	r1, [r7, #4]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f002 f85d 	bl	8012292 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80101d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80101dc:	4920      	ldr	r1, [pc, #128]	; (8010260 <etharp_update_arp_entry+0x148>)
 80101de:	4613      	mov	r3, r2
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	4413      	add	r3, r2
 80101e4:	00db      	lsls	r3, r3, #3
 80101e6:	440b      	add	r3, r1
 80101e8:	3312      	adds	r3, #18
 80101ea:	2200      	movs	r2, #0
 80101ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80101ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80101f2:	491b      	ldr	r1, [pc, #108]	; (8010260 <etharp_update_arp_entry+0x148>)
 80101f4:	4613      	mov	r3, r2
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	4413      	add	r3, r2
 80101fa:	00db      	lsls	r3, r3, #3
 80101fc:	440b      	add	r3, r1
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d021      	beq.n	8010248 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010204:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010208:	4915      	ldr	r1, [pc, #84]	; (8010260 <etharp_update_arp_entry+0x148>)
 801020a:	4613      	mov	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	4413      	add	r3, r2
 8010210:	00db      	lsls	r3, r3, #3
 8010212:	440b      	add	r3, r1
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010218:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801021c:	4910      	ldr	r1, [pc, #64]	; (8010260 <etharp_update_arp_entry+0x148>)
 801021e:	4613      	mov	r3, r2
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	4413      	add	r3, r2
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	440b      	add	r3, r1
 8010228:	2200      	movs	r2, #0
 801022a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010236:	9300      	str	r3, [sp, #0]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6939      	ldr	r1, [r7, #16]
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f001 ffad 	bl	801219c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010242:	6938      	ldr	r0, [r7, #16]
 8010244:	f7f6 fdc2 	bl	8006dcc <pbuf_free>
  }
  return ERR_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	3718      	adds	r7, #24
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	08015a2c 	.word	0x08015a2c
 8010258:	08015b24 	.word	0x08015b24
 801025c:	08015aa4 	.word	0x08015aa4
 8010260:	2000055c 	.word	0x2000055c

08010264 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801026c:	2300      	movs	r3, #0
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	e01e      	b.n	80102b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010272:	4913      	ldr	r1, [pc, #76]	; (80102c0 <etharp_cleanup_netif+0x5c>)
 8010274:	68fa      	ldr	r2, [r7, #12]
 8010276:	4613      	mov	r3, r2
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	4413      	add	r3, r2
 801027c:	00db      	lsls	r3, r3, #3
 801027e:	440b      	add	r3, r1
 8010280:	3314      	adds	r3, #20
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010286:	7afb      	ldrb	r3, [r7, #11]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d00e      	beq.n	80102aa <etharp_cleanup_netif+0x46>
 801028c:	490c      	ldr	r1, [pc, #48]	; (80102c0 <etharp_cleanup_netif+0x5c>)
 801028e:	68fa      	ldr	r2, [r7, #12]
 8010290:	4613      	mov	r3, r2
 8010292:	005b      	lsls	r3, r3, #1
 8010294:	4413      	add	r3, r2
 8010296:	00db      	lsls	r3, r3, #3
 8010298:	440b      	add	r3, r1
 801029a:	3308      	adds	r3, #8
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d102      	bne.n	80102aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7ff fce5 	bl	800fc74 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	3301      	adds	r3, #1
 80102ae:	60fb      	str	r3, [r7, #12]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2b09      	cmp	r3, #9
 80102b4:	dddd      	ble.n	8010272 <etharp_cleanup_netif+0xe>
    }
  }
}
 80102b6:	bf00      	nop
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	2000055c 	.word	0x2000055c

080102c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80102c4:	b5b0      	push	{r4, r5, r7, lr}
 80102c6:	b08a      	sub	sp, #40	; 0x28
 80102c8:	af04      	add	r7, sp, #16
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d107      	bne.n	80102e4 <etharp_input+0x20>
 80102d4:	4b3f      	ldr	r3, [pc, #252]	; (80103d4 <etharp_input+0x110>)
 80102d6:	f240 228a 	movw	r2, #650	; 0x28a
 80102da:	493f      	ldr	r1, [pc, #252]	; (80103d8 <etharp_input+0x114>)
 80102dc:	483f      	ldr	r0, [pc, #252]	; (80103dc <etharp_input+0x118>)
 80102de:	f001 ffeb 	bl	80122b8 <iprintf>
 80102e2:	e074      	b.n	80103ce <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102f4:	d10c      	bne.n	8010310 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80102fa:	2b06      	cmp	r3, #6
 80102fc:	d108      	bne.n	8010310 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010302:	2b04      	cmp	r3, #4
 8010304:	d104      	bne.n	8010310 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	885b      	ldrh	r3, [r3, #2]
 801030a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801030c:	2b08      	cmp	r3, #8
 801030e:	d003      	beq.n	8010318 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7f6 fd5b 	bl	8006dcc <pbuf_free>
    return;
 8010316:	e05a      	b.n	80103ce <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	330e      	adds	r3, #14
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010320:	693b      	ldr	r3, [r7, #16]
 8010322:	3318      	adds	r3, #24
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	3304      	adds	r3, #4
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d102      	bne.n	8010338 <etharp_input+0x74>
    for_us = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	75fb      	strb	r3, [r7, #23]
 8010336:	e009      	b.n	801034c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	3304      	adds	r3, #4
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	429a      	cmp	r2, r3
 8010342:	bf0c      	ite	eq
 8010344:	2301      	moveq	r3, #1
 8010346:	2300      	movne	r3, #0
 8010348:	b2db      	uxtb	r3, r3
 801034a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	f103 0208 	add.w	r2, r3, #8
 8010352:	7dfb      	ldrb	r3, [r7, #23]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d001      	beq.n	801035c <etharp_input+0x98>
 8010358:	2301      	movs	r3, #1
 801035a:	e000      	b.n	801035e <etharp_input+0x9a>
 801035c:	2302      	movs	r3, #2
 801035e:	f107 010c 	add.w	r1, r7, #12
 8010362:	6838      	ldr	r0, [r7, #0]
 8010364:	f7ff fed8 	bl	8010118 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	88db      	ldrh	r3, [r3, #6]
 801036c:	b29b      	uxth	r3, r3
 801036e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010372:	d003      	beq.n	801037c <etharp_input+0xb8>
 8010374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010378:	d01e      	beq.n	80103b8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801037a:	e025      	b.n	80103c8 <etharp_input+0x104>
      if (for_us) {
 801037c:	7dfb      	ldrb	r3, [r7, #23]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d021      	beq.n	80103c6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010398:	693a      	ldr	r2, [r7, #16]
 801039a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801039c:	2102      	movs	r1, #2
 801039e:	9103      	str	r1, [sp, #12]
 80103a0:	f107 010c 	add.w	r1, r7, #12
 80103a4:	9102      	str	r1, [sp, #8]
 80103a6:	9201      	str	r2, [sp, #4]
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	462b      	mov	r3, r5
 80103ac:	4622      	mov	r2, r4
 80103ae:	4601      	mov	r1, r0
 80103b0:	6838      	ldr	r0, [r7, #0]
 80103b2:	f000 faef 	bl	8010994 <etharp_raw>
      break;
 80103b6:	e006      	b.n	80103c6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80103b8:	f107 030c 	add.w	r3, r7, #12
 80103bc:	4619      	mov	r1, r3
 80103be:	6838      	ldr	r0, [r7, #0]
 80103c0:	f7fe f9fe 	bl	800e7c0 <dhcp_arp_reply>
      break;
 80103c4:	e000      	b.n	80103c8 <etharp_input+0x104>
      break;
 80103c6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7f6 fcff 	bl	8006dcc <pbuf_free>
}
 80103ce:	3718      	adds	r7, #24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bdb0      	pop	{r4, r5, r7, pc}
 80103d4:	08015a2c 	.word	0x08015a2c
 80103d8:	08015b7c 	.word	0x08015b7c
 80103dc:	08015aa4 	.word	0x08015aa4

080103e0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af02      	add	r7, sp, #8
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	4613      	mov	r3, r2
 80103ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80103ee:	79fa      	ldrb	r2, [r7, #7]
 80103f0:	4944      	ldr	r1, [pc, #272]	; (8010504 <etharp_output_to_arp_index+0x124>)
 80103f2:	4613      	mov	r3, r2
 80103f4:	005b      	lsls	r3, r3, #1
 80103f6:	4413      	add	r3, r2
 80103f8:	00db      	lsls	r3, r3, #3
 80103fa:	440b      	add	r3, r1
 80103fc:	3314      	adds	r3, #20
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	2b01      	cmp	r3, #1
 8010402:	d806      	bhi.n	8010412 <etharp_output_to_arp_index+0x32>
 8010404:	4b40      	ldr	r3, [pc, #256]	; (8010508 <etharp_output_to_arp_index+0x128>)
 8010406:	f240 22ef 	movw	r2, #751	; 0x2ef
 801040a:	4940      	ldr	r1, [pc, #256]	; (801050c <etharp_output_to_arp_index+0x12c>)
 801040c:	4840      	ldr	r0, [pc, #256]	; (8010510 <etharp_output_to_arp_index+0x130>)
 801040e:	f001 ff53 	bl	80122b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010412:	79fa      	ldrb	r2, [r7, #7]
 8010414:	493b      	ldr	r1, [pc, #236]	; (8010504 <etharp_output_to_arp_index+0x124>)
 8010416:	4613      	mov	r3, r2
 8010418:	005b      	lsls	r3, r3, #1
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	440b      	add	r3, r1
 8010420:	3314      	adds	r3, #20
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	2b02      	cmp	r3, #2
 8010426:	d153      	bne.n	80104d0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010428:	79fa      	ldrb	r2, [r7, #7]
 801042a:	4936      	ldr	r1, [pc, #216]	; (8010504 <etharp_output_to_arp_index+0x124>)
 801042c:	4613      	mov	r3, r2
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	4413      	add	r3, r2
 8010432:	00db      	lsls	r3, r3, #3
 8010434:	440b      	add	r3, r1
 8010436:	3312      	adds	r3, #18
 8010438:	881b      	ldrh	r3, [r3, #0]
 801043a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801043e:	d919      	bls.n	8010474 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010440:	79fa      	ldrb	r2, [r7, #7]
 8010442:	4613      	mov	r3, r2
 8010444:	005b      	lsls	r3, r3, #1
 8010446:	4413      	add	r3, r2
 8010448:	00db      	lsls	r3, r3, #3
 801044a:	4a2e      	ldr	r2, [pc, #184]	; (8010504 <etharp_output_to_arp_index+0x124>)
 801044c:	4413      	add	r3, r2
 801044e:	3304      	adds	r3, #4
 8010450:	4619      	mov	r1, r3
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f000 fb4c 	bl	8010af0 <etharp_request>
 8010458:	4603      	mov	r3, r0
 801045a:	2b00      	cmp	r3, #0
 801045c:	d138      	bne.n	80104d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801045e:	79fa      	ldrb	r2, [r7, #7]
 8010460:	4928      	ldr	r1, [pc, #160]	; (8010504 <etharp_output_to_arp_index+0x124>)
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	440b      	add	r3, r1
 801046c:	3314      	adds	r3, #20
 801046e:	2203      	movs	r2, #3
 8010470:	701a      	strb	r2, [r3, #0]
 8010472:	e02d      	b.n	80104d0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010474:	79fa      	ldrb	r2, [r7, #7]
 8010476:	4923      	ldr	r1, [pc, #140]	; (8010504 <etharp_output_to_arp_index+0x124>)
 8010478:	4613      	mov	r3, r2
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	4413      	add	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	440b      	add	r3, r1
 8010482:	3312      	adds	r3, #18
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801048a:	d321      	bcc.n	80104d0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801048c:	79fa      	ldrb	r2, [r7, #7]
 801048e:	4613      	mov	r3, r2
 8010490:	005b      	lsls	r3, r3, #1
 8010492:	4413      	add	r3, r2
 8010494:	00db      	lsls	r3, r3, #3
 8010496:	4a1b      	ldr	r2, [pc, #108]	; (8010504 <etharp_output_to_arp_index+0x124>)
 8010498:	4413      	add	r3, r2
 801049a:	1d19      	adds	r1, r3, #4
 801049c:	79fa      	ldrb	r2, [r7, #7]
 801049e:	4613      	mov	r3, r2
 80104a0:	005b      	lsls	r3, r3, #1
 80104a2:	4413      	add	r3, r2
 80104a4:	00db      	lsls	r3, r3, #3
 80104a6:	3308      	adds	r3, #8
 80104a8:	4a16      	ldr	r2, [pc, #88]	; (8010504 <etharp_output_to_arp_index+0x124>)
 80104aa:	4413      	add	r3, r2
 80104ac:	3304      	adds	r3, #4
 80104ae:	461a      	mov	r2, r3
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f000 fafb 	bl	8010aac <etharp_request_dst>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d109      	bne.n	80104d0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80104bc:	79fa      	ldrb	r2, [r7, #7]
 80104be:	4911      	ldr	r1, [pc, #68]	; (8010504 <etharp_output_to_arp_index+0x124>)
 80104c0:	4613      	mov	r3, r2
 80104c2:	005b      	lsls	r3, r3, #1
 80104c4:	4413      	add	r3, r2
 80104c6:	00db      	lsls	r3, r3, #3
 80104c8:	440b      	add	r3, r1
 80104ca:	3314      	adds	r3, #20
 80104cc:	2203      	movs	r2, #3
 80104ce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80104d6:	79fa      	ldrb	r2, [r7, #7]
 80104d8:	4613      	mov	r3, r2
 80104da:	005b      	lsls	r3, r3, #1
 80104dc:	4413      	add	r3, r2
 80104de:	00db      	lsls	r3, r3, #3
 80104e0:	3308      	adds	r3, #8
 80104e2:	4a08      	ldr	r2, [pc, #32]	; (8010504 <etharp_output_to_arp_index+0x124>)
 80104e4:	4413      	add	r3, r2
 80104e6:	1d1a      	adds	r2, r3, #4
 80104e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104ec:	9300      	str	r3, [sp, #0]
 80104ee:	4613      	mov	r3, r2
 80104f0:	460a      	mov	r2, r1
 80104f2:	68b9      	ldr	r1, [r7, #8]
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f001 fe51 	bl	801219c <ethernet_output>
 80104fa:	4603      	mov	r3, r0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	2000055c 	.word	0x2000055c
 8010508:	08015a2c 	.word	0x08015a2c
 801050c:	08015b9c 	.word	0x08015b9c
 8010510:	08015aa4 	.word	0x08015aa4

08010514 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b08a      	sub	sp, #40	; 0x28
 8010518:	af02      	add	r7, sp, #8
 801051a:	60f8      	str	r0, [r7, #12]
 801051c:	60b9      	str	r1, [r7, #8]
 801051e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <etharp_output+0x24>
 801052a:	4b73      	ldr	r3, [pc, #460]	; (80106f8 <etharp_output+0x1e4>)
 801052c:	f240 321e 	movw	r2, #798	; 0x31e
 8010530:	4972      	ldr	r1, [pc, #456]	; (80106fc <etharp_output+0x1e8>)
 8010532:	4873      	ldr	r0, [pc, #460]	; (8010700 <etharp_output+0x1ec>)
 8010534:	f001 fec0 	bl	80122b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d106      	bne.n	801054c <etharp_output+0x38>
 801053e:	4b6e      	ldr	r3, [pc, #440]	; (80106f8 <etharp_output+0x1e4>)
 8010540:	f240 321f 	movw	r2, #799	; 0x31f
 8010544:	496f      	ldr	r1, [pc, #444]	; (8010704 <etharp_output+0x1f0>)
 8010546:	486e      	ldr	r0, [pc, #440]	; (8010700 <etharp_output+0x1ec>)
 8010548:	f001 feb6 	bl	80122b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d106      	bne.n	8010560 <etharp_output+0x4c>
 8010552:	4b69      	ldr	r3, [pc, #420]	; (80106f8 <etharp_output+0x1e4>)
 8010554:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010558:	496b      	ldr	r1, [pc, #428]	; (8010708 <etharp_output+0x1f4>)
 801055a:	4869      	ldr	r0, [pc, #420]	; (8010700 <etharp_output+0x1ec>)
 801055c:	f001 feac 	bl	80122b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	68f9      	ldr	r1, [r7, #12]
 8010566:	4618      	mov	r0, r3
 8010568:	f000 ff14 	bl	8011394 <ip4_addr_isbroadcast_u32>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d002      	beq.n	8010578 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010572:	4b66      	ldr	r3, [pc, #408]	; (801070c <etharp_output+0x1f8>)
 8010574:	61fb      	str	r3, [r7, #28]
 8010576:	e0af      	b.n	80106d8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010580:	2be0      	cmp	r3, #224	; 0xe0
 8010582:	d118      	bne.n	80105b6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010584:	2301      	movs	r3, #1
 8010586:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010588:	2300      	movs	r3, #0
 801058a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801058c:	235e      	movs	r3, #94	; 0x5e
 801058e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3301      	adds	r3, #1
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801059a:	b2db      	uxtb	r3, r3
 801059c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	3302      	adds	r3, #2
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	3303      	adds	r3, #3
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80105ae:	f107 0310 	add.w	r3, r7, #16
 80105b2:	61fb      	str	r3, [r7, #28]
 80105b4:	e090      	b.n	80106d8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	3304      	adds	r3, #4
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	405a      	eors	r2, r3
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	3308      	adds	r3, #8
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4013      	ands	r3, r2
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d012      	beq.n	80105f4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80105d4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80105d8:	4293      	cmp	r3, r2
 80105da:	d00b      	beq.n	80105f4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	330c      	adds	r3, #12
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d003      	beq.n	80105ee <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	330c      	adds	r3, #12
 80105ea:	61bb      	str	r3, [r7, #24]
 80105ec:	e002      	b.n	80105f4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80105ee:	f06f 0303 	mvn.w	r3, #3
 80105f2:	e07d      	b.n	80106f0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80105f4:	4b46      	ldr	r3, [pc, #280]	; (8010710 <etharp_output+0x1fc>)
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	4619      	mov	r1, r3
 80105fa:	4a46      	ldr	r2, [pc, #280]	; (8010714 <etharp_output+0x200>)
 80105fc:	460b      	mov	r3, r1
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	440b      	add	r3, r1
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	4413      	add	r3, r2
 8010606:	3314      	adds	r3, #20
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b01      	cmp	r3, #1
 801060c:	d925      	bls.n	801065a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801060e:	4b40      	ldr	r3, [pc, #256]	; (8010710 <etharp_output+0x1fc>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	4619      	mov	r1, r3
 8010614:	4a3f      	ldr	r2, [pc, #252]	; (8010714 <etharp_output+0x200>)
 8010616:	460b      	mov	r3, r1
 8010618:	005b      	lsls	r3, r3, #1
 801061a:	440b      	add	r3, r1
 801061c:	00db      	lsls	r3, r3, #3
 801061e:	4413      	add	r3, r2
 8010620:	3308      	adds	r3, #8
 8010622:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	429a      	cmp	r2, r3
 8010628:	d117      	bne.n	801065a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801062a:	69bb      	ldr	r3, [r7, #24]
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	4b38      	ldr	r3, [pc, #224]	; (8010710 <etharp_output+0x1fc>)
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	4618      	mov	r0, r3
 8010634:	4937      	ldr	r1, [pc, #220]	; (8010714 <etharp_output+0x200>)
 8010636:	4603      	mov	r3, r0
 8010638:	005b      	lsls	r3, r3, #1
 801063a:	4403      	add	r3, r0
 801063c:	00db      	lsls	r3, r3, #3
 801063e:	440b      	add	r3, r1
 8010640:	3304      	adds	r3, #4
 8010642:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010644:	429a      	cmp	r2, r3
 8010646:	d108      	bne.n	801065a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010648:	4b31      	ldr	r3, [pc, #196]	; (8010710 <etharp_output+0x1fc>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	461a      	mov	r2, r3
 801064e:	68b9      	ldr	r1, [r7, #8]
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f7ff fec5 	bl	80103e0 <etharp_output_to_arp_index>
 8010656:	4603      	mov	r3, r0
 8010658:	e04a      	b.n	80106f0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801065a:	2300      	movs	r3, #0
 801065c:	75fb      	strb	r3, [r7, #23]
 801065e:	e031      	b.n	80106c4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010660:	7dfa      	ldrb	r2, [r7, #23]
 8010662:	492c      	ldr	r1, [pc, #176]	; (8010714 <etharp_output+0x200>)
 8010664:	4613      	mov	r3, r2
 8010666:	005b      	lsls	r3, r3, #1
 8010668:	4413      	add	r3, r2
 801066a:	00db      	lsls	r3, r3, #3
 801066c:	440b      	add	r3, r1
 801066e:	3314      	adds	r3, #20
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	2b01      	cmp	r3, #1
 8010674:	d923      	bls.n	80106be <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010676:	7dfa      	ldrb	r2, [r7, #23]
 8010678:	4926      	ldr	r1, [pc, #152]	; (8010714 <etharp_output+0x200>)
 801067a:	4613      	mov	r3, r2
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	4413      	add	r3, r2
 8010680:	00db      	lsls	r3, r3, #3
 8010682:	440b      	add	r3, r1
 8010684:	3308      	adds	r3, #8
 8010686:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010688:	68fa      	ldr	r2, [r7, #12]
 801068a:	429a      	cmp	r2, r3
 801068c:	d117      	bne.n	80106be <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	6819      	ldr	r1, [r3, #0]
 8010692:	7dfa      	ldrb	r2, [r7, #23]
 8010694:	481f      	ldr	r0, [pc, #124]	; (8010714 <etharp_output+0x200>)
 8010696:	4613      	mov	r3, r2
 8010698:	005b      	lsls	r3, r3, #1
 801069a:	4413      	add	r3, r2
 801069c:	00db      	lsls	r3, r3, #3
 801069e:	4403      	add	r3, r0
 80106a0:	3304      	adds	r3, #4
 80106a2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80106a4:	4299      	cmp	r1, r3
 80106a6:	d10a      	bne.n	80106be <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80106a8:	4a19      	ldr	r2, [pc, #100]	; (8010710 <etharp_output+0x1fc>)
 80106aa:	7dfb      	ldrb	r3, [r7, #23]
 80106ac:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80106ae:	7dfb      	ldrb	r3, [r7, #23]
 80106b0:	461a      	mov	r2, r3
 80106b2:	68b9      	ldr	r1, [r7, #8]
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f7ff fe93 	bl	80103e0 <etharp_output_to_arp_index>
 80106ba:	4603      	mov	r3, r0
 80106bc:	e018      	b.n	80106f0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80106be:	7dfb      	ldrb	r3, [r7, #23]
 80106c0:	3301      	adds	r3, #1
 80106c2:	75fb      	strb	r3, [r7, #23]
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	2b09      	cmp	r3, #9
 80106c8:	d9ca      	bls.n	8010660 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80106ca:	68ba      	ldr	r2, [r7, #8]
 80106cc:	69b9      	ldr	r1, [r7, #24]
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f000 f822 	bl	8010718 <etharp_query>
 80106d4:	4603      	mov	r3, r0
 80106d6:	e00b      	b.n	80106f0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80106de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	68b9      	ldr	r1, [r7, #8]
 80106e8:	68f8      	ldr	r0, [r7, #12]
 80106ea:	f001 fd57 	bl	801219c <ethernet_output>
 80106ee:	4603      	mov	r3, r0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3720      	adds	r7, #32
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	08015a2c 	.word	0x08015a2c
 80106fc:	08015b7c 	.word	0x08015b7c
 8010700:	08015aa4 	.word	0x08015aa4
 8010704:	08015bcc 	.word	0x08015bcc
 8010708:	08015b6c 	.word	0x08015b6c
 801070c:	0801e094 	.word	0x0801e094
 8010710:	2000064c 	.word	0x2000064c
 8010714:	2000055c 	.word	0x2000055c

08010718 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08c      	sub	sp, #48	; 0x30
 801071c:	af02      	add	r7, sp, #8
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	3326      	adds	r3, #38	; 0x26
 8010728:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801072a:	23ff      	movs	r3, #255	; 0xff
 801072c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010730:	2300      	movs	r3, #0
 8010732:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	68f9      	ldr	r1, [r7, #12]
 801073a:	4618      	mov	r0, r3
 801073c:	f000 fe2a 	bl	8011394 <ip4_addr_isbroadcast_u32>
 8010740:	4603      	mov	r3, r0
 8010742:	2b00      	cmp	r3, #0
 8010744:	d10c      	bne.n	8010760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801074e:	2be0      	cmp	r3, #224	; 0xe0
 8010750:	d006      	beq.n	8010760 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d003      	beq.n	8010760 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d102      	bne.n	8010766 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010760:	f06f 030f 	mvn.w	r3, #15
 8010764:	e102      	b.n	801096c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	2101      	movs	r1, #1
 801076a:	68b8      	ldr	r0, [r7, #8]
 801076c:	f7ff fb5c 	bl	800fe28 <etharp_find_entry>
 8010770:	4603      	mov	r3, r0
 8010772:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010774:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010778:	2b00      	cmp	r3, #0
 801077a:	da02      	bge.n	8010782 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801077c:	8a7b      	ldrh	r3, [r7, #18]
 801077e:	b25b      	sxtb	r3, r3
 8010780:	e0f4      	b.n	801096c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010782:	8a7b      	ldrh	r3, [r7, #18]
 8010784:	2b7e      	cmp	r3, #126	; 0x7e
 8010786:	d906      	bls.n	8010796 <etharp_query+0x7e>
 8010788:	4b7a      	ldr	r3, [pc, #488]	; (8010974 <etharp_query+0x25c>)
 801078a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801078e:	497a      	ldr	r1, [pc, #488]	; (8010978 <etharp_query+0x260>)
 8010790:	487a      	ldr	r0, [pc, #488]	; (801097c <etharp_query+0x264>)
 8010792:	f001 fd91 	bl	80122b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010796:	8a7b      	ldrh	r3, [r7, #18]
 8010798:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801079a:	7c7a      	ldrb	r2, [r7, #17]
 801079c:	4978      	ldr	r1, [pc, #480]	; (8010980 <etharp_query+0x268>)
 801079e:	4613      	mov	r3, r2
 80107a0:	005b      	lsls	r3, r3, #1
 80107a2:	4413      	add	r3, r2
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	440b      	add	r3, r1
 80107a8:	3314      	adds	r3, #20
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d115      	bne.n	80107dc <etharp_query+0xc4>
    is_new_entry = 1;
 80107b0:	2301      	movs	r3, #1
 80107b2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80107b4:	7c7a      	ldrb	r2, [r7, #17]
 80107b6:	4972      	ldr	r1, [pc, #456]	; (8010980 <etharp_query+0x268>)
 80107b8:	4613      	mov	r3, r2
 80107ba:	005b      	lsls	r3, r3, #1
 80107bc:	4413      	add	r3, r2
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	440b      	add	r3, r1
 80107c2:	3314      	adds	r3, #20
 80107c4:	2201      	movs	r2, #1
 80107c6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80107c8:	7c7a      	ldrb	r2, [r7, #17]
 80107ca:	496d      	ldr	r1, [pc, #436]	; (8010980 <etharp_query+0x268>)
 80107cc:	4613      	mov	r3, r2
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	00db      	lsls	r3, r3, #3
 80107d4:	440b      	add	r3, r1
 80107d6:	3308      	adds	r3, #8
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80107dc:	7c7a      	ldrb	r2, [r7, #17]
 80107de:	4968      	ldr	r1, [pc, #416]	; (8010980 <etharp_query+0x268>)
 80107e0:	4613      	mov	r3, r2
 80107e2:	005b      	lsls	r3, r3, #1
 80107e4:	4413      	add	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	440b      	add	r3, r1
 80107ea:	3314      	adds	r3, #20
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d011      	beq.n	8010816 <etharp_query+0xfe>
 80107f2:	7c7a      	ldrb	r2, [r7, #17]
 80107f4:	4962      	ldr	r1, [pc, #392]	; (8010980 <etharp_query+0x268>)
 80107f6:	4613      	mov	r3, r2
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	4413      	add	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	440b      	add	r3, r1
 8010800:	3314      	adds	r3, #20
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d806      	bhi.n	8010816 <etharp_query+0xfe>
 8010808:	4b5a      	ldr	r3, [pc, #360]	; (8010974 <etharp_query+0x25c>)
 801080a:	f240 32cf 	movw	r2, #975	; 0x3cf
 801080e:	495d      	ldr	r1, [pc, #372]	; (8010984 <etharp_query+0x26c>)
 8010810:	485a      	ldr	r0, [pc, #360]	; (801097c <etharp_query+0x264>)
 8010812:	f001 fd51 	bl	80122b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010816:	6a3b      	ldr	r3, [r7, #32]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d102      	bne.n	8010822 <etharp_query+0x10a>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d10c      	bne.n	801083c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010822:	68b9      	ldr	r1, [r7, #8]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f000 f963 	bl	8010af0 <etharp_request>
 801082a:	4603      	mov	r3, r0
 801082c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d102      	bne.n	801083c <etharp_query+0x124>
      return result;
 8010836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801083a:	e097      	b.n	801096c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d106      	bne.n	8010850 <etharp_query+0x138>
 8010842:	4b4c      	ldr	r3, [pc, #304]	; (8010974 <etharp_query+0x25c>)
 8010844:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010848:	494f      	ldr	r1, [pc, #316]	; (8010988 <etharp_query+0x270>)
 801084a:	484c      	ldr	r0, [pc, #304]	; (801097c <etharp_query+0x264>)
 801084c:	f001 fd34 	bl	80122b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010850:	7c7a      	ldrb	r2, [r7, #17]
 8010852:	494b      	ldr	r1, [pc, #300]	; (8010980 <etharp_query+0x268>)
 8010854:	4613      	mov	r3, r2
 8010856:	005b      	lsls	r3, r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	00db      	lsls	r3, r3, #3
 801085c:	440b      	add	r3, r1
 801085e:	3314      	adds	r3, #20
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	2b01      	cmp	r3, #1
 8010864:	d918      	bls.n	8010898 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010866:	4a49      	ldr	r2, [pc, #292]	; (801098c <etharp_query+0x274>)
 8010868:	7c7b      	ldrb	r3, [r7, #17]
 801086a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801086c:	7c7a      	ldrb	r2, [r7, #17]
 801086e:	4613      	mov	r3, r2
 8010870:	005b      	lsls	r3, r3, #1
 8010872:	4413      	add	r3, r2
 8010874:	00db      	lsls	r3, r3, #3
 8010876:	3308      	adds	r3, #8
 8010878:	4a41      	ldr	r2, [pc, #260]	; (8010980 <etharp_query+0x268>)
 801087a:	4413      	add	r3, r2
 801087c:	1d1a      	adds	r2, r3, #4
 801087e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	4613      	mov	r3, r2
 8010886:	697a      	ldr	r2, [r7, #20]
 8010888:	6879      	ldr	r1, [r7, #4]
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f001 fc86 	bl	801219c <ethernet_output>
 8010890:	4603      	mov	r3, r0
 8010892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010896:	e067      	b.n	8010968 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010898:	7c7a      	ldrb	r2, [r7, #17]
 801089a:	4939      	ldr	r1, [pc, #228]	; (8010980 <etharp_query+0x268>)
 801089c:	4613      	mov	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	3314      	adds	r3, #20
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	d15c      	bne.n	8010968 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80108b6:	e01c      	b.n	80108f2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	895a      	ldrh	r2, [r3, #10]
 80108bc:	69fb      	ldr	r3, [r7, #28]
 80108be:	891b      	ldrh	r3, [r3, #8]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d10a      	bne.n	80108da <etharp_query+0x1c2>
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d006      	beq.n	80108da <etharp_query+0x1c2>
 80108cc:	4b29      	ldr	r3, [pc, #164]	; (8010974 <etharp_query+0x25c>)
 80108ce:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80108d2:	492f      	ldr	r1, [pc, #188]	; (8010990 <etharp_query+0x278>)
 80108d4:	4829      	ldr	r0, [pc, #164]	; (801097c <etharp_query+0x264>)
 80108d6:	f001 fcef 	bl	80122b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	7b1b      	ldrb	r3, [r3, #12]
 80108de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d002      	beq.n	80108ec <etharp_query+0x1d4>
        copy_needed = 1;
 80108e6:	2301      	movs	r3, #1
 80108e8:	61bb      	str	r3, [r7, #24]
        break;
 80108ea:	e005      	b.n	80108f8 <etharp_query+0x1e0>
      }
      p = p->next;
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d1df      	bne.n	80108b8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d007      	beq.n	801090e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010904:	200e      	movs	r0, #14
 8010906:	f7f6 fccd 	bl	80072a4 <pbuf_clone>
 801090a:	61f8      	str	r0, [r7, #28]
 801090c:	e004      	b.n	8010918 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010912:	69f8      	ldr	r0, [r7, #28]
 8010914:	f7f6 fafa 	bl	8006f0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010918:	69fb      	ldr	r3, [r7, #28]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d021      	beq.n	8010962 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801091e:	7c7a      	ldrb	r2, [r7, #17]
 8010920:	4917      	ldr	r1, [pc, #92]	; (8010980 <etharp_query+0x268>)
 8010922:	4613      	mov	r3, r2
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	4413      	add	r3, r2
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	440b      	add	r3, r1
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d00a      	beq.n	8010948 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010932:	7c7a      	ldrb	r2, [r7, #17]
 8010934:	4912      	ldr	r1, [pc, #72]	; (8010980 <etharp_query+0x268>)
 8010936:	4613      	mov	r3, r2
 8010938:	005b      	lsls	r3, r3, #1
 801093a:	4413      	add	r3, r2
 801093c:	00db      	lsls	r3, r3, #3
 801093e:	440b      	add	r3, r1
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f7f6 fa42 	bl	8006dcc <pbuf_free>
      }
      arp_table[i].q = p;
 8010948:	7c7a      	ldrb	r2, [r7, #17]
 801094a:	490d      	ldr	r1, [pc, #52]	; (8010980 <etharp_query+0x268>)
 801094c:	4613      	mov	r3, r2
 801094e:	005b      	lsls	r3, r3, #1
 8010950:	4413      	add	r3, r2
 8010952:	00db      	lsls	r3, r3, #3
 8010954:	440b      	add	r3, r1
 8010956:	69fa      	ldr	r2, [r7, #28]
 8010958:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801095a:	2300      	movs	r3, #0
 801095c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010960:	e002      	b.n	8010968 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010962:	23ff      	movs	r3, #255	; 0xff
 8010964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010968:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801096c:	4618      	mov	r0, r3
 801096e:	3728      	adds	r7, #40	; 0x28
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	08015a2c 	.word	0x08015a2c
 8010978:	08015bd8 	.word	0x08015bd8
 801097c:	08015aa4 	.word	0x08015aa4
 8010980:	2000055c 	.word	0x2000055c
 8010984:	08015be8 	.word	0x08015be8
 8010988:	08015bcc 	.word	0x08015bcc
 801098c:	2000064c 	.word	0x2000064c
 8010990:	08015c10 	.word	0x08015c10

08010994 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b08a      	sub	sp, #40	; 0x28
 8010998:	af02      	add	r7, sp, #8
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	607a      	str	r2, [r7, #4]
 80109a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80109a2:	2300      	movs	r3, #0
 80109a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d106      	bne.n	80109ba <etharp_raw+0x26>
 80109ac:	4b3a      	ldr	r3, [pc, #232]	; (8010a98 <etharp_raw+0x104>)
 80109ae:	f240 4257 	movw	r2, #1111	; 0x457
 80109b2:	493a      	ldr	r1, [pc, #232]	; (8010a9c <etharp_raw+0x108>)
 80109b4:	483a      	ldr	r0, [pc, #232]	; (8010aa0 <etharp_raw+0x10c>)
 80109b6:	f001 fc7f 	bl	80122b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80109ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109be:	211c      	movs	r1, #28
 80109c0:	200e      	movs	r0, #14
 80109c2:	f7f5 ff23 	bl	800680c <pbuf_alloc>
 80109c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d102      	bne.n	80109d4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80109ce:	f04f 33ff 	mov.w	r3, #4294967295
 80109d2:	e05d      	b.n	8010a90 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	895b      	ldrh	r3, [r3, #10]
 80109d8:	2b1b      	cmp	r3, #27
 80109da:	d806      	bhi.n	80109ea <etharp_raw+0x56>
 80109dc:	4b2e      	ldr	r3, [pc, #184]	; (8010a98 <etharp_raw+0x104>)
 80109de:	f240 4263 	movw	r2, #1123	; 0x463
 80109e2:	4930      	ldr	r1, [pc, #192]	; (8010aa4 <etharp_raw+0x110>)
 80109e4:	482e      	ldr	r0, [pc, #184]	; (8010aa0 <etharp_raw+0x10c>)
 80109e6:	f001 fc67 	bl	80122b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80109ea:	69bb      	ldr	r3, [r7, #24]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80109f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f4 ff12 	bl	800581c <lwip_htons>
 80109f8:	4603      	mov	r3, r0
 80109fa:	461a      	mov	r2, r3
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a06:	2b06      	cmp	r3, #6
 8010a08:	d006      	beq.n	8010a18 <etharp_raw+0x84>
 8010a0a:	4b23      	ldr	r3, [pc, #140]	; (8010a98 <etharp_raw+0x104>)
 8010a0c:	f240 426a 	movw	r2, #1130	; 0x46a
 8010a10:	4925      	ldr	r1, [pc, #148]	; (8010aa8 <etharp_raw+0x114>)
 8010a12:	4823      	ldr	r0, [pc, #140]	; (8010aa0 <etharp_raw+0x10c>)
 8010a14:	f001 fc50 	bl	80122b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	3308      	adds	r3, #8
 8010a1c:	2206      	movs	r2, #6
 8010a1e:	6839      	ldr	r1, [r7, #0]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f001 fc36 	bl	8012292 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	3312      	adds	r3, #18
 8010a2a:	2206      	movs	r2, #6
 8010a2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f001 fc2f 	bl	8012292 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	330e      	adds	r3, #14
 8010a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a3a:	6812      	ldr	r2, [r2, #0]
 8010a3c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	3318      	adds	r3, #24
 8010a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a44:	6812      	ldr	r2, [r2, #0]
 8010a46:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	701a      	strb	r2, [r3, #0]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f042 0201 	orr.w	r2, r2, #1
 8010a54:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010a56:	697b      	ldr	r3, [r7, #20]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	f042 0208 	orr.w	r2, r2, #8
 8010a5e:	709a      	strb	r2, [r3, #2]
 8010a60:	2200      	movs	r2, #0
 8010a62:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	2206      	movs	r2, #6
 8010a68:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	2204      	movs	r2, #4
 8010a6e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010a70:	f640 0306 	movw	r3, #2054	; 0x806
 8010a74:	9300      	str	r3, [sp, #0]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	69b9      	ldr	r1, [r7, #24]
 8010a7c:	68f8      	ldr	r0, [r7, #12]
 8010a7e:	f001 fb8d 	bl	801219c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010a82:	69b8      	ldr	r0, [r7, #24]
 8010a84:	f7f6 f9a2 	bl	8006dcc <pbuf_free>
  p = NULL;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010a8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3720      	adds	r7, #32
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	08015a2c 	.word	0x08015a2c
 8010a9c:	08015b7c 	.word	0x08015b7c
 8010aa0:	08015aa4 	.word	0x08015aa4
 8010aa4:	08015c2c 	.word	0x08015c2c
 8010aa8:	08015c60 	.word	0x08015c60

08010aac <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af04      	add	r7, sp, #16
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010ac8:	2201      	movs	r2, #1
 8010aca:	9203      	str	r2, [sp, #12]
 8010acc:	68ba      	ldr	r2, [r7, #8]
 8010ace:	9202      	str	r2, [sp, #8]
 8010ad0:	4a06      	ldr	r2, [pc, #24]	; (8010aec <etharp_request_dst+0x40>)
 8010ad2:	9201      	str	r2, [sp, #4]
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f7ff ff5a 	bl	8010994 <etharp_raw>
 8010ae0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	0801e09c 	.word	0x0801e09c

08010af0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010afa:	4a05      	ldr	r2, [pc, #20]	; (8010b10 <etharp_request+0x20>)
 8010afc:	6839      	ldr	r1, [r7, #0]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f7ff ffd4 	bl	8010aac <etharp_request_dst>
 8010b04:	4603      	mov	r3, r0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	0801e094 	.word	0x0801e094

08010b14 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08e      	sub	sp, #56	; 0x38
 8010b18:	af04      	add	r7, sp, #16
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010b1e:	4b79      	ldr	r3, [pc, #484]	; (8010d04 <icmp_input+0x1f0>)
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	f003 030f 	and.w	r3, r3, #15
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	009b      	lsls	r3, r3, #2
 8010b30:	b2db      	uxtb	r3, r3
 8010b32:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010b34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b36:	2b13      	cmp	r3, #19
 8010b38:	f240 80cd 	bls.w	8010cd6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	895b      	ldrh	r3, [r3, #10]
 8010b40:	2b03      	cmp	r3, #3
 8010b42:	f240 80ca 	bls.w	8010cda <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010b50:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	f000 80b7 	beq.w	8010cc8 <icmp_input+0x1b4>
 8010b5a:	2b08      	cmp	r3, #8
 8010b5c:	f040 80b7 	bne.w	8010cce <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010b60:	4b69      	ldr	r3, [pc, #420]	; (8010d08 <icmp_input+0x1f4>)
 8010b62:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010b64:	4b67      	ldr	r3, [pc, #412]	; (8010d04 <icmp_input+0x1f0>)
 8010b66:	695b      	ldr	r3, [r3, #20]
 8010b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b6c:	2be0      	cmp	r3, #224	; 0xe0
 8010b6e:	f000 80bb 	beq.w	8010ce8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010b72:	4b64      	ldr	r3, [pc, #400]	; (8010d04 <icmp_input+0x1f0>)
 8010b74:	695a      	ldr	r2, [r3, #20]
 8010b76:	4b63      	ldr	r3, [pc, #396]	; (8010d04 <icmp_input+0x1f0>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	4610      	mov	r0, r2
 8010b7e:	f000 fc09 	bl	8011394 <ip4_addr_isbroadcast_u32>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	f040 80b1 	bne.w	8010cec <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	891b      	ldrh	r3, [r3, #8]
 8010b8e:	2b07      	cmp	r3, #7
 8010b90:	f240 80a5 	bls.w	8010cde <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b96:	330e      	adds	r3, #14
 8010b98:	4619      	mov	r1, r3
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7f6 f880 	bl	8006ca0 <pbuf_add_header>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d04b      	beq.n	8010c3e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	891a      	ldrh	r2, [r3, #8]
 8010baa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bac:	4413      	add	r3, r2
 8010bae:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	891b      	ldrh	r3, [r3, #8]
 8010bb4:	8b7a      	ldrh	r2, [r7, #26]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	f0c0 809a 	bcc.w	8010cf0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010bbc:	8b7b      	ldrh	r3, [r7, #26]
 8010bbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	200e      	movs	r0, #14
 8010bc6:	f7f5 fe21 	bl	800680c <pbuf_alloc>
 8010bca:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	f000 8090 	beq.w	8010cf4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	895b      	ldrh	r3, [r3, #10]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bdc:	3308      	adds	r3, #8
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d203      	bcs.n	8010bea <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010be2:	6978      	ldr	r0, [r7, #20]
 8010be4:	f7f6 f8f2 	bl	8006dcc <pbuf_free>
          goto icmperr;
 8010be8:	e085      	b.n	8010cf6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010bf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f001 fb4d 	bl	8012292 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	6978      	ldr	r0, [r7, #20]
 8010bfe:	f7f6 f85f 	bl	8006cc0 <pbuf_remove_header>
 8010c02:	4603      	mov	r3, r0
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d009      	beq.n	8010c1c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010c08:	4b40      	ldr	r3, [pc, #256]	; (8010d0c <icmp_input+0x1f8>)
 8010c0a:	22b6      	movs	r2, #182	; 0xb6
 8010c0c:	4940      	ldr	r1, [pc, #256]	; (8010d10 <icmp_input+0x1fc>)
 8010c0e:	4841      	ldr	r0, [pc, #260]	; (8010d14 <icmp_input+0x200>)
 8010c10:	f001 fb52 	bl	80122b8 <iprintf>
          pbuf_free(r);
 8010c14:	6978      	ldr	r0, [r7, #20]
 8010c16:	f7f6 f8d9 	bl	8006dcc <pbuf_free>
          goto icmperr;
 8010c1a:	e06c      	b.n	8010cf6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010c1c:	6879      	ldr	r1, [r7, #4]
 8010c1e:	6978      	ldr	r0, [r7, #20]
 8010c20:	f7f6 f9fc 	bl	800701c <pbuf_copy>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d003      	beq.n	8010c32 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010c2a:	6978      	ldr	r0, [r7, #20]
 8010c2c:	f7f6 f8ce 	bl	8006dcc <pbuf_free>
          goto icmperr;
 8010c30:	e061      	b.n	8010cf6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7f6 f8ca 	bl	8006dcc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	607b      	str	r3, [r7, #4]
 8010c3c:	e00f      	b.n	8010c5e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010c3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c40:	330e      	adds	r3, #14
 8010c42:	4619      	mov	r1, r3
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7f6 f83b 	bl	8006cc0 <pbuf_remove_header>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d006      	beq.n	8010c5e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010c50:	4b2e      	ldr	r3, [pc, #184]	; (8010d0c <icmp_input+0x1f8>)
 8010c52:	22c7      	movs	r2, #199	; 0xc7
 8010c54:	4930      	ldr	r1, [pc, #192]	; (8010d18 <icmp_input+0x204>)
 8010c56:	482f      	ldr	r0, [pc, #188]	; (8010d14 <icmp_input+0x200>)
 8010c58:	f001 fb2e 	bl	80122b8 <iprintf>
          goto icmperr;
 8010c5c:	e04b      	b.n	8010cf6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010c64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7f6 f819 	bl	8006ca0 <pbuf_add_header>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d12b      	bne.n	8010ccc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	685b      	ldr	r3, [r3, #4]
 8010c78:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010c82:	4b20      	ldr	r3, [pc, #128]	; (8010d04 <icmp_input+0x1f0>)
 8010c84:	691a      	ldr	r2, [r3, #16]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010c8a:	693b      	ldr	r3, [r7, #16]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	2200      	movs	r2, #0
 8010c94:	709a      	strb	r2, [r3, #2]
 8010c96:	2200      	movs	r2, #0
 8010c98:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	22ff      	movs	r2, #255	; 0xff
 8010c9e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	729a      	strb	r2, [r3, #10]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	9302      	str	r3, [sp, #8]
 8010cae:	2301      	movs	r3, #1
 8010cb0:	9301      	str	r3, [sp, #4]
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	23ff      	movs	r3, #255	; 0xff
 8010cb8:	2200      	movs	r2, #0
 8010cba:	69f9      	ldr	r1, [r7, #28]
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 fa91 	bl	80111e4 <ip4_output_if>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010cc6:	e001      	b.n	8010ccc <icmp_input+0x1b8>
      break;
 8010cc8:	bf00      	nop
 8010cca:	e000      	b.n	8010cce <icmp_input+0x1ba>
      break;
 8010ccc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	f7f6 f87c 	bl	8006dcc <pbuf_free>
  return;
 8010cd4:	e013      	b.n	8010cfe <icmp_input+0x1ea>
    goto lenerr;
 8010cd6:	bf00      	nop
 8010cd8:	e002      	b.n	8010ce0 <icmp_input+0x1cc>
    goto lenerr;
 8010cda:	bf00      	nop
 8010cdc:	e000      	b.n	8010ce0 <icmp_input+0x1cc>
        goto lenerr;
 8010cde:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7f6 f873 	bl	8006dcc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010ce6:	e00a      	b.n	8010cfe <icmp_input+0x1ea>
        goto icmperr;
 8010ce8:	bf00      	nop
 8010cea:	e004      	b.n	8010cf6 <icmp_input+0x1e2>
        goto icmperr;
 8010cec:	bf00      	nop
 8010cee:	e002      	b.n	8010cf6 <icmp_input+0x1e2>
          goto icmperr;
 8010cf0:	bf00      	nop
 8010cf2:	e000      	b.n	8010cf6 <icmp_input+0x1e2>
          goto icmperr;
 8010cf4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f7f6 f868 	bl	8006dcc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010cfc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010cfe:	3728      	adds	r7, #40	; 0x28
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	20003c10 	.word	0x20003c10
 8010d08:	20003c24 	.word	0x20003c24
 8010d0c:	08015ca4 	.word	0x08015ca4
 8010d10:	08015cdc 	.word	0x08015cdc
 8010d14:	08015d14 	.word	0x08015d14
 8010d18:	08015d3c 	.word	0x08015d3c

08010d1c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	460b      	mov	r3, r1
 8010d26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010d28:	78fb      	ldrb	r3, [r7, #3]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	2103      	movs	r1, #3
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	f000 f814 	bl	8010d5c <icmp_send_response>
}
 8010d34:	bf00      	nop
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}

08010d3c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010d48:	78fb      	ldrb	r3, [r7, #3]
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	210b      	movs	r1, #11
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f000 f804 	bl	8010d5c <icmp_send_response>
}
 8010d54:	bf00      	nop
 8010d56:	3708      	adds	r7, #8
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}

08010d5c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b08c      	sub	sp, #48	; 0x30
 8010d60:	af04      	add	r7, sp, #16
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	460b      	mov	r3, r1
 8010d66:	70fb      	strb	r3, [r7, #3]
 8010d68:	4613      	mov	r3, r2
 8010d6a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010d6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d70:	2124      	movs	r1, #36	; 0x24
 8010d72:	2022      	movs	r0, #34	; 0x22
 8010d74:	f7f5 fd4a 	bl	800680c <pbuf_alloc>
 8010d78:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010d7a:	69fb      	ldr	r3, [r7, #28]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d04c      	beq.n	8010e1a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	895b      	ldrh	r3, [r3, #10]
 8010d84:	2b23      	cmp	r3, #35	; 0x23
 8010d86:	d806      	bhi.n	8010d96 <icmp_send_response+0x3a>
 8010d88:	4b26      	ldr	r3, [pc, #152]	; (8010e24 <icmp_send_response+0xc8>)
 8010d8a:	f240 1269 	movw	r2, #361	; 0x169
 8010d8e:	4926      	ldr	r1, [pc, #152]	; (8010e28 <icmp_send_response+0xcc>)
 8010d90:	4826      	ldr	r0, [pc, #152]	; (8010e2c <icmp_send_response+0xd0>)
 8010d92:	f001 fa91 	bl	80122b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	78fa      	ldrb	r2, [r7, #3]
 8010da6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	78ba      	ldrb	r2, [r7, #2]
 8010dac:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	2200      	movs	r2, #0
 8010db2:	711a      	strb	r2, [r3, #4]
 8010db4:	2200      	movs	r2, #0
 8010db6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	719a      	strb	r2, [r3, #6]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	f103 0008 	add.w	r0, r3, #8
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	221c      	movs	r2, #28
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	f001 fa5e 	bl	8012292 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010dd6:	69bb      	ldr	r3, [r7, #24]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010ddc:	f107 030c 	add.w	r3, r7, #12
 8010de0:	4618      	mov	r0, r3
 8010de2:	f000 f825 	bl	8010e30 <ip4_route>
 8010de6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d011      	beq.n	8010e12 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2200      	movs	r2, #0
 8010df2:	709a      	strb	r2, [r3, #2]
 8010df4:	2200      	movs	r2, #0
 8010df6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010df8:	f107 020c 	add.w	r2, r7, #12
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	9302      	str	r3, [sp, #8]
 8010e00:	2301      	movs	r3, #1
 8010e02:	9301      	str	r3, [sp, #4]
 8010e04:	2300      	movs	r3, #0
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	23ff      	movs	r3, #255	; 0xff
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	69f8      	ldr	r0, [r7, #28]
 8010e0e:	f000 f9e9 	bl	80111e4 <ip4_output_if>
  }
  pbuf_free(q);
 8010e12:	69f8      	ldr	r0, [r7, #28]
 8010e14:	f7f5 ffda 	bl	8006dcc <pbuf_free>
 8010e18:	e000      	b.n	8010e1c <icmp_send_response+0xc0>
    return;
 8010e1a:	bf00      	nop
}
 8010e1c:	3720      	adds	r7, #32
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	08015ca4 	.word	0x08015ca4
 8010e28:	08015d70 	.word	0x08015d70
 8010e2c:	08015d14 	.word	0x08015d14

08010e30 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010e38:	4b33      	ldr	r3, [pc, #204]	; (8010f08 <ip4_route+0xd8>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	60fb      	str	r3, [r7, #12]
 8010e3e:	e036      	b.n	8010eae <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e46:	f003 0301 	and.w	r3, r3, #1
 8010e4a:	b2db      	uxtb	r3, r3
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d02b      	beq.n	8010ea8 <ip4_route+0x78>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e56:	089b      	lsrs	r3, r3, #2
 8010e58:	f003 0301 	and.w	r3, r3, #1
 8010e5c:	b2db      	uxtb	r3, r3
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d022      	beq.n	8010ea8 <ip4_route+0x78>
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3304      	adds	r3, #4
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d01d      	beq.n	8010ea8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681a      	ldr	r2, [r3, #0]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	3304      	adds	r3, #4
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	405a      	eors	r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	4013      	ands	r3, r2
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d101      	bne.n	8010e88 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	e038      	b.n	8010efa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e8e:	f003 0302 	and.w	r3, r3, #2
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d108      	bne.n	8010ea8 <ip4_route+0x78>
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681a      	ldr	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	330c      	adds	r3, #12
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d101      	bne.n	8010ea8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	e028      	b.n	8010efa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	60fb      	str	r3, [r7, #12]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1c5      	bne.n	8010e40 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010eb4:	4b15      	ldr	r3, [pc, #84]	; (8010f0c <ip4_route+0xdc>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d01a      	beq.n	8010ef2 <ip4_route+0xc2>
 8010ebc:	4b13      	ldr	r3, [pc, #76]	; (8010f0c <ip4_route+0xdc>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d012      	beq.n	8010ef2 <ip4_route+0xc2>
 8010ecc:	4b0f      	ldr	r3, [pc, #60]	; (8010f0c <ip4_route+0xdc>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ed4:	f003 0304 	and.w	r3, r3, #4
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d00a      	beq.n	8010ef2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010edc:	4b0b      	ldr	r3, [pc, #44]	; (8010f0c <ip4_route+0xdc>)
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d004      	beq.n	8010ef2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b7f      	cmp	r3, #127	; 0x7f
 8010ef0:	d101      	bne.n	8010ef6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	e001      	b.n	8010efa <ip4_route+0xca>
  }

  return netif_default;
 8010ef6:	4b05      	ldr	r3, [pc, #20]	; (8010f0c <ip4_route+0xdc>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3714      	adds	r7, #20
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr
 8010f06:	bf00      	nop
 8010f08:	20007164 	.word	0x20007164
 8010f0c:	20007168 	.word	0x20007168

08010f10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d016      	beq.n	8010f56 <ip4_input_accept+0x46>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d011      	beq.n	8010f56 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010f32:	4b0b      	ldr	r3, [pc, #44]	; (8010f60 <ip4_input_accept+0x50>)
 8010f34:	695a      	ldr	r2, [r3, #20]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	3304      	adds	r3, #4
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d008      	beq.n	8010f52 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010f40:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <ip4_input_accept+0x50>)
 8010f42:	695b      	ldr	r3, [r3, #20]
 8010f44:	6879      	ldr	r1, [r7, #4]
 8010f46:	4618      	mov	r0, r3
 8010f48:	f000 fa24 	bl	8011394 <ip4_addr_isbroadcast_u32>
 8010f4c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d001      	beq.n	8010f56 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010f52:	2301      	movs	r3, #1
 8010f54:	e000      	b.n	8010f58 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3708      	adds	r7, #8
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}
 8010f60:	20003c10 	.word	0x20003c10

08010f64 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b088      	sub	sp, #32
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8010f6e:	2301      	movs	r3, #1
 8010f70:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	781b      	ldrb	r3, [r3, #0]
 8010f7c:	091b      	lsrs	r3, r3, #4
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	2b04      	cmp	r3, #4
 8010f82:	d004      	beq.n	8010f8e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7f5 ff21 	bl	8006dcc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e121      	b.n	80111d2 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	f003 030f 	and.w	r3, r3, #15
 8010f96:	b2db      	uxtb	r3, r3
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	885b      	ldrh	r3, [r3, #2]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7f4 fc39 	bl	800581c <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	891b      	ldrh	r3, [r3, #8]
 8010fb2:	8a3a      	ldrh	r2, [r7, #16]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d204      	bcs.n	8010fc2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8010fb8:	8a3b      	ldrh	r3, [r7, #16]
 8010fba:	4619      	mov	r1, r3
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f7f5 fd7f 	bl	8006ac0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	895b      	ldrh	r3, [r3, #10]
 8010fc6:	8a7a      	ldrh	r2, [r7, #18]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d807      	bhi.n	8010fdc <ip4_input+0x78>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	891b      	ldrh	r3, [r3, #8]
 8010fd0:	8a3a      	ldrh	r2, [r7, #16]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d802      	bhi.n	8010fdc <ip4_input+0x78>
 8010fd6:	8a7b      	ldrh	r3, [r7, #18]
 8010fd8:	2b13      	cmp	r3, #19
 8010fda:	d804      	bhi.n	8010fe6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7f5 fef5 	bl	8006dcc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e0f5      	b.n	80111d2 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010fe6:	69fb      	ldr	r3, [r7, #28]
 8010fe8:	691b      	ldr	r3, [r3, #16]
 8010fea:	4a7c      	ldr	r2, [pc, #496]	; (80111dc <ip4_input+0x278>)
 8010fec:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	4a7a      	ldr	r2, [pc, #488]	; (80111dc <ip4_input+0x278>)
 8010ff4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010ff6:	4b79      	ldr	r3, [pc, #484]	; (80111dc <ip4_input+0x278>)
 8010ff8:	695b      	ldr	r3, [r3, #20]
 8010ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ffe:	2be0      	cmp	r3, #224	; 0xe0
 8011000:	d112      	bne.n	8011028 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011008:	f003 0301 	and.w	r3, r3, #1
 801100c:	b2db      	uxtb	r3, r3
 801100e:	2b00      	cmp	r3, #0
 8011010:	d007      	beq.n	8011022 <ip4_input+0xbe>
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	3304      	adds	r3, #4
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d002      	beq.n	8011022 <ip4_input+0xbe>
      netif = inp;
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	61bb      	str	r3, [r7, #24]
 8011020:	e02a      	b.n	8011078 <ip4_input+0x114>
    } else {
      netif = NULL;
 8011022:	2300      	movs	r3, #0
 8011024:	61bb      	str	r3, [r7, #24]
 8011026:	e027      	b.n	8011078 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011028:	6838      	ldr	r0, [r7, #0]
 801102a:	f7ff ff71 	bl	8010f10 <ip4_input_accept>
 801102e:	4603      	mov	r3, r0
 8011030:	2b00      	cmp	r3, #0
 8011032:	d002      	beq.n	801103a <ip4_input+0xd6>
      netif = inp;
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	61bb      	str	r3, [r7, #24]
 8011038:	e01e      	b.n	8011078 <ip4_input+0x114>
    } else {
      netif = NULL;
 801103a:	2300      	movs	r3, #0
 801103c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801103e:	4b67      	ldr	r3, [pc, #412]	; (80111dc <ip4_input+0x278>)
 8011040:	695b      	ldr	r3, [r3, #20]
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b7f      	cmp	r3, #127	; 0x7f
 8011046:	d017      	beq.n	8011078 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011048:	4b65      	ldr	r3, [pc, #404]	; (80111e0 <ip4_input+0x27c>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	61bb      	str	r3, [r7, #24]
 801104e:	e00e      	b.n	801106e <ip4_input+0x10a>
          if (netif == inp) {
 8011050:	69ba      	ldr	r2, [r7, #24]
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	429a      	cmp	r2, r3
 8011056:	d006      	beq.n	8011066 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011058:	69b8      	ldr	r0, [r7, #24]
 801105a:	f7ff ff59 	bl	8010f10 <ip4_input_accept>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d108      	bne.n	8011076 <ip4_input+0x112>
 8011064:	e000      	b.n	8011068 <ip4_input+0x104>
            continue;
 8011066:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	61bb      	str	r3, [r7, #24]
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1ed      	bne.n	8011050 <ip4_input+0xec>
 8011074:	e000      	b.n	8011078 <ip4_input+0x114>
            break;
 8011076:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011078:	69bb      	ldr	r3, [r7, #24]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d111      	bne.n	80110a2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	7a5b      	ldrb	r3, [r3, #9]
 8011082:	2b11      	cmp	r3, #17
 8011084:	d10d      	bne.n	80110a2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011086:	8a7b      	ldrh	r3, [r7, #18]
 8011088:	69fa      	ldr	r2, [r7, #28]
 801108a:	4413      	add	r3, r2
 801108c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	885b      	ldrh	r3, [r3, #2]
 8011092:	b29b      	uxth	r3, r3
 8011094:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011098:	d103      	bne.n	80110a2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801109e:	2300      	movs	r3, #0
 80110a0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d017      	beq.n	80110d8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80110a8:	4b4c      	ldr	r3, [pc, #304]	; (80111dc <ip4_input+0x278>)
 80110aa:	691b      	ldr	r3, [r3, #16]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d013      	beq.n	80110d8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80110b0:	4b4a      	ldr	r3, [pc, #296]	; (80111dc <ip4_input+0x278>)
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	4618      	mov	r0, r3
 80110b8:	f000 f96c 	bl	8011394 <ip4_addr_isbroadcast_u32>
 80110bc:	4603      	mov	r3, r0
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d105      	bne.n	80110ce <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80110c2:	4b46      	ldr	r3, [pc, #280]	; (80111dc <ip4_input+0x278>)
 80110c4:	691b      	ldr	r3, [r3, #16]
 80110c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80110ca:	2be0      	cmp	r3, #224	; 0xe0
 80110cc:	d104      	bne.n	80110d8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7f5 fe7c 	bl	8006dcc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80110d4:	2300      	movs	r3, #0
 80110d6:	e07c      	b.n	80111d2 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d104      	bne.n	80110e8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7f5 fe74 	bl	8006dcc <pbuf_free>
    return ERR_OK;
 80110e4:	2300      	movs	r3, #0
 80110e6:	e074      	b.n	80111d2 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	88db      	ldrh	r3, [r3, #6]
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	461a      	mov	r2, r3
 80110f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80110f4:	4013      	ands	r3, r2
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d00b      	beq.n	8011112 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 fc90 	bl	8011a20 <ip4_reass>
 8011100:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d101      	bne.n	801110c <ip4_input+0x1a8>
      return ERR_OK;
 8011108:	2300      	movs	r3, #0
 801110a:	e062      	b.n	80111d2 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011112:	4a32      	ldr	r2, [pc, #200]	; (80111dc <ip4_input+0x278>)
 8011114:	69bb      	ldr	r3, [r7, #24]
 8011116:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011118:	4a30      	ldr	r2, [pc, #192]	; (80111dc <ip4_input+0x278>)
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801111e:	4a2f      	ldr	r2, [pc, #188]	; (80111dc <ip4_input+0x278>)
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	f003 030f 	and.w	r3, r3, #15
 801112c:	b2db      	uxtb	r3, r3
 801112e:	009b      	lsls	r3, r3, #2
 8011130:	b2db      	uxtb	r3, r3
 8011132:	b29a      	uxth	r2, r3
 8011134:	4b29      	ldr	r3, [pc, #164]	; (80111dc <ip4_input+0x278>)
 8011136:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011138:	8a7b      	ldrh	r3, [r7, #18]
 801113a:	4619      	mov	r1, r3
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7f5 fdbf 	bl	8006cc0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	7a5b      	ldrb	r3, [r3, #9]
 8011146:	2b06      	cmp	r3, #6
 8011148:	d009      	beq.n	801115e <ip4_input+0x1fa>
 801114a:	2b11      	cmp	r3, #17
 801114c:	d002      	beq.n	8011154 <ip4_input+0x1f0>
 801114e:	2b01      	cmp	r3, #1
 8011150:	d00a      	beq.n	8011168 <ip4_input+0x204>
 8011152:	e00e      	b.n	8011172 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011154:	6839      	ldr	r1, [r7, #0]
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f7fc fb28 	bl	800d7ac <udp_input>
        break;
 801115c:	e026      	b.n	80111ac <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801115e:	6839      	ldr	r1, [r7, #0]
 8011160:	6878      	ldr	r0, [r7, #4]
 8011162:	f7f7 ff05 	bl	8008f70 <tcp_input>
        break;
 8011166:	e021      	b.n	80111ac <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011168:	6839      	ldr	r1, [r7, #0]
 801116a:	6878      	ldr	r0, [r7, #4]
 801116c:	f7ff fcd2 	bl	8010b14 <icmp_input>
        break;
 8011170:	e01c      	b.n	80111ac <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011172:	4b1a      	ldr	r3, [pc, #104]	; (80111dc <ip4_input+0x278>)
 8011174:	695b      	ldr	r3, [r3, #20]
 8011176:	69b9      	ldr	r1, [r7, #24]
 8011178:	4618      	mov	r0, r3
 801117a:	f000 f90b 	bl	8011394 <ip4_addr_isbroadcast_u32>
 801117e:	4603      	mov	r3, r0
 8011180:	2b00      	cmp	r3, #0
 8011182:	d10f      	bne.n	80111a4 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011184:	4b15      	ldr	r3, [pc, #84]	; (80111dc <ip4_input+0x278>)
 8011186:	695b      	ldr	r3, [r3, #20]
 8011188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801118c:	2be0      	cmp	r3, #224	; 0xe0
 801118e:	d009      	beq.n	80111a4 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011190:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f7f5 fe05 	bl	8006da6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801119c:	2102      	movs	r1, #2
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7ff fdbc 	bl	8010d1c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f7f5 fe11 	bl	8006dcc <pbuf_free>
        break;
 80111aa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80111ac:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <ip4_input+0x278>)
 80111ae:	2200      	movs	r2, #0
 80111b0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80111b2:	4b0a      	ldr	r3, [pc, #40]	; (80111dc <ip4_input+0x278>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80111b8:	4b08      	ldr	r3, [pc, #32]	; (80111dc <ip4_input+0x278>)
 80111ba:	2200      	movs	r2, #0
 80111bc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80111be:	4b07      	ldr	r3, [pc, #28]	; (80111dc <ip4_input+0x278>)
 80111c0:	2200      	movs	r2, #0
 80111c2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80111c4:	4b05      	ldr	r3, [pc, #20]	; (80111dc <ip4_input+0x278>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80111ca:	4b04      	ldr	r3, [pc, #16]	; (80111dc <ip4_input+0x278>)
 80111cc:	2200      	movs	r2, #0
 80111ce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3720      	adds	r7, #32
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}
 80111da:	bf00      	nop
 80111dc:	20003c10 	.word	0x20003c10
 80111e0:	20007164 	.word	0x20007164

080111e4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b08a      	sub	sp, #40	; 0x28
 80111e8:	af04      	add	r7, sp, #16
 80111ea:	60f8      	str	r0, [r7, #12]
 80111ec:	60b9      	str	r1, [r7, #8]
 80111ee:	607a      	str	r2, [r7, #4]
 80111f0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d009      	beq.n	8011210 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d003      	beq.n	801120a <ip4_output_if+0x26>
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d102      	bne.n	8011210 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120c:	3304      	adds	r3, #4
 801120e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011210:	78fa      	ldrb	r2, [r7, #3]
 8011212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011214:	9302      	str	r3, [sp, #8]
 8011216:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801121a:	9301      	str	r3, [sp, #4]
 801121c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	4613      	mov	r3, r2
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	6979      	ldr	r1, [r7, #20]
 8011228:	68f8      	ldr	r0, [r7, #12]
 801122a:	f000 f805 	bl	8011238 <ip4_output_if_src>
 801122e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011230:	4618      	mov	r0, r3
 8011232:	3718      	adds	r7, #24
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b088      	sub	sp, #32
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	607a      	str	r2, [r7, #4]
 8011244:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	7b9b      	ldrb	r3, [r3, #14]
 801124a:	2b01      	cmp	r3, #1
 801124c:	d006      	beq.n	801125c <ip4_output_if_src+0x24>
 801124e:	4b4b      	ldr	r3, [pc, #300]	; (801137c <ip4_output_if_src+0x144>)
 8011250:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011254:	494a      	ldr	r1, [pc, #296]	; (8011380 <ip4_output_if_src+0x148>)
 8011256:	484b      	ldr	r0, [pc, #300]	; (8011384 <ip4_output_if_src+0x14c>)
 8011258:	f001 f82e 	bl	80122b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d060      	beq.n	8011324 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011262:	2314      	movs	r3, #20
 8011264:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011266:	2114      	movs	r1, #20
 8011268:	68f8      	ldr	r0, [r7, #12]
 801126a:	f7f5 fd19 	bl	8006ca0 <pbuf_add_header>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011274:	f06f 0301 	mvn.w	r3, #1
 8011278:	e07c      	b.n	8011374 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	895b      	ldrh	r3, [r3, #10]
 8011284:	2b13      	cmp	r3, #19
 8011286:	d806      	bhi.n	8011296 <ip4_output_if_src+0x5e>
 8011288:	4b3c      	ldr	r3, [pc, #240]	; (801137c <ip4_output_if_src+0x144>)
 801128a:	f240 3289 	movw	r2, #905	; 0x389
 801128e:	493e      	ldr	r1, [pc, #248]	; (8011388 <ip4_output_if_src+0x150>)
 8011290:	483c      	ldr	r0, [pc, #240]	; (8011384 <ip4_output_if_src+0x14c>)
 8011292:	f001 f811 	bl	80122b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	78fa      	ldrb	r2, [r7, #3]
 801129a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80112a2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	69fb      	ldr	r3, [r7, #28]
 80112aa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80112ac:	8b7b      	ldrh	r3, [r7, #26]
 80112ae:	089b      	lsrs	r3, r3, #2
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	69fb      	ldr	r3, [r7, #28]
 80112bc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80112be:	69fb      	ldr	r3, [r7, #28]
 80112c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80112c4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	891b      	ldrh	r3, [r3, #8]
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7f4 faa6 	bl	800581c <lwip_htons>
 80112d0:	4603      	mov	r3, r0
 80112d2:	461a      	mov	r2, r3
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	2200      	movs	r2, #0
 80112dc:	719a      	strb	r2, [r3, #6]
 80112de:	2200      	movs	r2, #0
 80112e0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80112e2:	4b2a      	ldr	r3, [pc, #168]	; (801138c <ip4_output_if_src+0x154>)
 80112e4:	881b      	ldrh	r3, [r3, #0]
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7f4 fa98 	bl	800581c <lwip_htons>
 80112ec:	4603      	mov	r3, r0
 80112ee:	461a      	mov	r2, r3
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80112f4:	4b25      	ldr	r3, [pc, #148]	; (801138c <ip4_output_if_src+0x154>)
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	3301      	adds	r3, #1
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	4b23      	ldr	r3, [pc, #140]	; (801138c <ip4_output_if_src+0x154>)
 80112fe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011300:	68bb      	ldr	r3, [r7, #8]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d104      	bne.n	8011310 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011306:	4b22      	ldr	r3, [pc, #136]	; (8011390 <ip4_output_if_src+0x158>)
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	60da      	str	r2, [r3, #12]
 801130e:	e003      	b.n	8011318 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	681a      	ldr	r2, [r3, #0]
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	2200      	movs	r2, #0
 801131c:	729a      	strb	r2, [r3, #10]
 801131e:	2200      	movs	r2, #0
 8011320:	72da      	strb	r2, [r3, #11]
 8011322:	e00f      	b.n	8011344 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	895b      	ldrh	r3, [r3, #10]
 8011328:	2b13      	cmp	r3, #19
 801132a:	d802      	bhi.n	8011332 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801132c:	f06f 0301 	mvn.w	r3, #1
 8011330:	e020      	b.n	8011374 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801133e:	f107 0314 	add.w	r3, r7, #20
 8011342:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011346:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00c      	beq.n	8011366 <ip4_output_if_src+0x12e>
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	891a      	ldrh	r2, [r3, #8]
 8011350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011352:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011354:	429a      	cmp	r2, r3
 8011356:	d906      	bls.n	8011366 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801135c:	68f8      	ldr	r0, [r7, #12]
 801135e:	f000 fd4b 	bl	8011df8 <ip4_frag>
 8011362:	4603      	mov	r3, r0
 8011364:	e006      	b.n	8011374 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	695b      	ldr	r3, [r3, #20]
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	68f9      	ldr	r1, [r7, #12]
 801136e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011370:	4798      	blx	r3
 8011372:	4603      	mov	r3, r0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3720      	adds	r7, #32
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	08015d9c 	.word	0x08015d9c
 8011380:	08015dd0 	.word	0x08015dd0
 8011384:	08015ddc 	.word	0x08015ddc
 8011388:	08015e04 	.word	0x08015e04
 801138c:	2000064e 	.word	0x2000064e
 8011390:	0801e08c 	.word	0x0801e08c

08011394 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113a8:	d002      	beq.n	80113b0 <ip4_addr_isbroadcast_u32+0x1c>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d101      	bne.n	80113b4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80113b0:	2301      	movs	r3, #1
 80113b2:	e02a      	b.n	801140a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80113ba:	f003 0302 	and.w	r3, r3, #2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d101      	bne.n	80113c6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	e021      	b.n	801140a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	3304      	adds	r3, #4
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d101      	bne.n	80113d6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e019      	b.n	801140a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80113d6:	68fa      	ldr	r2, [r7, #12]
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	3304      	adds	r3, #4
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	405a      	eors	r2, r3
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	3308      	adds	r3, #8
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	4013      	ands	r3, r2
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d10d      	bne.n	8011408 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	3308      	adds	r3, #8
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	43da      	mvns	r2, r3
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	3308      	adds	r3, #8
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011400:	429a      	cmp	r2, r3
 8011402:	d101      	bne.n	8011408 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011408:	2300      	movs	r3, #0
  }
}
 801140a:	4618      	mov	r0, r3
 801140c:	3714      	adds	r7, #20
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
	...

08011418 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801141e:	2300      	movs	r3, #0
 8011420:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011422:	4b12      	ldr	r3, [pc, #72]	; (801146c <ip_reass_tmr+0x54>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011428:	e018      	b.n	801145c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	7fdb      	ldrb	r3, [r3, #31]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00b      	beq.n	801144a <ip_reass_tmr+0x32>
      r->timer--;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	7fdb      	ldrb	r3, [r3, #31]
 8011436:	3b01      	subs	r3, #1
 8011438:	b2da      	uxtb	r2, r3
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	60fb      	str	r3, [r7, #12]
 8011448:	e008      	b.n	801145c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011454:	68b9      	ldr	r1, [r7, #8]
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f000 f80a 	bl	8011470 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1e3      	bne.n	801142a <ip_reass_tmr+0x12>
    }
  }
}
 8011462:	bf00      	nop
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	20000650 	.word	0x20000650

08011470 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b088      	sub	sp, #32
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	429a      	cmp	r2, r3
 8011484:	d105      	bne.n	8011492 <ip_reass_free_complete_datagram+0x22>
 8011486:	4b45      	ldr	r3, [pc, #276]	; (801159c <ip_reass_free_complete_datagram+0x12c>)
 8011488:	22ab      	movs	r2, #171	; 0xab
 801148a:	4945      	ldr	r1, [pc, #276]	; (80115a0 <ip_reass_free_complete_datagram+0x130>)
 801148c:	4845      	ldr	r0, [pc, #276]	; (80115a4 <ip_reass_free_complete_datagram+0x134>)
 801148e:	f000 ff13 	bl	80122b8 <iprintf>
  if (prev != NULL) {
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00a      	beq.n	80114ae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	687a      	ldr	r2, [r7, #4]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d005      	beq.n	80114ae <ip_reass_free_complete_datagram+0x3e>
 80114a2:	4b3e      	ldr	r3, [pc, #248]	; (801159c <ip_reass_free_complete_datagram+0x12c>)
 80114a4:	22ad      	movs	r2, #173	; 0xad
 80114a6:	4940      	ldr	r1, [pc, #256]	; (80115a8 <ip_reass_free_complete_datagram+0x138>)
 80114a8:	483e      	ldr	r0, [pc, #248]	; (80115a4 <ip_reass_free_complete_datagram+0x134>)
 80114aa:	f000 ff05 	bl	80122b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	889b      	ldrh	r3, [r3, #4]
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d12a      	bne.n	8011516 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	681a      	ldr	r2, [r3, #0]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	6858      	ldr	r0, [r3, #4]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	3308      	adds	r3, #8
 80114d6:	2214      	movs	r2, #20
 80114d8:	4619      	mov	r1, r3
 80114da:	f000 feda 	bl	8012292 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80114de:	2101      	movs	r1, #1
 80114e0:	69b8      	ldr	r0, [r7, #24]
 80114e2:	f7ff fc2b 	bl	8010d3c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80114e6:	69b8      	ldr	r0, [r7, #24]
 80114e8:	f7f5 fcf8 	bl	8006edc <pbuf_clen>
 80114ec:	4603      	mov	r3, r0
 80114ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80114f0:	8bfa      	ldrh	r2, [r7, #30]
 80114f2:	8a7b      	ldrh	r3, [r7, #18]
 80114f4:	4413      	add	r3, r2
 80114f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114fa:	db05      	blt.n	8011508 <ip_reass_free_complete_datagram+0x98>
 80114fc:	4b27      	ldr	r3, [pc, #156]	; (801159c <ip_reass_free_complete_datagram+0x12c>)
 80114fe:	22bc      	movs	r2, #188	; 0xbc
 8011500:	492a      	ldr	r1, [pc, #168]	; (80115ac <ip_reass_free_complete_datagram+0x13c>)
 8011502:	4828      	ldr	r0, [pc, #160]	; (80115a4 <ip_reass_free_complete_datagram+0x134>)
 8011504:	f000 fed8 	bl	80122b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011508:	8bfa      	ldrh	r2, [r7, #30]
 801150a:	8a7b      	ldrh	r3, [r7, #18]
 801150c:	4413      	add	r3, r2
 801150e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011510:	69b8      	ldr	r0, [r7, #24]
 8011512:	f7f5 fc5b 	bl	8006dcc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801151c:	e01f      	b.n	801155e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011524:	69bb      	ldr	r3, [r7, #24]
 8011526:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f7f5 fcd4 	bl	8006edc <pbuf_clen>
 8011534:	4603      	mov	r3, r0
 8011536:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011538:	8bfa      	ldrh	r2, [r7, #30]
 801153a:	8a7b      	ldrh	r3, [r7, #18]
 801153c:	4413      	add	r3, r2
 801153e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011542:	db05      	blt.n	8011550 <ip_reass_free_complete_datagram+0xe0>
 8011544:	4b15      	ldr	r3, [pc, #84]	; (801159c <ip_reass_free_complete_datagram+0x12c>)
 8011546:	22cc      	movs	r2, #204	; 0xcc
 8011548:	4918      	ldr	r1, [pc, #96]	; (80115ac <ip_reass_free_complete_datagram+0x13c>)
 801154a:	4816      	ldr	r0, [pc, #88]	; (80115a4 <ip_reass_free_complete_datagram+0x134>)
 801154c:	f000 feb4 	bl	80122b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011550:	8bfa      	ldrh	r2, [r7, #30]
 8011552:	8a7b      	ldrh	r3, [r7, #18]
 8011554:	4413      	add	r3, r2
 8011556:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7f5 fc37 	bl	8006dcc <pbuf_free>
  while (p != NULL) {
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d1dc      	bne.n	801151e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011564:	6839      	ldr	r1, [r7, #0]
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f8c2 	bl	80116f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801156c:	4b10      	ldr	r3, [pc, #64]	; (80115b0 <ip_reass_free_complete_datagram+0x140>)
 801156e:	881b      	ldrh	r3, [r3, #0]
 8011570:	8bfa      	ldrh	r2, [r7, #30]
 8011572:	429a      	cmp	r2, r3
 8011574:	d905      	bls.n	8011582 <ip_reass_free_complete_datagram+0x112>
 8011576:	4b09      	ldr	r3, [pc, #36]	; (801159c <ip_reass_free_complete_datagram+0x12c>)
 8011578:	22d2      	movs	r2, #210	; 0xd2
 801157a:	490e      	ldr	r1, [pc, #56]	; (80115b4 <ip_reass_free_complete_datagram+0x144>)
 801157c:	4809      	ldr	r0, [pc, #36]	; (80115a4 <ip_reass_free_complete_datagram+0x134>)
 801157e:	f000 fe9b 	bl	80122b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011582:	4b0b      	ldr	r3, [pc, #44]	; (80115b0 <ip_reass_free_complete_datagram+0x140>)
 8011584:	881a      	ldrh	r2, [r3, #0]
 8011586:	8bfb      	ldrh	r3, [r7, #30]
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	b29a      	uxth	r2, r3
 801158c:	4b08      	ldr	r3, [pc, #32]	; (80115b0 <ip_reass_free_complete_datagram+0x140>)
 801158e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011590:	8bfb      	ldrh	r3, [r7, #30]
}
 8011592:	4618      	mov	r0, r3
 8011594:	3720      	adds	r7, #32
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	08015e34 	.word	0x08015e34
 80115a0:	08015e70 	.word	0x08015e70
 80115a4:	08015e7c 	.word	0x08015e7c
 80115a8:	08015ea4 	.word	0x08015ea4
 80115ac:	08015eb8 	.word	0x08015eb8
 80115b0:	20000654 	.word	0x20000654
 80115b4:	08015ed8 	.word	0x08015ed8

080115b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08a      	sub	sp, #40	; 0x28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
 80115c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80115c2:	2300      	movs	r3, #0
 80115c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80115c6:	2300      	movs	r3, #0
 80115c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80115ca:	2300      	movs	r3, #0
 80115cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80115ce:	2300      	movs	r3, #0
 80115d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80115d2:	2300      	movs	r3, #0
 80115d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80115d6:	4b28      	ldr	r3, [pc, #160]	; (8011678 <ip_reass_remove_oldest_datagram+0xc0>)
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80115dc:	e030      	b.n	8011640 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	695a      	ldr	r2, [r3, #20]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	429a      	cmp	r2, r3
 80115e8:	d10c      	bne.n	8011604 <ip_reass_remove_oldest_datagram+0x4c>
 80115ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ec:	699a      	ldr	r2, [r3, #24]
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d106      	bne.n	8011604 <ip_reass_remove_oldest_datagram+0x4c>
 80115f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f8:	899a      	ldrh	r2, [r3, #12]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	889b      	ldrh	r3, [r3, #4]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	429a      	cmp	r2, r3
 8011602:	d014      	beq.n	801162e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	3301      	adds	r3, #1
 8011608:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d104      	bne.n	801161a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011612:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	61bb      	str	r3, [r7, #24]
 8011618:	e009      	b.n	801162e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801161c:	7fda      	ldrb	r2, [r3, #31]
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	7fdb      	ldrb	r3, [r3, #31]
 8011622:	429a      	cmp	r2, r3
 8011624:	d803      	bhi.n	801162e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011628:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d001      	beq.n	801163a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011638:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011642:	2b00      	cmp	r3, #0
 8011644:	d1cb      	bne.n	80115de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011646:	6a3b      	ldr	r3, [r7, #32]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d008      	beq.n	801165e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801164c:	69b9      	ldr	r1, [r7, #24]
 801164e:	6a38      	ldr	r0, [r7, #32]
 8011650:	f7ff ff0e 	bl	8011470 <ip_reass_free_complete_datagram>
 8011654:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011656:	697a      	ldr	r2, [r7, #20]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	4413      	add	r3, r2
 801165c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801165e:	697a      	ldr	r2, [r7, #20]
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	da02      	bge.n	801166c <ip_reass_remove_oldest_datagram+0xb4>
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	2b01      	cmp	r3, #1
 801166a:	dcac      	bgt.n	80115c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801166c:	697b      	ldr	r3, [r7, #20]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3728      	adds	r7, #40	; 0x28
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	20000650 	.word	0x20000650

0801167c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011686:	2004      	movs	r0, #4
 8011688:	f7f4 fd54 	bl	8006134 <memp_malloc>
 801168c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d110      	bne.n	80116b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011694:	6839      	ldr	r1, [r7, #0]
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff ff8e 	bl	80115b8 <ip_reass_remove_oldest_datagram>
 801169c:	4602      	mov	r2, r0
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	4293      	cmp	r3, r2
 80116a2:	dc03      	bgt.n	80116ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80116a4:	2004      	movs	r0, #4
 80116a6:	f7f4 fd45 	bl	8006134 <memp_malloc>
 80116aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d101      	bne.n	80116b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	e016      	b.n	80116e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80116b6:	2220      	movs	r2, #32
 80116b8:	2100      	movs	r1, #0
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f000 fdf4 	bl	80122a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	220f      	movs	r2, #15
 80116c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80116c6:	4b09      	ldr	r3, [pc, #36]	; (80116ec <ip_reass_enqueue_new_datagram+0x70>)
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80116ce:	4a07      	ldr	r2, [pc, #28]	; (80116ec <ip_reass_enqueue_new_datagram+0x70>)
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	3308      	adds	r3, #8
 80116d8:	2214      	movs	r2, #20
 80116da:	6879      	ldr	r1, [r7, #4]
 80116dc:	4618      	mov	r0, r3
 80116de:	f000 fdd8 	bl	8012292 <memcpy>
  return ipr;
 80116e2:	68fb      	ldr	r3, [r7, #12]
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3710      	adds	r7, #16
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	20000650 	.word	0x20000650

080116f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80116fa:	4b10      	ldr	r3, [pc, #64]	; (801173c <ip_reass_dequeue_datagram+0x4c>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	687a      	ldr	r2, [r7, #4]
 8011700:	429a      	cmp	r2, r3
 8011702:	d104      	bne.n	801170e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4a0c      	ldr	r2, [pc, #48]	; (801173c <ip_reass_dequeue_datagram+0x4c>)
 801170a:	6013      	str	r3, [r2, #0]
 801170c:	e00d      	b.n	801172a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d106      	bne.n	8011722 <ip_reass_dequeue_datagram+0x32>
 8011714:	4b0a      	ldr	r3, [pc, #40]	; (8011740 <ip_reass_dequeue_datagram+0x50>)
 8011716:	f240 1245 	movw	r2, #325	; 0x145
 801171a:	490a      	ldr	r1, [pc, #40]	; (8011744 <ip_reass_dequeue_datagram+0x54>)
 801171c:	480a      	ldr	r0, [pc, #40]	; (8011748 <ip_reass_dequeue_datagram+0x58>)
 801171e:	f000 fdcb 	bl	80122b8 <iprintf>
    prev->next = ipr->next;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801172a:	6879      	ldr	r1, [r7, #4]
 801172c:	2004      	movs	r0, #4
 801172e:	f7f4 fd4d 	bl	80061cc <memp_free>
}
 8011732:	bf00      	nop
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	20000650 	.word	0x20000650
 8011740:	08015e34 	.word	0x08015e34
 8011744:	08015efc 	.word	0x08015efc
 8011748:	08015e7c 	.word	0x08015e7c

0801174c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08c      	sub	sp, #48	; 0x30
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011758:	2300      	movs	r3, #0
 801175a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801175c:	2301      	movs	r3, #1
 801175e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	885b      	ldrh	r3, [r3, #2]
 801176a:	b29b      	uxth	r3, r3
 801176c:	4618      	mov	r0, r3
 801176e:	f7f4 f855 	bl	800581c <lwip_htons>
 8011772:	4603      	mov	r3, r0
 8011774:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	f003 030f 	and.w	r3, r3, #15
 801177e:	b2db      	uxtb	r3, r3
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011784:	7e7b      	ldrb	r3, [r7, #25]
 8011786:	b29b      	uxth	r3, r3
 8011788:	8b7a      	ldrh	r2, [r7, #26]
 801178a:	429a      	cmp	r2, r3
 801178c:	d202      	bcs.n	8011794 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801178e:	f04f 33ff 	mov.w	r3, #4294967295
 8011792:	e135      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011794:	7e7b      	ldrb	r3, [r7, #25]
 8011796:	b29b      	uxth	r3, r3
 8011798:	8b7a      	ldrh	r2, [r7, #26]
 801179a:	1ad3      	subs	r3, r2, r3
 801179c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	88db      	ldrh	r3, [r3, #6]
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7f4 f839 	bl	800581c <lwip_htons>
 80117aa:	4603      	mov	r3, r0
 80117ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	00db      	lsls	r3, r3, #3
 80117b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80117bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117be:	2200      	movs	r2, #0
 80117c0:	701a      	strb	r2, [r3, #0]
 80117c2:	2200      	movs	r2, #0
 80117c4:	705a      	strb	r2, [r3, #1]
 80117c6:	2200      	movs	r2, #0
 80117c8:	709a      	strb	r2, [r3, #2]
 80117ca:	2200      	movs	r2, #0
 80117cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80117ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d0:	8afa      	ldrh	r2, [r7, #22]
 80117d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80117d4:	8afa      	ldrh	r2, [r7, #22]
 80117d6:	8b7b      	ldrh	r3, [r7, #26]
 80117d8:	4413      	add	r3, r2
 80117da:	b29a      	uxth	r2, r3
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80117e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e2:	88db      	ldrh	r3, [r3, #6]
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	8afa      	ldrh	r2, [r7, #22]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d902      	bls.n	80117f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80117ec:	f04f 33ff 	mov.w	r3, #4294967295
 80117f0:	e106      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	627b      	str	r3, [r7, #36]	; 0x24
 80117f8:	e068      	b.n	80118cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80117fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011802:	889b      	ldrh	r3, [r3, #4]
 8011804:	b29a      	uxth	r2, r3
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	889b      	ldrh	r3, [r3, #4]
 801180a:	b29b      	uxth	r3, r3
 801180c:	429a      	cmp	r2, r3
 801180e:	d235      	bcs.n	801187c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011814:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011818:	2b00      	cmp	r3, #0
 801181a:	d020      	beq.n	801185e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181e:	889b      	ldrh	r3, [r3, #4]
 8011820:	b29a      	uxth	r2, r3
 8011822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011824:	88db      	ldrh	r3, [r3, #6]
 8011826:	b29b      	uxth	r3, r3
 8011828:	429a      	cmp	r2, r3
 801182a:	d307      	bcc.n	801183c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801182c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182e:	88db      	ldrh	r3, [r3, #6]
 8011830:	b29a      	uxth	r2, r3
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	889b      	ldrh	r3, [r3, #4]
 8011836:	b29b      	uxth	r3, r3
 8011838:	429a      	cmp	r2, r3
 801183a:	d902      	bls.n	8011842 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801183c:	f04f 33ff 	mov.w	r3, #4294967295
 8011840:	e0de      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011844:	68ba      	ldr	r2, [r7, #8]
 8011846:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184a:	88db      	ldrh	r3, [r3, #6]
 801184c:	b29a      	uxth	r2, r3
 801184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011850:	889b      	ldrh	r3, [r3, #4]
 8011852:	b29b      	uxth	r3, r3
 8011854:	429a      	cmp	r2, r3
 8011856:	d03d      	beq.n	80118d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011858:	2300      	movs	r3, #0
 801185a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801185c:	e03a      	b.n	80118d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011860:	88db      	ldrh	r3, [r3, #6]
 8011862:	b29a      	uxth	r2, r3
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	889b      	ldrh	r3, [r3, #4]
 8011868:	b29b      	uxth	r3, r3
 801186a:	429a      	cmp	r2, r3
 801186c:	d902      	bls.n	8011874 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801186e:	f04f 33ff 	mov.w	r3, #4294967295
 8011872:	e0c5      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	605a      	str	r2, [r3, #4]
      break;
 801187a:	e02b      	b.n	80118d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187e:	889b      	ldrh	r3, [r3, #4]
 8011880:	b29a      	uxth	r2, r3
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	889b      	ldrh	r3, [r3, #4]
 8011886:	b29b      	uxth	r3, r3
 8011888:	429a      	cmp	r2, r3
 801188a:	d102      	bne.n	8011892 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801188c:	f04f 33ff 	mov.w	r3, #4294967295
 8011890:	e0b6      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011894:	889b      	ldrh	r3, [r3, #4]
 8011896:	b29a      	uxth	r2, r3
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	88db      	ldrh	r3, [r3, #6]
 801189c:	b29b      	uxth	r3, r3
 801189e:	429a      	cmp	r2, r3
 80118a0:	d202      	bcs.n	80118a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118a2:	f04f 33ff 	mov.w	r3, #4294967295
 80118a6:	e0ab      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80118a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d009      	beq.n	80118c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80118ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b0:	88db      	ldrh	r3, [r3, #6]
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	889b      	ldrh	r3, [r3, #4]
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d001      	beq.n	80118c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80118be:	2300      	movs	r3, #0
 80118c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80118c2:	693b      	ldr	r3, [r7, #16]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80118cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d193      	bne.n	80117fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80118d2:	e000      	b.n	80118d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80118d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80118d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d12d      	bne.n	8011938 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80118dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d01c      	beq.n	801191c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80118e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e4:	88db      	ldrh	r3, [r3, #6]
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ea:	889b      	ldrh	r3, [r3, #4]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d906      	bls.n	8011900 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80118f2:	4b45      	ldr	r3, [pc, #276]	; (8011a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80118f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80118f8:	4944      	ldr	r1, [pc, #272]	; (8011a0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80118fa:	4845      	ldr	r0, [pc, #276]	; (8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80118fc:	f000 fcdc 	bl	80122b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011902:	68ba      	ldr	r2, [r7, #8]
 8011904:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011908:	88db      	ldrh	r3, [r3, #6]
 801190a:	b29a      	uxth	r2, r3
 801190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190e:	889b      	ldrh	r3, [r3, #4]
 8011910:	b29b      	uxth	r3, r3
 8011912:	429a      	cmp	r2, r3
 8011914:	d010      	beq.n	8011938 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	623b      	str	r3, [r7, #32]
 801191a:	e00d      	b.n	8011938 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d006      	beq.n	8011932 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011924:	4b38      	ldr	r3, [pc, #224]	; (8011a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011926:	f240 12bf 	movw	r2, #447	; 0x1bf
 801192a:	493a      	ldr	r1, [pc, #232]	; (8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801192c:	4838      	ldr	r0, [pc, #224]	; (8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801192e:	f000 fcc3 	bl	80122b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	68ba      	ldr	r2, [r7, #8]
 8011936:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d105      	bne.n	801194a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	7f9b      	ldrb	r3, [r3, #30]
 8011942:	f003 0301 	and.w	r3, r3, #1
 8011946:	2b00      	cmp	r3, #0
 8011948:	d059      	beq.n	80119fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801194a:	6a3b      	ldr	r3, [r7, #32]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d04f      	beq.n	80119f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d006      	beq.n	8011966 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	889b      	ldrh	r3, [r3, #4]
 8011960:	b29b      	uxth	r3, r3
 8011962:	2b00      	cmp	r3, #0
 8011964:	d002      	beq.n	801196c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011966:	2300      	movs	r3, #0
 8011968:	623b      	str	r3, [r7, #32]
 801196a:	e041      	b.n	80119f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011976:	e012      	b.n	801199e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011980:	88db      	ldrh	r3, [r3, #6]
 8011982:	b29a      	uxth	r2, r3
 8011984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011986:	889b      	ldrh	r3, [r3, #4]
 8011988:	b29b      	uxth	r3, r3
 801198a:	429a      	cmp	r2, r3
 801198c:	d002      	beq.n	8011994 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	623b      	str	r3, [r7, #32]
            break;
 8011992:	e007      	b.n	80119a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011996:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1e9      	bne.n	8011978 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80119a4:	6a3b      	ldr	r3, [r7, #32]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d022      	beq.n	80119f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d106      	bne.n	80119c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80119b2:	4b15      	ldr	r3, [pc, #84]	; (8011a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119b4:	f240 12df 	movw	r2, #479	; 0x1df
 80119b8:	4917      	ldr	r1, [pc, #92]	; (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119ba:	4815      	ldr	r0, [pc, #84]	; (8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119bc:	f000 fc7c 	bl	80122b8 <iprintf>
          LWIP_ASSERT("sanity check",
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d106      	bne.n	80119da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80119cc:	4b0e      	ldr	r3, [pc, #56]	; (8011a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80119d2:	4911      	ldr	r1, [pc, #68]	; (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119d4:	480e      	ldr	r0, [pc, #56]	; (8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119d6:	f000 fc6f 	bl	80122b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80119da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d006      	beq.n	80119f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80119e2:	4b09      	ldr	r3, [pc, #36]	; (8011a08 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119e4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80119e8:	490c      	ldr	r1, [pc, #48]	; (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80119ea:	4809      	ldr	r0, [pc, #36]	; (8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119ec:	f000 fc64 	bl	80122b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80119f0:	6a3b      	ldr	r3, [r7, #32]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	bf14      	ite	ne
 80119f6:	2301      	movne	r3, #1
 80119f8:	2300      	moveq	r3, #0
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	e000      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80119fe:	2300      	movs	r3, #0
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3730      	adds	r7, #48	; 0x30
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	08015e34 	.word	0x08015e34
 8011a0c:	08015f18 	.word	0x08015f18
 8011a10:	08015e7c 	.word	0x08015e7c
 8011a14:	08015f38 	.word	0x08015f38
 8011a18:	08015f70 	.word	0x08015f70
 8011a1c:	08015f80 	.word	0x08015f80

08011a20 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08e      	sub	sp, #56	; 0x38
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	f003 030f 	and.w	r3, r3, #15
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b14      	cmp	r3, #20
 8011a3e:	f040 8167 	bne.w	8011d10 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a44:	88db      	ldrh	r3, [r3, #6]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f7f3 fee7 	bl	800581c <lwip_htons>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	00db      	lsls	r3, r3, #3
 8011a58:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a5c:	885b      	ldrh	r3, [r3, #2]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f3 fedb 	bl	800581c <lwip_htons>
 8011a66:	4603      	mov	r3, r0
 8011a68:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	f003 030f 	and.w	r3, r3, #15
 8011a72:	b2db      	uxtb	r3, r3
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a82:	429a      	cmp	r2, r3
 8011a84:	f0c0 8146 	bcc.w	8011d14 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a90:	1ad3      	subs	r3, r2, r3
 8011a92:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f7f5 fa21 	bl	8006edc <pbuf_clen>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011a9e:	4ba3      	ldr	r3, [pc, #652]	; (8011d2c <ip4_reass+0x30c>)
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	461a      	mov	r2, r3
 8011aa4:	8c3b      	ldrh	r3, [r7, #32]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	2b0a      	cmp	r3, #10
 8011aaa:	dd10      	ble.n	8011ace <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011aac:	8c3b      	ldrh	r3, [r7, #32]
 8011aae:	4619      	mov	r1, r3
 8011ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ab2:	f7ff fd81 	bl	80115b8 <ip_reass_remove_oldest_datagram>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 812d 	beq.w	8011d18 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011abe:	4b9b      	ldr	r3, [pc, #620]	; (8011d2c <ip4_reass+0x30c>)
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	461a      	mov	r2, r3
 8011ac4:	8c3b      	ldrh	r3, [r7, #32]
 8011ac6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011ac8:	2b0a      	cmp	r3, #10
 8011aca:	f300 8125 	bgt.w	8011d18 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011ace:	4b98      	ldr	r3, [pc, #608]	; (8011d30 <ip4_reass+0x310>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ad4:	e015      	b.n	8011b02 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	695a      	ldr	r2, [r3, #20]
 8011ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d10c      	bne.n	8011afc <ip4_reass+0xdc>
 8011ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae4:	699a      	ldr	r2, [r3, #24]
 8011ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae8:	691b      	ldr	r3, [r3, #16]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d106      	bne.n	8011afc <ip4_reass+0xdc>
 8011aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011af0:	899a      	ldrh	r2, [r3, #12]
 8011af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af4:	889b      	ldrh	r3, [r3, #4]
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d006      	beq.n	8011b0a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	633b      	str	r3, [r7, #48]	; 0x30
 8011b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d1e6      	bne.n	8011ad6 <ip4_reass+0xb6>
 8011b08:	e000      	b.n	8011b0c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011b0a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d109      	bne.n	8011b26 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011b12:	8c3b      	ldrh	r3, [r7, #32]
 8011b14:	4619      	mov	r1, r3
 8011b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b18:	f7ff fdb0 	bl	801167c <ip_reass_enqueue_new_datagram>
 8011b1c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d11c      	bne.n	8011b5e <ip4_reass+0x13e>
      goto nullreturn;
 8011b24:	e0f9      	b.n	8011d1a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b28:	88db      	ldrh	r3, [r3, #6]
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7f3 fe75 	bl	800581c <lwip_htons>
 8011b32:	4603      	mov	r3, r0
 8011b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d110      	bne.n	8011b5e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3e:	89db      	ldrh	r3, [r3, #14]
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7f3 fe6b 	bl	800581c <lwip_htons>
 8011b46:	4603      	mov	r3, r0
 8011b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d006      	beq.n	8011b5e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b52:	3308      	adds	r3, #8
 8011b54:	2214      	movs	r2, #20
 8011b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 fb9a 	bl	8012292 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b60:	88db      	ldrh	r3, [r3, #6]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	f003 0320 	and.w	r3, r3, #32
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	bf0c      	ite	eq
 8011b6c:	2301      	moveq	r3, #1
 8011b6e:	2300      	movne	r3, #0
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d00e      	beq.n	8011b98 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011b7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b7e:	4413      	add	r3, r2
 8011b80:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011b82:	8b7a      	ldrh	r2, [r7, #26]
 8011b84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011b86:	429a      	cmp	r2, r3
 8011b88:	f0c0 80a0 	bcc.w	8011ccc <ip4_reass+0x2ac>
 8011b8c:	8b7b      	ldrh	r3, [r7, #26]
 8011b8e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011b92:	4293      	cmp	r3, r2
 8011b94:	f200 809a 	bhi.w	8011ccc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011b98:	69fa      	ldr	r2, [r7, #28]
 8011b9a:	6879      	ldr	r1, [r7, #4]
 8011b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b9e:	f7ff fdd5 	bl	801174c <ip_reass_chain_frag_into_datagram_and_validate>
 8011ba2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011baa:	f000 8091 	beq.w	8011cd0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011bae:	4b5f      	ldr	r3, [pc, #380]	; (8011d2c <ip4_reass+0x30c>)
 8011bb0:	881a      	ldrh	r2, [r3, #0]
 8011bb2:	8c3b      	ldrh	r3, [r7, #32]
 8011bb4:	4413      	add	r3, r2
 8011bb6:	b29a      	uxth	r2, r3
 8011bb8:	4b5c      	ldr	r3, [pc, #368]	; (8011d2c <ip4_reass+0x30c>)
 8011bba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00d      	beq.n	8011bde <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011bc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011bc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011bc6:	4413      	add	r3, r2
 8011bc8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bcc:	8a7a      	ldrh	r2, [r7, #18]
 8011bce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd2:	7f9b      	ldrb	r3, [r3, #30]
 8011bd4:	f043 0301 	orr.w	r3, r3, #1
 8011bd8:	b2da      	uxtb	r2, r3
 8011bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bdc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d171      	bne.n	8011cc8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be6:	8b9b      	ldrh	r3, [r3, #28]
 8011be8:	3314      	adds	r3, #20
 8011bea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	685b      	ldr	r3, [r3, #4]
 8011bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c00:	3308      	adds	r3, #8
 8011c02:	2214      	movs	r2, #20
 8011c04:	4619      	mov	r1, r3
 8011c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c08:	f000 fb43 	bl	8012292 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011c0c:	8a3b      	ldrh	r3, [r7, #16]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7f3 fe04 	bl	800581c <lwip_htons>
 8011c14:	4603      	mov	r3, r0
 8011c16:	461a      	mov	r2, r3
 8011c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c1a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c1e:	2200      	movs	r2, #0
 8011c20:	719a      	strb	r2, [r3, #6]
 8011c22:	2200      	movs	r2, #0
 8011c24:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c28:	2200      	movs	r2, #0
 8011c2a:	729a      	strb	r2, [r3, #10]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c32:	685b      	ldr	r3, [r3, #4]
 8011c34:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011c36:	e00d      	b.n	8011c54 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011c3e:	2114      	movs	r1, #20
 8011c40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011c42:	f7f5 f83d 	bl	8006cc0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011c46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f7f5 f981 	bl	8006f50 <pbuf_cat>
      r = iprh->next_pbuf;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d1ee      	bne.n	8011c38 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011c5a:	4b35      	ldr	r3, [pc, #212]	; (8011d30 <ip4_reass+0x310>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d102      	bne.n	8011c6a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011c64:	2300      	movs	r3, #0
 8011c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c68:	e010      	b.n	8011c8c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c6a:	4b31      	ldr	r3, [pc, #196]	; (8011d30 <ip4_reass+0x310>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c70:	e007      	b.n	8011c82 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d006      	beq.n	8011c8a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d1f4      	bne.n	8011c72 <ip4_reass+0x252>
 8011c88:	e000      	b.n	8011c8c <ip4_reass+0x26c>
          break;
 8011c8a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c90:	f7ff fd2e 	bl	80116f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f7f5 f921 	bl	8006edc <pbuf_clen>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011c9e:	4b23      	ldr	r3, [pc, #140]	; (8011d2c <ip4_reass+0x30c>)
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	8c3a      	ldrh	r2, [r7, #32]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d906      	bls.n	8011cb6 <ip4_reass+0x296>
 8011ca8:	4b22      	ldr	r3, [pc, #136]	; (8011d34 <ip4_reass+0x314>)
 8011caa:	f240 229b 	movw	r2, #667	; 0x29b
 8011cae:	4922      	ldr	r1, [pc, #136]	; (8011d38 <ip4_reass+0x318>)
 8011cb0:	4822      	ldr	r0, [pc, #136]	; (8011d3c <ip4_reass+0x31c>)
 8011cb2:	f000 fb01 	bl	80122b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011cb6:	4b1d      	ldr	r3, [pc, #116]	; (8011d2c <ip4_reass+0x30c>)
 8011cb8:	881a      	ldrh	r2, [r3, #0]
 8011cba:	8c3b      	ldrh	r3, [r7, #32]
 8011cbc:	1ad3      	subs	r3, r2, r3
 8011cbe:	b29a      	uxth	r2, r3
 8011cc0:	4b1a      	ldr	r3, [pc, #104]	; (8011d2c <ip4_reass+0x30c>)
 8011cc2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	e02c      	b.n	8011d22 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	e02a      	b.n	8011d22 <ip4_reass+0x302>

nullreturn_ipr:
 8011ccc:	bf00      	nop
 8011cce:	e000      	b.n	8011cd2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011cd0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d106      	bne.n	8011ce6 <ip4_reass+0x2c6>
 8011cd8:	4b16      	ldr	r3, [pc, #88]	; (8011d34 <ip4_reass+0x314>)
 8011cda:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011cde:	4918      	ldr	r1, [pc, #96]	; (8011d40 <ip4_reass+0x320>)
 8011ce0:	4816      	ldr	r0, [pc, #88]	; (8011d3c <ip4_reass+0x31c>)
 8011ce2:	f000 fae9 	bl	80122b8 <iprintf>
  if (ipr->p == NULL) {
 8011ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d114      	bne.n	8011d18 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011cee:	4b10      	ldr	r3, [pc, #64]	; (8011d30 <ip4_reass+0x310>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d006      	beq.n	8011d06 <ip4_reass+0x2e6>
 8011cf8:	4b0e      	ldr	r3, [pc, #56]	; (8011d34 <ip4_reass+0x314>)
 8011cfa:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011cfe:	4911      	ldr	r1, [pc, #68]	; (8011d44 <ip4_reass+0x324>)
 8011d00:	480e      	ldr	r0, [pc, #56]	; (8011d3c <ip4_reass+0x31c>)
 8011d02:	f000 fad9 	bl	80122b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011d06:	2100      	movs	r1, #0
 8011d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d0a:	f7ff fcf1 	bl	80116f0 <ip_reass_dequeue_datagram>
 8011d0e:	e004      	b.n	8011d1a <ip4_reass+0x2fa>
    goto nullreturn;
 8011d10:	bf00      	nop
 8011d12:	e002      	b.n	8011d1a <ip4_reass+0x2fa>
    goto nullreturn;
 8011d14:	bf00      	nop
 8011d16:	e000      	b.n	8011d1a <ip4_reass+0x2fa>
  }

nullreturn:
 8011d18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f7f5 f856 	bl	8006dcc <pbuf_free>
  return NULL;
 8011d20:	2300      	movs	r3, #0
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3738      	adds	r7, #56	; 0x38
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	20000654 	.word	0x20000654
 8011d30:	20000650 	.word	0x20000650
 8011d34:	08015e34 	.word	0x08015e34
 8011d38:	08015fa4 	.word	0x08015fa4
 8011d3c:	08015e7c 	.word	0x08015e7c
 8011d40:	08015fc0 	.word	0x08015fc0
 8011d44:	08015fcc 	.word	0x08015fcc

08011d48 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011d4c:	2005      	movs	r0, #5
 8011d4e:	f7f4 f9f1 	bl	8006134 <memp_malloc>
 8011d52:	4603      	mov	r3, r0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b082      	sub	sp, #8
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d106      	bne.n	8011d74 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011d66:	4b07      	ldr	r3, [pc, #28]	; (8011d84 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011d68:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011d6c:	4906      	ldr	r1, [pc, #24]	; (8011d88 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011d6e:	4807      	ldr	r0, [pc, #28]	; (8011d8c <ip_frag_free_pbuf_custom_ref+0x34>)
 8011d70:	f000 faa2 	bl	80122b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011d74:	6879      	ldr	r1, [r7, #4]
 8011d76:	2005      	movs	r0, #5
 8011d78:	f7f4 fa28 	bl	80061cc <memp_free>
}
 8011d7c:	bf00      	nop
 8011d7e:	3708      	adds	r7, #8
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	08015e34 	.word	0x08015e34
 8011d88:	08015fec 	.word	0x08015fec
 8011d8c:	08015e7c 	.word	0x08015e7c

08011d90 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b084      	sub	sp, #16
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d106      	bne.n	8011db0 <ipfrag_free_pbuf_custom+0x20>
 8011da2:	4b11      	ldr	r3, [pc, #68]	; (8011de8 <ipfrag_free_pbuf_custom+0x58>)
 8011da4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011da8:	4910      	ldr	r1, [pc, #64]	; (8011dec <ipfrag_free_pbuf_custom+0x5c>)
 8011daa:	4811      	ldr	r0, [pc, #68]	; (8011df0 <ipfrag_free_pbuf_custom+0x60>)
 8011dac:	f000 fa84 	bl	80122b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d006      	beq.n	8011dc6 <ipfrag_free_pbuf_custom+0x36>
 8011db8:	4b0b      	ldr	r3, [pc, #44]	; (8011de8 <ipfrag_free_pbuf_custom+0x58>)
 8011dba:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011dbe:	490d      	ldr	r1, [pc, #52]	; (8011df4 <ipfrag_free_pbuf_custom+0x64>)
 8011dc0:	480b      	ldr	r0, [pc, #44]	; (8011df0 <ipfrag_free_pbuf_custom+0x60>)
 8011dc2:	f000 fa79 	bl	80122b8 <iprintf>
  if (pcr->original != NULL) {
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	695b      	ldr	r3, [r3, #20]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d004      	beq.n	8011dd8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	695b      	ldr	r3, [r3, #20]
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7f4 fffa 	bl	8006dcc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011dd8:	68f8      	ldr	r0, [r7, #12]
 8011dda:	f7ff ffbd 	bl	8011d58 <ip_frag_free_pbuf_custom_ref>
}
 8011dde:	bf00      	nop
 8011de0:	3710      	adds	r7, #16
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	08015e34 	.word	0x08015e34
 8011dec:	08015ff8 	.word	0x08015ff8
 8011df0:	08015e7c 	.word	0x08015e7c
 8011df4:	08016004 	.word	0x08016004

08011df8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b094      	sub	sp, #80	; 0x50
 8011dfc:	af02      	add	r7, sp, #8
 8011dfe:	60f8      	str	r0, [r7, #12]
 8011e00:	60b9      	str	r1, [r7, #8]
 8011e02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011e04:	2300      	movs	r3, #0
 8011e06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011e0e:	3b14      	subs	r3, #20
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	da00      	bge.n	8011e16 <ip4_frag+0x1e>
 8011e14:	3307      	adds	r3, #7
 8011e16:	10db      	asrs	r3, r3, #3
 8011e18:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011e1a:	2314      	movs	r3, #20
 8011e1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e26:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	f003 030f 	and.w	r3, r3, #15
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b14      	cmp	r3, #20
 8011e38:	d002      	beq.n	8011e40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011e3a:	f06f 0305 	mvn.w	r3, #5
 8011e3e:	e10f      	b.n	8012060 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	895b      	ldrh	r3, [r3, #10]
 8011e44:	2b13      	cmp	r3, #19
 8011e46:	d809      	bhi.n	8011e5c <ip4_frag+0x64>
 8011e48:	4b87      	ldr	r3, [pc, #540]	; (8012068 <ip4_frag+0x270>)
 8011e4a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011e4e:	4987      	ldr	r1, [pc, #540]	; (801206c <ip4_frag+0x274>)
 8011e50:	4887      	ldr	r0, [pc, #540]	; (8012070 <ip4_frag+0x278>)
 8011e52:	f000 fa31 	bl	80122b8 <iprintf>
 8011e56:	f06f 0305 	mvn.w	r3, #5
 8011e5a:	e101      	b.n	8012060 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5e:	88db      	ldrh	r3, [r3, #6]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7f3 fcda 	bl	800581c <lwip_htons>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011e6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011e72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011e76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011e7c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	891b      	ldrh	r3, [r3, #8]
 8011e82:	3b14      	subs	r3, #20
 8011e84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011e88:	e0e0      	b.n	801204c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011e8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e8c:	00db      	lsls	r3, r3, #3
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e94:	4293      	cmp	r3, r2
 8011e96:	bf28      	it	cs
 8011e98:	4613      	movcs	r3, r2
 8011e9a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011e9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ea0:	2114      	movs	r1, #20
 8011ea2:	200e      	movs	r0, #14
 8011ea4:	f7f4 fcb2 	bl	800680c <pbuf_alloc>
 8011ea8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f000 80d4 	beq.w	801205a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb4:	895b      	ldrh	r3, [r3, #10]
 8011eb6:	2b13      	cmp	r3, #19
 8011eb8:	d806      	bhi.n	8011ec8 <ip4_frag+0xd0>
 8011eba:	4b6b      	ldr	r3, [pc, #428]	; (8012068 <ip4_frag+0x270>)
 8011ebc:	f240 3225 	movw	r2, #805	; 0x325
 8011ec0:	496c      	ldr	r1, [pc, #432]	; (8012074 <ip4_frag+0x27c>)
 8011ec2:	486b      	ldr	r0, [pc, #428]	; (8012070 <ip4_frag+0x278>)
 8011ec4:	f000 f9f8 	bl	80122b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	2214      	movs	r2, #20
 8011ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f000 f9de 	bl	8012292 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	685b      	ldr	r3, [r3, #4]
 8011eda:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011edc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011ede:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011ee2:	e064      	b.n	8011fae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	895a      	ldrh	r2, [r3, #10]
 8011ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011eea:	1ad3      	subs	r3, r2, r3
 8011eec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	895b      	ldrh	r3, [r3, #10]
 8011ef2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d906      	bls.n	8011f06 <ip4_frag+0x10e>
 8011ef8:	4b5b      	ldr	r3, [pc, #364]	; (8012068 <ip4_frag+0x270>)
 8011efa:	f240 322d 	movw	r2, #813	; 0x32d
 8011efe:	495e      	ldr	r1, [pc, #376]	; (8012078 <ip4_frag+0x280>)
 8011f00:	485b      	ldr	r0, [pc, #364]	; (8012070 <ip4_frag+0x278>)
 8011f02:	f000 f9d9 	bl	80122b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011f06:	8bfa      	ldrh	r2, [r7, #30]
 8011f08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011f0c:	4293      	cmp	r3, r2
 8011f0e:	bf28      	it	cs
 8011f10:	4613      	movcs	r3, r2
 8011f12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011f16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d105      	bne.n	8011f2a <ip4_frag+0x132>
        poff = 0;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	60fb      	str	r3, [r7, #12]
        continue;
 8011f28:	e041      	b.n	8011fae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011f2a:	f7ff ff0d 	bl	8011d48 <ip_frag_alloc_pbuf_custom_ref>
 8011f2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d103      	bne.n	8011f3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f38:	f7f4 ff48 	bl	8006dcc <pbuf_free>
        goto memerr;
 8011f3c:	e08e      	b.n	801205c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f46:	4413      	add	r3, r2
 8011f48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011f4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011f50:	9201      	str	r2, [sp, #4]
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	4603      	mov	r3, r0
 8011f56:	2241      	movs	r2, #65	; 0x41
 8011f58:	2000      	movs	r0, #0
 8011f5a:	f7f4 fd7d 	bl	8006a58 <pbuf_alloced_custom>
 8011f5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d106      	bne.n	8011f74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011f66:	69b8      	ldr	r0, [r7, #24]
 8011f68:	f7ff fef6 	bl	8011d58 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f6e:	f7f4 ff2d 	bl	8006dcc <pbuf_free>
        goto memerr;
 8011f72:	e073      	b.n	801205c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7f4 ffc9 	bl	8006f0c <pbuf_ref>
      pcr->original = p;
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011f80:	69bb      	ldr	r3, [r7, #24]
 8011f82:	4a3e      	ldr	r2, [pc, #248]	; (801207c <ip4_frag+0x284>)
 8011f84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011f86:	6979      	ldr	r1, [r7, #20]
 8011f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f8a:	f7f4 ffe1 	bl	8006f50 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011f8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011f96:	1ad3      	subs	r3, r2, r3
 8011f98:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011f9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d004      	beq.n	8011fae <ip4_frag+0x1b6>
        poff = 0;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011fae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d196      	bne.n	8011ee4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011fb6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011fb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011fbc:	4413      	add	r3, r2
 8011fbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011fc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011fc8:	3b14      	subs	r3, #20
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	bfd4      	ite	le
 8011fce:	2301      	movle	r3, #1
 8011fd0:	2300      	movgt	r3, #0
 8011fd2:	b2db      	uxtb	r3, r3
 8011fd4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011fde:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011fe0:	6a3b      	ldr	r3, [r7, #32]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d002      	beq.n	8011fec <ip4_frag+0x1f4>
 8011fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d003      	beq.n	8011ff4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011fec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011ff2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011ff4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7f3 fc10 	bl	800581c <lwip_htons>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	461a      	mov	r2, r3
 8012000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012002:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012006:	3314      	adds	r3, #20
 8012008:	b29b      	uxth	r3, r3
 801200a:	4618      	mov	r0, r3
 801200c:	f7f3 fc06 	bl	800581c <lwip_htons>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012016:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801201a:	2200      	movs	r2, #0
 801201c:	729a      	strb	r2, [r3, #10]
 801201e:	2200      	movs	r2, #0
 8012020:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	695b      	ldr	r3, [r3, #20]
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801202a:	68b8      	ldr	r0, [r7, #8]
 801202c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801202e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012030:	f7f4 fecc 	bl	8006dcc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012034:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012038:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8012040:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012044:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012046:	4413      	add	r3, r2
 8012048:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801204c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012050:	2b00      	cmp	r3, #0
 8012052:	f47f af1a 	bne.w	8011e8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012056:	2300      	movs	r3, #0
 8012058:	e002      	b.n	8012060 <ip4_frag+0x268>
      goto memerr;
 801205a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801205c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012060:	4618      	mov	r0, r3
 8012062:	3748      	adds	r7, #72	; 0x48
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}
 8012068:	08015e34 	.word	0x08015e34
 801206c:	08016010 	.word	0x08016010
 8012070:	08015e7c 	.word	0x08015e7c
 8012074:	0801602c 	.word	0x0801602c
 8012078:	0801604c 	.word	0x0801604c
 801207c:	08011d91 	.word	0x08011d91

08012080 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
 8012088:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801208a:	230e      	movs	r3, #14
 801208c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	895b      	ldrh	r3, [r3, #10]
 8012092:	2b0e      	cmp	r3, #14
 8012094:	d96e      	bls.n	8012174 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	7bdb      	ldrb	r3, [r3, #15]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d106      	bne.n	80120ac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80120a4:	3301      	adds	r3, #1
 80120a6:	b2da      	uxtb	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	685b      	ldr	r3, [r3, #4]
 80120b0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	7b1a      	ldrb	r2, [r3, #12]
 80120b6:	7b5b      	ldrb	r3, [r3, #13]
 80120b8:	021b      	lsls	r3, r3, #8
 80120ba:	4313      	orrs	r3, r2
 80120bc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	781b      	ldrb	r3, [r3, #0]
 80120c2:	f003 0301 	and.w	r3, r3, #1
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d023      	beq.n	8012112 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	d10f      	bne.n	80120f2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	785b      	ldrb	r3, [r3, #1]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d11b      	bne.n	8012112 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80120de:	2b5e      	cmp	r3, #94	; 0x5e
 80120e0:	d117      	bne.n	8012112 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	7b5b      	ldrb	r3, [r3, #13]
 80120e6:	f043 0310 	orr.w	r3, r3, #16
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	735a      	strb	r2, [r3, #13]
 80120f0:	e00f      	b.n	8012112 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	2206      	movs	r2, #6
 80120f6:	4928      	ldr	r1, [pc, #160]	; (8012198 <ethernet_input+0x118>)
 80120f8:	4618      	mov	r0, r3
 80120fa:	f000 f8bb 	bl	8012274 <memcmp>
 80120fe:	4603      	mov	r3, r0
 8012100:	2b00      	cmp	r3, #0
 8012102:	d106      	bne.n	8012112 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	7b5b      	ldrb	r3, [r3, #13]
 8012108:	f043 0308 	orr.w	r3, r3, #8
 801210c:	b2da      	uxtb	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012112:	89fb      	ldrh	r3, [r7, #14]
 8012114:	2b08      	cmp	r3, #8
 8012116:	d003      	beq.n	8012120 <ethernet_input+0xa0>
 8012118:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801211c:	d014      	beq.n	8012148 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801211e:	e032      	b.n	8012186 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012120:	683b      	ldr	r3, [r7, #0]
 8012122:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012126:	f003 0308 	and.w	r3, r3, #8
 801212a:	2b00      	cmp	r3, #0
 801212c:	d024      	beq.n	8012178 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801212e:	8afb      	ldrh	r3, [r7, #22]
 8012130:	4619      	mov	r1, r3
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7f4 fdc4 	bl	8006cc0 <pbuf_remove_header>
 8012138:	4603      	mov	r3, r0
 801213a:	2b00      	cmp	r3, #0
 801213c:	d11e      	bne.n	801217c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801213e:	6839      	ldr	r1, [r7, #0]
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f7fe ff0f 	bl	8010f64 <ip4_input>
      break;
 8012146:	e013      	b.n	8012170 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801214e:	f003 0308 	and.w	r3, r3, #8
 8012152:	2b00      	cmp	r3, #0
 8012154:	d014      	beq.n	8012180 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012156:	8afb      	ldrh	r3, [r7, #22]
 8012158:	4619      	mov	r1, r3
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f7f4 fdb0 	bl	8006cc0 <pbuf_remove_header>
 8012160:	4603      	mov	r3, r0
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10e      	bne.n	8012184 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012166:	6839      	ldr	r1, [r7, #0]
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7fe f8ab 	bl	80102c4 <etharp_input>
      break;
 801216e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012170:	2300      	movs	r3, #0
 8012172:	e00c      	b.n	801218e <ethernet_input+0x10e>
    goto free_and_return;
 8012174:	bf00      	nop
 8012176:	e006      	b.n	8012186 <ethernet_input+0x106>
        goto free_and_return;
 8012178:	bf00      	nop
 801217a:	e004      	b.n	8012186 <ethernet_input+0x106>
        goto free_and_return;
 801217c:	bf00      	nop
 801217e:	e002      	b.n	8012186 <ethernet_input+0x106>
        goto free_and_return;
 8012180:	bf00      	nop
 8012182:	e000      	b.n	8012186 <ethernet_input+0x106>
        goto free_and_return;
 8012184:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012186:	6878      	ldr	r0, [r7, #4]
 8012188:	f7f4 fe20 	bl	8006dcc <pbuf_free>
  return ERR_OK;
 801218c:	2300      	movs	r3, #0
}
 801218e:	4618      	mov	r0, r3
 8012190:	3718      	adds	r7, #24
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	0801e094 	.word	0x0801e094

0801219c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801219c:	b580      	push	{r7, lr}
 801219e:	b086      	sub	sp, #24
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
 80121a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80121aa:	8c3b      	ldrh	r3, [r7, #32]
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7f3 fb35 	bl	800581c <lwip_htons>
 80121b2:	4603      	mov	r3, r0
 80121b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80121b6:	210e      	movs	r1, #14
 80121b8:	68b8      	ldr	r0, [r7, #8]
 80121ba:	f7f4 fd71 	bl	8006ca0 <pbuf_add_header>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d125      	bne.n	8012210 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	8afa      	ldrh	r2, [r7, #22]
 80121ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	2206      	movs	r2, #6
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f000 f85b 	bl	8012292 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	3306      	adds	r3, #6
 80121e0:	2206      	movs	r2, #6
 80121e2:	6879      	ldr	r1, [r7, #4]
 80121e4:	4618      	mov	r0, r3
 80121e6:	f000 f854 	bl	8012292 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80121f0:	2b06      	cmp	r3, #6
 80121f2:	d006      	beq.n	8012202 <ethernet_output+0x66>
 80121f4:	4b0a      	ldr	r3, [pc, #40]	; (8012220 <ethernet_output+0x84>)
 80121f6:	f240 1233 	movw	r2, #307	; 0x133
 80121fa:	490a      	ldr	r1, [pc, #40]	; (8012224 <ethernet_output+0x88>)
 80121fc:	480a      	ldr	r0, [pc, #40]	; (8012228 <ethernet_output+0x8c>)
 80121fe:	f000 f85b 	bl	80122b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	699b      	ldr	r3, [r3, #24]
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	4798      	blx	r3
 801220c:	4603      	mov	r3, r0
 801220e:	e002      	b.n	8012216 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012210:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012212:	f06f 0301 	mvn.w	r3, #1
}
 8012216:	4618      	mov	r0, r3
 8012218:	3718      	adds	r7, #24
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	0801605c 	.word	0x0801605c
 8012224:	08016094 	.word	0x08016094
 8012228:	080160c8 	.word	0x080160c8

0801222c <__libc_init_array>:
 801222c:	b570      	push	{r4, r5, r6, lr}
 801222e:	4e0d      	ldr	r6, [pc, #52]	; (8012264 <__libc_init_array+0x38>)
 8012230:	4c0d      	ldr	r4, [pc, #52]	; (8012268 <__libc_init_array+0x3c>)
 8012232:	1ba4      	subs	r4, r4, r6
 8012234:	10a4      	asrs	r4, r4, #2
 8012236:	2500      	movs	r5, #0
 8012238:	42a5      	cmp	r5, r4
 801223a:	d109      	bne.n	8012250 <__libc_init_array+0x24>
 801223c:	4e0b      	ldr	r6, [pc, #44]	; (801226c <__libc_init_array+0x40>)
 801223e:	4c0c      	ldr	r4, [pc, #48]	; (8012270 <__libc_init_array+0x44>)
 8012240:	f000 ff7a 	bl	8013138 <_init>
 8012244:	1ba4      	subs	r4, r4, r6
 8012246:	10a4      	asrs	r4, r4, #2
 8012248:	2500      	movs	r5, #0
 801224a:	42a5      	cmp	r5, r4
 801224c:	d105      	bne.n	801225a <__libc_init_array+0x2e>
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012254:	4798      	blx	r3
 8012256:	3501      	adds	r5, #1
 8012258:	e7ee      	b.n	8012238 <__libc_init_array+0xc>
 801225a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801225e:	4798      	blx	r3
 8012260:	3501      	adds	r5, #1
 8012262:	e7f2      	b.n	801224a <__libc_init_array+0x1e>
 8012264:	0801e144 	.word	0x0801e144
 8012268:	0801e144 	.word	0x0801e144
 801226c:	0801e144 	.word	0x0801e144
 8012270:	0801e148 	.word	0x0801e148

08012274 <memcmp>:
 8012274:	b530      	push	{r4, r5, lr}
 8012276:	2400      	movs	r4, #0
 8012278:	42a2      	cmp	r2, r4
 801227a:	d101      	bne.n	8012280 <memcmp+0xc>
 801227c:	2000      	movs	r0, #0
 801227e:	e007      	b.n	8012290 <memcmp+0x1c>
 8012280:	5d03      	ldrb	r3, [r0, r4]
 8012282:	3401      	adds	r4, #1
 8012284:	190d      	adds	r5, r1, r4
 8012286:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801228a:	42ab      	cmp	r3, r5
 801228c:	d0f4      	beq.n	8012278 <memcmp+0x4>
 801228e:	1b58      	subs	r0, r3, r5
 8012290:	bd30      	pop	{r4, r5, pc}

08012292 <memcpy>:
 8012292:	b510      	push	{r4, lr}
 8012294:	1e43      	subs	r3, r0, #1
 8012296:	440a      	add	r2, r1
 8012298:	4291      	cmp	r1, r2
 801229a:	d100      	bne.n	801229e <memcpy+0xc>
 801229c:	bd10      	pop	{r4, pc}
 801229e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80122a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80122a6:	e7f7      	b.n	8012298 <memcpy+0x6>

080122a8 <memset>:
 80122a8:	4402      	add	r2, r0
 80122aa:	4603      	mov	r3, r0
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d100      	bne.n	80122b2 <memset+0xa>
 80122b0:	4770      	bx	lr
 80122b2:	f803 1b01 	strb.w	r1, [r3], #1
 80122b6:	e7f9      	b.n	80122ac <memset+0x4>

080122b8 <iprintf>:
 80122b8:	b40f      	push	{r0, r1, r2, r3}
 80122ba:	4b0a      	ldr	r3, [pc, #40]	; (80122e4 <iprintf+0x2c>)
 80122bc:	b513      	push	{r0, r1, r4, lr}
 80122be:	681c      	ldr	r4, [r3, #0]
 80122c0:	b124      	cbz	r4, 80122cc <iprintf+0x14>
 80122c2:	69a3      	ldr	r3, [r4, #24]
 80122c4:	b913      	cbnz	r3, 80122cc <iprintf+0x14>
 80122c6:	4620      	mov	r0, r4
 80122c8:	f000 f8a2 	bl	8012410 <__sinit>
 80122cc:	ab05      	add	r3, sp, #20
 80122ce:	9a04      	ldr	r2, [sp, #16]
 80122d0:	68a1      	ldr	r1, [r4, #8]
 80122d2:	9301      	str	r3, [sp, #4]
 80122d4:	4620      	mov	r0, r4
 80122d6:	f000 f9ff 	bl	80126d8 <_vfiprintf_r>
 80122da:	b002      	add	sp, #8
 80122dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122e0:	b004      	add	sp, #16
 80122e2:	4770      	bx	lr
 80122e4:	20000018 	.word	0x20000018

080122e8 <rand>:
 80122e8:	b538      	push	{r3, r4, r5, lr}
 80122ea:	4b13      	ldr	r3, [pc, #76]	; (8012338 <rand+0x50>)
 80122ec:	681c      	ldr	r4, [r3, #0]
 80122ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80122f0:	b97b      	cbnz	r3, 8012312 <rand+0x2a>
 80122f2:	2018      	movs	r0, #24
 80122f4:	f000 f916 	bl	8012524 <malloc>
 80122f8:	4a10      	ldr	r2, [pc, #64]	; (801233c <rand+0x54>)
 80122fa:	4b11      	ldr	r3, [pc, #68]	; (8012340 <rand+0x58>)
 80122fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80122fe:	e9c0 2300 	strd	r2, r3, [r0]
 8012302:	4b10      	ldr	r3, [pc, #64]	; (8012344 <rand+0x5c>)
 8012304:	6083      	str	r3, [r0, #8]
 8012306:	230b      	movs	r3, #11
 8012308:	8183      	strh	r3, [r0, #12]
 801230a:	2201      	movs	r2, #1
 801230c:	2300      	movs	r3, #0
 801230e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012312:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012314:	480c      	ldr	r0, [pc, #48]	; (8012348 <rand+0x60>)
 8012316:	690a      	ldr	r2, [r1, #16]
 8012318:	694b      	ldr	r3, [r1, #20]
 801231a:	4c0c      	ldr	r4, [pc, #48]	; (801234c <rand+0x64>)
 801231c:	4350      	muls	r0, r2
 801231e:	fb04 0003 	mla	r0, r4, r3, r0
 8012322:	fba2 2304 	umull	r2, r3, r2, r4
 8012326:	4403      	add	r3, r0
 8012328:	1c54      	adds	r4, r2, #1
 801232a:	f143 0500 	adc.w	r5, r3, #0
 801232e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8012332:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8012336:	bd38      	pop	{r3, r4, r5, pc}
 8012338:	20000018 	.word	0x20000018
 801233c:	abcd330e 	.word	0xabcd330e
 8012340:	e66d1234 	.word	0xe66d1234
 8012344:	0005deec 	.word	0x0005deec
 8012348:	5851f42d 	.word	0x5851f42d
 801234c:	4c957f2d 	.word	0x4c957f2d

08012350 <strchr>:
 8012350:	b2c9      	uxtb	r1, r1
 8012352:	4603      	mov	r3, r0
 8012354:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012358:	b11a      	cbz	r2, 8012362 <strchr+0x12>
 801235a:	428a      	cmp	r2, r1
 801235c:	d1f9      	bne.n	8012352 <strchr+0x2>
 801235e:	4618      	mov	r0, r3
 8012360:	4770      	bx	lr
 8012362:	2900      	cmp	r1, #0
 8012364:	bf18      	it	ne
 8012366:	2300      	movne	r3, #0
 8012368:	e7f9      	b.n	801235e <strchr+0xe>

0801236a <strncmp>:
 801236a:	b510      	push	{r4, lr}
 801236c:	b16a      	cbz	r2, 801238a <strncmp+0x20>
 801236e:	3901      	subs	r1, #1
 8012370:	1884      	adds	r4, r0, r2
 8012372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012376:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801237a:	4293      	cmp	r3, r2
 801237c:	d103      	bne.n	8012386 <strncmp+0x1c>
 801237e:	42a0      	cmp	r0, r4
 8012380:	d001      	beq.n	8012386 <strncmp+0x1c>
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1f5      	bne.n	8012372 <strncmp+0x8>
 8012386:	1a98      	subs	r0, r3, r2
 8012388:	bd10      	pop	{r4, pc}
 801238a:	4610      	mov	r0, r2
 801238c:	e7fc      	b.n	8012388 <strncmp+0x1e>
	...

08012390 <std>:
 8012390:	2300      	movs	r3, #0
 8012392:	b510      	push	{r4, lr}
 8012394:	4604      	mov	r4, r0
 8012396:	e9c0 3300 	strd	r3, r3, [r0]
 801239a:	6083      	str	r3, [r0, #8]
 801239c:	8181      	strh	r1, [r0, #12]
 801239e:	6643      	str	r3, [r0, #100]	; 0x64
 80123a0:	81c2      	strh	r2, [r0, #14]
 80123a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123a6:	6183      	str	r3, [r0, #24]
 80123a8:	4619      	mov	r1, r3
 80123aa:	2208      	movs	r2, #8
 80123ac:	305c      	adds	r0, #92	; 0x5c
 80123ae:	f7ff ff7b 	bl	80122a8 <memset>
 80123b2:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <std+0x38>)
 80123b4:	6263      	str	r3, [r4, #36]	; 0x24
 80123b6:	4b05      	ldr	r3, [pc, #20]	; (80123cc <std+0x3c>)
 80123b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80123ba:	4b05      	ldr	r3, [pc, #20]	; (80123d0 <std+0x40>)
 80123bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123be:	4b05      	ldr	r3, [pc, #20]	; (80123d4 <std+0x44>)
 80123c0:	6224      	str	r4, [r4, #32]
 80123c2:	6323      	str	r3, [r4, #48]	; 0x30
 80123c4:	bd10      	pop	{r4, pc}
 80123c6:	bf00      	nop
 80123c8:	08012c35 	.word	0x08012c35
 80123cc:	08012c57 	.word	0x08012c57
 80123d0:	08012c8f 	.word	0x08012c8f
 80123d4:	08012cb3 	.word	0x08012cb3

080123d8 <_cleanup_r>:
 80123d8:	4901      	ldr	r1, [pc, #4]	; (80123e0 <_cleanup_r+0x8>)
 80123da:	f000 b885 	b.w	80124e8 <_fwalk_reent>
 80123de:	bf00      	nop
 80123e0:	08012f8d 	.word	0x08012f8d

080123e4 <__sfmoreglue>:
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	1e4a      	subs	r2, r1, #1
 80123e8:	2568      	movs	r5, #104	; 0x68
 80123ea:	4355      	muls	r5, r2
 80123ec:	460e      	mov	r6, r1
 80123ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80123f2:	f000 f8ed 	bl	80125d0 <_malloc_r>
 80123f6:	4604      	mov	r4, r0
 80123f8:	b140      	cbz	r0, 801240c <__sfmoreglue+0x28>
 80123fa:	2100      	movs	r1, #0
 80123fc:	e9c0 1600 	strd	r1, r6, [r0]
 8012400:	300c      	adds	r0, #12
 8012402:	60a0      	str	r0, [r4, #8]
 8012404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012408:	f7ff ff4e 	bl	80122a8 <memset>
 801240c:	4620      	mov	r0, r4
 801240e:	bd70      	pop	{r4, r5, r6, pc}

08012410 <__sinit>:
 8012410:	6983      	ldr	r3, [r0, #24]
 8012412:	b510      	push	{r4, lr}
 8012414:	4604      	mov	r4, r0
 8012416:	bb33      	cbnz	r3, 8012466 <__sinit+0x56>
 8012418:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801241c:	6503      	str	r3, [r0, #80]	; 0x50
 801241e:	4b12      	ldr	r3, [pc, #72]	; (8012468 <__sinit+0x58>)
 8012420:	4a12      	ldr	r2, [pc, #72]	; (801246c <__sinit+0x5c>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	6282      	str	r2, [r0, #40]	; 0x28
 8012426:	4298      	cmp	r0, r3
 8012428:	bf04      	itt	eq
 801242a:	2301      	moveq	r3, #1
 801242c:	6183      	streq	r3, [r0, #24]
 801242e:	f000 f81f 	bl	8012470 <__sfp>
 8012432:	6060      	str	r0, [r4, #4]
 8012434:	4620      	mov	r0, r4
 8012436:	f000 f81b 	bl	8012470 <__sfp>
 801243a:	60a0      	str	r0, [r4, #8]
 801243c:	4620      	mov	r0, r4
 801243e:	f000 f817 	bl	8012470 <__sfp>
 8012442:	2200      	movs	r2, #0
 8012444:	60e0      	str	r0, [r4, #12]
 8012446:	2104      	movs	r1, #4
 8012448:	6860      	ldr	r0, [r4, #4]
 801244a:	f7ff ffa1 	bl	8012390 <std>
 801244e:	2201      	movs	r2, #1
 8012450:	2109      	movs	r1, #9
 8012452:	68a0      	ldr	r0, [r4, #8]
 8012454:	f7ff ff9c 	bl	8012390 <std>
 8012458:	2202      	movs	r2, #2
 801245a:	2112      	movs	r1, #18
 801245c:	68e0      	ldr	r0, [r4, #12]
 801245e:	f7ff ff97 	bl	8012390 <std>
 8012462:	2301      	movs	r3, #1
 8012464:	61a3      	str	r3, [r4, #24]
 8012466:	bd10      	pop	{r4, pc}
 8012468:	0801e0a4 	.word	0x0801e0a4
 801246c:	080123d9 	.word	0x080123d9

08012470 <__sfp>:
 8012470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012472:	4b1b      	ldr	r3, [pc, #108]	; (80124e0 <__sfp+0x70>)
 8012474:	681e      	ldr	r6, [r3, #0]
 8012476:	69b3      	ldr	r3, [r6, #24]
 8012478:	4607      	mov	r7, r0
 801247a:	b913      	cbnz	r3, 8012482 <__sfp+0x12>
 801247c:	4630      	mov	r0, r6
 801247e:	f7ff ffc7 	bl	8012410 <__sinit>
 8012482:	3648      	adds	r6, #72	; 0x48
 8012484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012488:	3b01      	subs	r3, #1
 801248a:	d503      	bpl.n	8012494 <__sfp+0x24>
 801248c:	6833      	ldr	r3, [r6, #0]
 801248e:	b133      	cbz	r3, 801249e <__sfp+0x2e>
 8012490:	6836      	ldr	r6, [r6, #0]
 8012492:	e7f7      	b.n	8012484 <__sfp+0x14>
 8012494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012498:	b16d      	cbz	r5, 80124b6 <__sfp+0x46>
 801249a:	3468      	adds	r4, #104	; 0x68
 801249c:	e7f4      	b.n	8012488 <__sfp+0x18>
 801249e:	2104      	movs	r1, #4
 80124a0:	4638      	mov	r0, r7
 80124a2:	f7ff ff9f 	bl	80123e4 <__sfmoreglue>
 80124a6:	6030      	str	r0, [r6, #0]
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d1f1      	bne.n	8012490 <__sfp+0x20>
 80124ac:	230c      	movs	r3, #12
 80124ae:	603b      	str	r3, [r7, #0]
 80124b0:	4604      	mov	r4, r0
 80124b2:	4620      	mov	r0, r4
 80124b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124b6:	4b0b      	ldr	r3, [pc, #44]	; (80124e4 <__sfp+0x74>)
 80124b8:	6665      	str	r5, [r4, #100]	; 0x64
 80124ba:	e9c4 5500 	strd	r5, r5, [r4]
 80124be:	60a5      	str	r5, [r4, #8]
 80124c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80124c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80124c8:	2208      	movs	r2, #8
 80124ca:	4629      	mov	r1, r5
 80124cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80124d0:	f7ff feea 	bl	80122a8 <memset>
 80124d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80124d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80124dc:	e7e9      	b.n	80124b2 <__sfp+0x42>
 80124de:	bf00      	nop
 80124e0:	0801e0a4 	.word	0x0801e0a4
 80124e4:	ffff0001 	.word	0xffff0001

080124e8 <_fwalk_reent>:
 80124e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124ec:	4680      	mov	r8, r0
 80124ee:	4689      	mov	r9, r1
 80124f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80124f4:	2600      	movs	r6, #0
 80124f6:	b914      	cbnz	r4, 80124fe <_fwalk_reent+0x16>
 80124f8:	4630      	mov	r0, r6
 80124fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012502:	3f01      	subs	r7, #1
 8012504:	d501      	bpl.n	801250a <_fwalk_reent+0x22>
 8012506:	6824      	ldr	r4, [r4, #0]
 8012508:	e7f5      	b.n	80124f6 <_fwalk_reent+0xe>
 801250a:	89ab      	ldrh	r3, [r5, #12]
 801250c:	2b01      	cmp	r3, #1
 801250e:	d907      	bls.n	8012520 <_fwalk_reent+0x38>
 8012510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012514:	3301      	adds	r3, #1
 8012516:	d003      	beq.n	8012520 <_fwalk_reent+0x38>
 8012518:	4629      	mov	r1, r5
 801251a:	4640      	mov	r0, r8
 801251c:	47c8      	blx	r9
 801251e:	4306      	orrs	r6, r0
 8012520:	3568      	adds	r5, #104	; 0x68
 8012522:	e7ee      	b.n	8012502 <_fwalk_reent+0x1a>

08012524 <malloc>:
 8012524:	4b02      	ldr	r3, [pc, #8]	; (8012530 <malloc+0xc>)
 8012526:	4601      	mov	r1, r0
 8012528:	6818      	ldr	r0, [r3, #0]
 801252a:	f000 b851 	b.w	80125d0 <_malloc_r>
 801252e:	bf00      	nop
 8012530:	20000018 	.word	0x20000018

08012534 <_free_r>:
 8012534:	b538      	push	{r3, r4, r5, lr}
 8012536:	4605      	mov	r5, r0
 8012538:	2900      	cmp	r1, #0
 801253a:	d045      	beq.n	80125c8 <_free_r+0x94>
 801253c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012540:	1f0c      	subs	r4, r1, #4
 8012542:	2b00      	cmp	r3, #0
 8012544:	bfb8      	it	lt
 8012546:	18e4      	addlt	r4, r4, r3
 8012548:	f000 fdc0 	bl	80130cc <__malloc_lock>
 801254c:	4a1f      	ldr	r2, [pc, #124]	; (80125cc <_free_r+0x98>)
 801254e:	6813      	ldr	r3, [r2, #0]
 8012550:	4610      	mov	r0, r2
 8012552:	b933      	cbnz	r3, 8012562 <_free_r+0x2e>
 8012554:	6063      	str	r3, [r4, #4]
 8012556:	6014      	str	r4, [r2, #0]
 8012558:	4628      	mov	r0, r5
 801255a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801255e:	f000 bdb6 	b.w	80130ce <__malloc_unlock>
 8012562:	42a3      	cmp	r3, r4
 8012564:	d90c      	bls.n	8012580 <_free_r+0x4c>
 8012566:	6821      	ldr	r1, [r4, #0]
 8012568:	1862      	adds	r2, r4, r1
 801256a:	4293      	cmp	r3, r2
 801256c:	bf04      	itt	eq
 801256e:	681a      	ldreq	r2, [r3, #0]
 8012570:	685b      	ldreq	r3, [r3, #4]
 8012572:	6063      	str	r3, [r4, #4]
 8012574:	bf04      	itt	eq
 8012576:	1852      	addeq	r2, r2, r1
 8012578:	6022      	streq	r2, [r4, #0]
 801257a:	6004      	str	r4, [r0, #0]
 801257c:	e7ec      	b.n	8012558 <_free_r+0x24>
 801257e:	4613      	mov	r3, r2
 8012580:	685a      	ldr	r2, [r3, #4]
 8012582:	b10a      	cbz	r2, 8012588 <_free_r+0x54>
 8012584:	42a2      	cmp	r2, r4
 8012586:	d9fa      	bls.n	801257e <_free_r+0x4a>
 8012588:	6819      	ldr	r1, [r3, #0]
 801258a:	1858      	adds	r0, r3, r1
 801258c:	42a0      	cmp	r0, r4
 801258e:	d10b      	bne.n	80125a8 <_free_r+0x74>
 8012590:	6820      	ldr	r0, [r4, #0]
 8012592:	4401      	add	r1, r0
 8012594:	1858      	adds	r0, r3, r1
 8012596:	4282      	cmp	r2, r0
 8012598:	6019      	str	r1, [r3, #0]
 801259a:	d1dd      	bne.n	8012558 <_free_r+0x24>
 801259c:	6810      	ldr	r0, [r2, #0]
 801259e:	6852      	ldr	r2, [r2, #4]
 80125a0:	605a      	str	r2, [r3, #4]
 80125a2:	4401      	add	r1, r0
 80125a4:	6019      	str	r1, [r3, #0]
 80125a6:	e7d7      	b.n	8012558 <_free_r+0x24>
 80125a8:	d902      	bls.n	80125b0 <_free_r+0x7c>
 80125aa:	230c      	movs	r3, #12
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	e7d3      	b.n	8012558 <_free_r+0x24>
 80125b0:	6820      	ldr	r0, [r4, #0]
 80125b2:	1821      	adds	r1, r4, r0
 80125b4:	428a      	cmp	r2, r1
 80125b6:	bf04      	itt	eq
 80125b8:	6811      	ldreq	r1, [r2, #0]
 80125ba:	6852      	ldreq	r2, [r2, #4]
 80125bc:	6062      	str	r2, [r4, #4]
 80125be:	bf04      	itt	eq
 80125c0:	1809      	addeq	r1, r1, r0
 80125c2:	6021      	streq	r1, [r4, #0]
 80125c4:	605c      	str	r4, [r3, #4]
 80125c6:	e7c7      	b.n	8012558 <_free_r+0x24>
 80125c8:	bd38      	pop	{r3, r4, r5, pc}
 80125ca:	bf00      	nop
 80125cc:	20000658 	.word	0x20000658

080125d0 <_malloc_r>:
 80125d0:	b570      	push	{r4, r5, r6, lr}
 80125d2:	1ccd      	adds	r5, r1, #3
 80125d4:	f025 0503 	bic.w	r5, r5, #3
 80125d8:	3508      	adds	r5, #8
 80125da:	2d0c      	cmp	r5, #12
 80125dc:	bf38      	it	cc
 80125de:	250c      	movcc	r5, #12
 80125e0:	2d00      	cmp	r5, #0
 80125e2:	4606      	mov	r6, r0
 80125e4:	db01      	blt.n	80125ea <_malloc_r+0x1a>
 80125e6:	42a9      	cmp	r1, r5
 80125e8:	d903      	bls.n	80125f2 <_malloc_r+0x22>
 80125ea:	230c      	movs	r3, #12
 80125ec:	6033      	str	r3, [r6, #0]
 80125ee:	2000      	movs	r0, #0
 80125f0:	bd70      	pop	{r4, r5, r6, pc}
 80125f2:	f000 fd6b 	bl	80130cc <__malloc_lock>
 80125f6:	4a21      	ldr	r2, [pc, #132]	; (801267c <_malloc_r+0xac>)
 80125f8:	6814      	ldr	r4, [r2, #0]
 80125fa:	4621      	mov	r1, r4
 80125fc:	b991      	cbnz	r1, 8012624 <_malloc_r+0x54>
 80125fe:	4c20      	ldr	r4, [pc, #128]	; (8012680 <_malloc_r+0xb0>)
 8012600:	6823      	ldr	r3, [r4, #0]
 8012602:	b91b      	cbnz	r3, 801260c <_malloc_r+0x3c>
 8012604:	4630      	mov	r0, r6
 8012606:	f000 fb05 	bl	8012c14 <_sbrk_r>
 801260a:	6020      	str	r0, [r4, #0]
 801260c:	4629      	mov	r1, r5
 801260e:	4630      	mov	r0, r6
 8012610:	f000 fb00 	bl	8012c14 <_sbrk_r>
 8012614:	1c43      	adds	r3, r0, #1
 8012616:	d124      	bne.n	8012662 <_malloc_r+0x92>
 8012618:	230c      	movs	r3, #12
 801261a:	6033      	str	r3, [r6, #0]
 801261c:	4630      	mov	r0, r6
 801261e:	f000 fd56 	bl	80130ce <__malloc_unlock>
 8012622:	e7e4      	b.n	80125ee <_malloc_r+0x1e>
 8012624:	680b      	ldr	r3, [r1, #0]
 8012626:	1b5b      	subs	r3, r3, r5
 8012628:	d418      	bmi.n	801265c <_malloc_r+0x8c>
 801262a:	2b0b      	cmp	r3, #11
 801262c:	d90f      	bls.n	801264e <_malloc_r+0x7e>
 801262e:	600b      	str	r3, [r1, #0]
 8012630:	50cd      	str	r5, [r1, r3]
 8012632:	18cc      	adds	r4, r1, r3
 8012634:	4630      	mov	r0, r6
 8012636:	f000 fd4a 	bl	80130ce <__malloc_unlock>
 801263a:	f104 000b 	add.w	r0, r4, #11
 801263e:	1d23      	adds	r3, r4, #4
 8012640:	f020 0007 	bic.w	r0, r0, #7
 8012644:	1ac3      	subs	r3, r0, r3
 8012646:	d0d3      	beq.n	80125f0 <_malloc_r+0x20>
 8012648:	425a      	negs	r2, r3
 801264a:	50e2      	str	r2, [r4, r3]
 801264c:	e7d0      	b.n	80125f0 <_malloc_r+0x20>
 801264e:	428c      	cmp	r4, r1
 8012650:	684b      	ldr	r3, [r1, #4]
 8012652:	bf16      	itet	ne
 8012654:	6063      	strne	r3, [r4, #4]
 8012656:	6013      	streq	r3, [r2, #0]
 8012658:	460c      	movne	r4, r1
 801265a:	e7eb      	b.n	8012634 <_malloc_r+0x64>
 801265c:	460c      	mov	r4, r1
 801265e:	6849      	ldr	r1, [r1, #4]
 8012660:	e7cc      	b.n	80125fc <_malloc_r+0x2c>
 8012662:	1cc4      	adds	r4, r0, #3
 8012664:	f024 0403 	bic.w	r4, r4, #3
 8012668:	42a0      	cmp	r0, r4
 801266a:	d005      	beq.n	8012678 <_malloc_r+0xa8>
 801266c:	1a21      	subs	r1, r4, r0
 801266e:	4630      	mov	r0, r6
 8012670:	f000 fad0 	bl	8012c14 <_sbrk_r>
 8012674:	3001      	adds	r0, #1
 8012676:	d0cf      	beq.n	8012618 <_malloc_r+0x48>
 8012678:	6025      	str	r5, [r4, #0]
 801267a:	e7db      	b.n	8012634 <_malloc_r+0x64>
 801267c:	20000658 	.word	0x20000658
 8012680:	2000065c 	.word	0x2000065c

08012684 <__sfputc_r>:
 8012684:	6893      	ldr	r3, [r2, #8]
 8012686:	3b01      	subs	r3, #1
 8012688:	2b00      	cmp	r3, #0
 801268a:	b410      	push	{r4}
 801268c:	6093      	str	r3, [r2, #8]
 801268e:	da08      	bge.n	80126a2 <__sfputc_r+0x1e>
 8012690:	6994      	ldr	r4, [r2, #24]
 8012692:	42a3      	cmp	r3, r4
 8012694:	db01      	blt.n	801269a <__sfputc_r+0x16>
 8012696:	290a      	cmp	r1, #10
 8012698:	d103      	bne.n	80126a2 <__sfputc_r+0x1e>
 801269a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801269e:	f000 bb0d 	b.w	8012cbc <__swbuf_r>
 80126a2:	6813      	ldr	r3, [r2, #0]
 80126a4:	1c58      	adds	r0, r3, #1
 80126a6:	6010      	str	r0, [r2, #0]
 80126a8:	7019      	strb	r1, [r3, #0]
 80126aa:	4608      	mov	r0, r1
 80126ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126b0:	4770      	bx	lr

080126b2 <__sfputs_r>:
 80126b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b4:	4606      	mov	r6, r0
 80126b6:	460f      	mov	r7, r1
 80126b8:	4614      	mov	r4, r2
 80126ba:	18d5      	adds	r5, r2, r3
 80126bc:	42ac      	cmp	r4, r5
 80126be:	d101      	bne.n	80126c4 <__sfputs_r+0x12>
 80126c0:	2000      	movs	r0, #0
 80126c2:	e007      	b.n	80126d4 <__sfputs_r+0x22>
 80126c4:	463a      	mov	r2, r7
 80126c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126ca:	4630      	mov	r0, r6
 80126cc:	f7ff ffda 	bl	8012684 <__sfputc_r>
 80126d0:	1c43      	adds	r3, r0, #1
 80126d2:	d1f3      	bne.n	80126bc <__sfputs_r+0xa>
 80126d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126d8 <_vfiprintf_r>:
 80126d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126dc:	460c      	mov	r4, r1
 80126de:	b09d      	sub	sp, #116	; 0x74
 80126e0:	4617      	mov	r7, r2
 80126e2:	461d      	mov	r5, r3
 80126e4:	4606      	mov	r6, r0
 80126e6:	b118      	cbz	r0, 80126f0 <_vfiprintf_r+0x18>
 80126e8:	6983      	ldr	r3, [r0, #24]
 80126ea:	b90b      	cbnz	r3, 80126f0 <_vfiprintf_r+0x18>
 80126ec:	f7ff fe90 	bl	8012410 <__sinit>
 80126f0:	4b7c      	ldr	r3, [pc, #496]	; (80128e4 <_vfiprintf_r+0x20c>)
 80126f2:	429c      	cmp	r4, r3
 80126f4:	d158      	bne.n	80127a8 <_vfiprintf_r+0xd0>
 80126f6:	6874      	ldr	r4, [r6, #4]
 80126f8:	89a3      	ldrh	r3, [r4, #12]
 80126fa:	0718      	lsls	r0, r3, #28
 80126fc:	d55e      	bpl.n	80127bc <_vfiprintf_r+0xe4>
 80126fe:	6923      	ldr	r3, [r4, #16]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d05b      	beq.n	80127bc <_vfiprintf_r+0xe4>
 8012704:	2300      	movs	r3, #0
 8012706:	9309      	str	r3, [sp, #36]	; 0x24
 8012708:	2320      	movs	r3, #32
 801270a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801270e:	2330      	movs	r3, #48	; 0x30
 8012710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012714:	9503      	str	r5, [sp, #12]
 8012716:	f04f 0b01 	mov.w	fp, #1
 801271a:	46b8      	mov	r8, r7
 801271c:	4645      	mov	r5, r8
 801271e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012722:	b10b      	cbz	r3, 8012728 <_vfiprintf_r+0x50>
 8012724:	2b25      	cmp	r3, #37	; 0x25
 8012726:	d154      	bne.n	80127d2 <_vfiprintf_r+0xfa>
 8012728:	ebb8 0a07 	subs.w	sl, r8, r7
 801272c:	d00b      	beq.n	8012746 <_vfiprintf_r+0x6e>
 801272e:	4653      	mov	r3, sl
 8012730:	463a      	mov	r2, r7
 8012732:	4621      	mov	r1, r4
 8012734:	4630      	mov	r0, r6
 8012736:	f7ff ffbc 	bl	80126b2 <__sfputs_r>
 801273a:	3001      	adds	r0, #1
 801273c:	f000 80c2 	beq.w	80128c4 <_vfiprintf_r+0x1ec>
 8012740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012742:	4453      	add	r3, sl
 8012744:	9309      	str	r3, [sp, #36]	; 0x24
 8012746:	f898 3000 	ldrb.w	r3, [r8]
 801274a:	2b00      	cmp	r3, #0
 801274c:	f000 80ba 	beq.w	80128c4 <_vfiprintf_r+0x1ec>
 8012750:	2300      	movs	r3, #0
 8012752:	f04f 32ff 	mov.w	r2, #4294967295
 8012756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801275a:	9304      	str	r3, [sp, #16]
 801275c:	9307      	str	r3, [sp, #28]
 801275e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012762:	931a      	str	r3, [sp, #104]	; 0x68
 8012764:	46a8      	mov	r8, r5
 8012766:	2205      	movs	r2, #5
 8012768:	f818 1b01 	ldrb.w	r1, [r8], #1
 801276c:	485e      	ldr	r0, [pc, #376]	; (80128e8 <_vfiprintf_r+0x210>)
 801276e:	f7ed fd7f 	bl	8000270 <memchr>
 8012772:	9b04      	ldr	r3, [sp, #16]
 8012774:	bb78      	cbnz	r0, 80127d6 <_vfiprintf_r+0xfe>
 8012776:	06d9      	lsls	r1, r3, #27
 8012778:	bf44      	itt	mi
 801277a:	2220      	movmi	r2, #32
 801277c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012780:	071a      	lsls	r2, r3, #28
 8012782:	bf44      	itt	mi
 8012784:	222b      	movmi	r2, #43	; 0x2b
 8012786:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801278a:	782a      	ldrb	r2, [r5, #0]
 801278c:	2a2a      	cmp	r2, #42	; 0x2a
 801278e:	d02a      	beq.n	80127e6 <_vfiprintf_r+0x10e>
 8012790:	9a07      	ldr	r2, [sp, #28]
 8012792:	46a8      	mov	r8, r5
 8012794:	2000      	movs	r0, #0
 8012796:	250a      	movs	r5, #10
 8012798:	4641      	mov	r1, r8
 801279a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801279e:	3b30      	subs	r3, #48	; 0x30
 80127a0:	2b09      	cmp	r3, #9
 80127a2:	d969      	bls.n	8012878 <_vfiprintf_r+0x1a0>
 80127a4:	b360      	cbz	r0, 8012800 <_vfiprintf_r+0x128>
 80127a6:	e024      	b.n	80127f2 <_vfiprintf_r+0x11a>
 80127a8:	4b50      	ldr	r3, [pc, #320]	; (80128ec <_vfiprintf_r+0x214>)
 80127aa:	429c      	cmp	r4, r3
 80127ac:	d101      	bne.n	80127b2 <_vfiprintf_r+0xda>
 80127ae:	68b4      	ldr	r4, [r6, #8]
 80127b0:	e7a2      	b.n	80126f8 <_vfiprintf_r+0x20>
 80127b2:	4b4f      	ldr	r3, [pc, #316]	; (80128f0 <_vfiprintf_r+0x218>)
 80127b4:	429c      	cmp	r4, r3
 80127b6:	bf08      	it	eq
 80127b8:	68f4      	ldreq	r4, [r6, #12]
 80127ba:	e79d      	b.n	80126f8 <_vfiprintf_r+0x20>
 80127bc:	4621      	mov	r1, r4
 80127be:	4630      	mov	r0, r6
 80127c0:	f000 fae0 	bl	8012d84 <__swsetup_r>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	d09d      	beq.n	8012704 <_vfiprintf_r+0x2c>
 80127c8:	f04f 30ff 	mov.w	r0, #4294967295
 80127cc:	b01d      	add	sp, #116	; 0x74
 80127ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d2:	46a8      	mov	r8, r5
 80127d4:	e7a2      	b.n	801271c <_vfiprintf_r+0x44>
 80127d6:	4a44      	ldr	r2, [pc, #272]	; (80128e8 <_vfiprintf_r+0x210>)
 80127d8:	1a80      	subs	r0, r0, r2
 80127da:	fa0b f000 	lsl.w	r0, fp, r0
 80127de:	4318      	orrs	r0, r3
 80127e0:	9004      	str	r0, [sp, #16]
 80127e2:	4645      	mov	r5, r8
 80127e4:	e7be      	b.n	8012764 <_vfiprintf_r+0x8c>
 80127e6:	9a03      	ldr	r2, [sp, #12]
 80127e8:	1d11      	adds	r1, r2, #4
 80127ea:	6812      	ldr	r2, [r2, #0]
 80127ec:	9103      	str	r1, [sp, #12]
 80127ee:	2a00      	cmp	r2, #0
 80127f0:	db01      	blt.n	80127f6 <_vfiprintf_r+0x11e>
 80127f2:	9207      	str	r2, [sp, #28]
 80127f4:	e004      	b.n	8012800 <_vfiprintf_r+0x128>
 80127f6:	4252      	negs	r2, r2
 80127f8:	f043 0302 	orr.w	r3, r3, #2
 80127fc:	9207      	str	r2, [sp, #28]
 80127fe:	9304      	str	r3, [sp, #16]
 8012800:	f898 3000 	ldrb.w	r3, [r8]
 8012804:	2b2e      	cmp	r3, #46	; 0x2e
 8012806:	d10e      	bne.n	8012826 <_vfiprintf_r+0x14e>
 8012808:	f898 3001 	ldrb.w	r3, [r8, #1]
 801280c:	2b2a      	cmp	r3, #42	; 0x2a
 801280e:	d138      	bne.n	8012882 <_vfiprintf_r+0x1aa>
 8012810:	9b03      	ldr	r3, [sp, #12]
 8012812:	1d1a      	adds	r2, r3, #4
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	9203      	str	r2, [sp, #12]
 8012818:	2b00      	cmp	r3, #0
 801281a:	bfb8      	it	lt
 801281c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012820:	f108 0802 	add.w	r8, r8, #2
 8012824:	9305      	str	r3, [sp, #20]
 8012826:	4d33      	ldr	r5, [pc, #204]	; (80128f4 <_vfiprintf_r+0x21c>)
 8012828:	f898 1000 	ldrb.w	r1, [r8]
 801282c:	2203      	movs	r2, #3
 801282e:	4628      	mov	r0, r5
 8012830:	f7ed fd1e 	bl	8000270 <memchr>
 8012834:	b140      	cbz	r0, 8012848 <_vfiprintf_r+0x170>
 8012836:	2340      	movs	r3, #64	; 0x40
 8012838:	1b40      	subs	r0, r0, r5
 801283a:	fa03 f000 	lsl.w	r0, r3, r0
 801283e:	9b04      	ldr	r3, [sp, #16]
 8012840:	4303      	orrs	r3, r0
 8012842:	f108 0801 	add.w	r8, r8, #1
 8012846:	9304      	str	r3, [sp, #16]
 8012848:	f898 1000 	ldrb.w	r1, [r8]
 801284c:	482a      	ldr	r0, [pc, #168]	; (80128f8 <_vfiprintf_r+0x220>)
 801284e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012852:	2206      	movs	r2, #6
 8012854:	f108 0701 	add.w	r7, r8, #1
 8012858:	f7ed fd0a 	bl	8000270 <memchr>
 801285c:	2800      	cmp	r0, #0
 801285e:	d037      	beq.n	80128d0 <_vfiprintf_r+0x1f8>
 8012860:	4b26      	ldr	r3, [pc, #152]	; (80128fc <_vfiprintf_r+0x224>)
 8012862:	bb1b      	cbnz	r3, 80128ac <_vfiprintf_r+0x1d4>
 8012864:	9b03      	ldr	r3, [sp, #12]
 8012866:	3307      	adds	r3, #7
 8012868:	f023 0307 	bic.w	r3, r3, #7
 801286c:	3308      	adds	r3, #8
 801286e:	9303      	str	r3, [sp, #12]
 8012870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012872:	444b      	add	r3, r9
 8012874:	9309      	str	r3, [sp, #36]	; 0x24
 8012876:	e750      	b.n	801271a <_vfiprintf_r+0x42>
 8012878:	fb05 3202 	mla	r2, r5, r2, r3
 801287c:	2001      	movs	r0, #1
 801287e:	4688      	mov	r8, r1
 8012880:	e78a      	b.n	8012798 <_vfiprintf_r+0xc0>
 8012882:	2300      	movs	r3, #0
 8012884:	f108 0801 	add.w	r8, r8, #1
 8012888:	9305      	str	r3, [sp, #20]
 801288a:	4619      	mov	r1, r3
 801288c:	250a      	movs	r5, #10
 801288e:	4640      	mov	r0, r8
 8012890:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012894:	3a30      	subs	r2, #48	; 0x30
 8012896:	2a09      	cmp	r2, #9
 8012898:	d903      	bls.n	80128a2 <_vfiprintf_r+0x1ca>
 801289a:	2b00      	cmp	r3, #0
 801289c:	d0c3      	beq.n	8012826 <_vfiprintf_r+0x14e>
 801289e:	9105      	str	r1, [sp, #20]
 80128a0:	e7c1      	b.n	8012826 <_vfiprintf_r+0x14e>
 80128a2:	fb05 2101 	mla	r1, r5, r1, r2
 80128a6:	2301      	movs	r3, #1
 80128a8:	4680      	mov	r8, r0
 80128aa:	e7f0      	b.n	801288e <_vfiprintf_r+0x1b6>
 80128ac:	ab03      	add	r3, sp, #12
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	4622      	mov	r2, r4
 80128b2:	4b13      	ldr	r3, [pc, #76]	; (8012900 <_vfiprintf_r+0x228>)
 80128b4:	a904      	add	r1, sp, #16
 80128b6:	4630      	mov	r0, r6
 80128b8:	f3af 8000 	nop.w
 80128bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80128c0:	4681      	mov	r9, r0
 80128c2:	d1d5      	bne.n	8012870 <_vfiprintf_r+0x198>
 80128c4:	89a3      	ldrh	r3, [r4, #12]
 80128c6:	065b      	lsls	r3, r3, #25
 80128c8:	f53f af7e 	bmi.w	80127c8 <_vfiprintf_r+0xf0>
 80128cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80128ce:	e77d      	b.n	80127cc <_vfiprintf_r+0xf4>
 80128d0:	ab03      	add	r3, sp, #12
 80128d2:	9300      	str	r3, [sp, #0]
 80128d4:	4622      	mov	r2, r4
 80128d6:	4b0a      	ldr	r3, [pc, #40]	; (8012900 <_vfiprintf_r+0x228>)
 80128d8:	a904      	add	r1, sp, #16
 80128da:	4630      	mov	r0, r6
 80128dc:	f000 f888 	bl	80129f0 <_printf_i>
 80128e0:	e7ec      	b.n	80128bc <_vfiprintf_r+0x1e4>
 80128e2:	bf00      	nop
 80128e4:	0801e0c8 	.word	0x0801e0c8
 80128e8:	0801e108 	.word	0x0801e108
 80128ec:	0801e0e8 	.word	0x0801e0e8
 80128f0:	0801e0a8 	.word	0x0801e0a8
 80128f4:	0801e10e 	.word	0x0801e10e
 80128f8:	0801e112 	.word	0x0801e112
 80128fc:	00000000 	.word	0x00000000
 8012900:	080126b3 	.word	0x080126b3

08012904 <_printf_common>:
 8012904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012908:	4691      	mov	r9, r2
 801290a:	461f      	mov	r7, r3
 801290c:	688a      	ldr	r2, [r1, #8]
 801290e:	690b      	ldr	r3, [r1, #16]
 8012910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012914:	4293      	cmp	r3, r2
 8012916:	bfb8      	it	lt
 8012918:	4613      	movlt	r3, r2
 801291a:	f8c9 3000 	str.w	r3, [r9]
 801291e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012922:	4606      	mov	r6, r0
 8012924:	460c      	mov	r4, r1
 8012926:	b112      	cbz	r2, 801292e <_printf_common+0x2a>
 8012928:	3301      	adds	r3, #1
 801292a:	f8c9 3000 	str.w	r3, [r9]
 801292e:	6823      	ldr	r3, [r4, #0]
 8012930:	0699      	lsls	r1, r3, #26
 8012932:	bf42      	ittt	mi
 8012934:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012938:	3302      	addmi	r3, #2
 801293a:	f8c9 3000 	strmi.w	r3, [r9]
 801293e:	6825      	ldr	r5, [r4, #0]
 8012940:	f015 0506 	ands.w	r5, r5, #6
 8012944:	d107      	bne.n	8012956 <_printf_common+0x52>
 8012946:	f104 0a19 	add.w	sl, r4, #25
 801294a:	68e3      	ldr	r3, [r4, #12]
 801294c:	f8d9 2000 	ldr.w	r2, [r9]
 8012950:	1a9b      	subs	r3, r3, r2
 8012952:	42ab      	cmp	r3, r5
 8012954:	dc28      	bgt.n	80129a8 <_printf_common+0xa4>
 8012956:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801295a:	6822      	ldr	r2, [r4, #0]
 801295c:	3300      	adds	r3, #0
 801295e:	bf18      	it	ne
 8012960:	2301      	movne	r3, #1
 8012962:	0692      	lsls	r2, r2, #26
 8012964:	d42d      	bmi.n	80129c2 <_printf_common+0xbe>
 8012966:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801296a:	4639      	mov	r1, r7
 801296c:	4630      	mov	r0, r6
 801296e:	47c0      	blx	r8
 8012970:	3001      	adds	r0, #1
 8012972:	d020      	beq.n	80129b6 <_printf_common+0xb2>
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	68e5      	ldr	r5, [r4, #12]
 8012978:	f8d9 2000 	ldr.w	r2, [r9]
 801297c:	f003 0306 	and.w	r3, r3, #6
 8012980:	2b04      	cmp	r3, #4
 8012982:	bf08      	it	eq
 8012984:	1aad      	subeq	r5, r5, r2
 8012986:	68a3      	ldr	r3, [r4, #8]
 8012988:	6922      	ldr	r2, [r4, #16]
 801298a:	bf0c      	ite	eq
 801298c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012990:	2500      	movne	r5, #0
 8012992:	4293      	cmp	r3, r2
 8012994:	bfc4      	itt	gt
 8012996:	1a9b      	subgt	r3, r3, r2
 8012998:	18ed      	addgt	r5, r5, r3
 801299a:	f04f 0900 	mov.w	r9, #0
 801299e:	341a      	adds	r4, #26
 80129a0:	454d      	cmp	r5, r9
 80129a2:	d11a      	bne.n	80129da <_printf_common+0xd6>
 80129a4:	2000      	movs	r0, #0
 80129a6:	e008      	b.n	80129ba <_printf_common+0xb6>
 80129a8:	2301      	movs	r3, #1
 80129aa:	4652      	mov	r2, sl
 80129ac:	4639      	mov	r1, r7
 80129ae:	4630      	mov	r0, r6
 80129b0:	47c0      	blx	r8
 80129b2:	3001      	adds	r0, #1
 80129b4:	d103      	bne.n	80129be <_printf_common+0xba>
 80129b6:	f04f 30ff 	mov.w	r0, #4294967295
 80129ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129be:	3501      	adds	r5, #1
 80129c0:	e7c3      	b.n	801294a <_printf_common+0x46>
 80129c2:	18e1      	adds	r1, r4, r3
 80129c4:	1c5a      	adds	r2, r3, #1
 80129c6:	2030      	movs	r0, #48	; 0x30
 80129c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129cc:	4422      	add	r2, r4
 80129ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129d6:	3302      	adds	r3, #2
 80129d8:	e7c5      	b.n	8012966 <_printf_common+0x62>
 80129da:	2301      	movs	r3, #1
 80129dc:	4622      	mov	r2, r4
 80129de:	4639      	mov	r1, r7
 80129e0:	4630      	mov	r0, r6
 80129e2:	47c0      	blx	r8
 80129e4:	3001      	adds	r0, #1
 80129e6:	d0e6      	beq.n	80129b6 <_printf_common+0xb2>
 80129e8:	f109 0901 	add.w	r9, r9, #1
 80129ec:	e7d8      	b.n	80129a0 <_printf_common+0x9c>
	...

080129f0 <_printf_i>:
 80129f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80129f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80129f8:	460c      	mov	r4, r1
 80129fa:	7e09      	ldrb	r1, [r1, #24]
 80129fc:	b085      	sub	sp, #20
 80129fe:	296e      	cmp	r1, #110	; 0x6e
 8012a00:	4617      	mov	r7, r2
 8012a02:	4606      	mov	r6, r0
 8012a04:	4698      	mov	r8, r3
 8012a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a08:	f000 80b3 	beq.w	8012b72 <_printf_i+0x182>
 8012a0c:	d822      	bhi.n	8012a54 <_printf_i+0x64>
 8012a0e:	2963      	cmp	r1, #99	; 0x63
 8012a10:	d036      	beq.n	8012a80 <_printf_i+0x90>
 8012a12:	d80a      	bhi.n	8012a2a <_printf_i+0x3a>
 8012a14:	2900      	cmp	r1, #0
 8012a16:	f000 80b9 	beq.w	8012b8c <_printf_i+0x19c>
 8012a1a:	2958      	cmp	r1, #88	; 0x58
 8012a1c:	f000 8083 	beq.w	8012b26 <_printf_i+0x136>
 8012a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012a28:	e032      	b.n	8012a90 <_printf_i+0xa0>
 8012a2a:	2964      	cmp	r1, #100	; 0x64
 8012a2c:	d001      	beq.n	8012a32 <_printf_i+0x42>
 8012a2e:	2969      	cmp	r1, #105	; 0x69
 8012a30:	d1f6      	bne.n	8012a20 <_printf_i+0x30>
 8012a32:	6820      	ldr	r0, [r4, #0]
 8012a34:	6813      	ldr	r3, [r2, #0]
 8012a36:	0605      	lsls	r5, r0, #24
 8012a38:	f103 0104 	add.w	r1, r3, #4
 8012a3c:	d52a      	bpl.n	8012a94 <_printf_i+0xa4>
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	6011      	str	r1, [r2, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	da03      	bge.n	8012a4e <_printf_i+0x5e>
 8012a46:	222d      	movs	r2, #45	; 0x2d
 8012a48:	425b      	negs	r3, r3
 8012a4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012a4e:	486f      	ldr	r0, [pc, #444]	; (8012c0c <_printf_i+0x21c>)
 8012a50:	220a      	movs	r2, #10
 8012a52:	e039      	b.n	8012ac8 <_printf_i+0xd8>
 8012a54:	2973      	cmp	r1, #115	; 0x73
 8012a56:	f000 809d 	beq.w	8012b94 <_printf_i+0x1a4>
 8012a5a:	d808      	bhi.n	8012a6e <_printf_i+0x7e>
 8012a5c:	296f      	cmp	r1, #111	; 0x6f
 8012a5e:	d020      	beq.n	8012aa2 <_printf_i+0xb2>
 8012a60:	2970      	cmp	r1, #112	; 0x70
 8012a62:	d1dd      	bne.n	8012a20 <_printf_i+0x30>
 8012a64:	6823      	ldr	r3, [r4, #0]
 8012a66:	f043 0320 	orr.w	r3, r3, #32
 8012a6a:	6023      	str	r3, [r4, #0]
 8012a6c:	e003      	b.n	8012a76 <_printf_i+0x86>
 8012a6e:	2975      	cmp	r1, #117	; 0x75
 8012a70:	d017      	beq.n	8012aa2 <_printf_i+0xb2>
 8012a72:	2978      	cmp	r1, #120	; 0x78
 8012a74:	d1d4      	bne.n	8012a20 <_printf_i+0x30>
 8012a76:	2378      	movs	r3, #120	; 0x78
 8012a78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a7c:	4864      	ldr	r0, [pc, #400]	; (8012c10 <_printf_i+0x220>)
 8012a7e:	e055      	b.n	8012b2c <_printf_i+0x13c>
 8012a80:	6813      	ldr	r3, [r2, #0]
 8012a82:	1d19      	adds	r1, r3, #4
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	6011      	str	r1, [r2, #0]
 8012a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a90:	2301      	movs	r3, #1
 8012a92:	e08c      	b.n	8012bae <_printf_i+0x1be>
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	6011      	str	r1, [r2, #0]
 8012a98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a9c:	bf18      	it	ne
 8012a9e:	b21b      	sxthne	r3, r3
 8012aa0:	e7cf      	b.n	8012a42 <_printf_i+0x52>
 8012aa2:	6813      	ldr	r3, [r2, #0]
 8012aa4:	6825      	ldr	r5, [r4, #0]
 8012aa6:	1d18      	adds	r0, r3, #4
 8012aa8:	6010      	str	r0, [r2, #0]
 8012aaa:	0628      	lsls	r0, r5, #24
 8012aac:	d501      	bpl.n	8012ab2 <_printf_i+0xc2>
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	e002      	b.n	8012ab8 <_printf_i+0xc8>
 8012ab2:	0668      	lsls	r0, r5, #25
 8012ab4:	d5fb      	bpl.n	8012aae <_printf_i+0xbe>
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	4854      	ldr	r0, [pc, #336]	; (8012c0c <_printf_i+0x21c>)
 8012aba:	296f      	cmp	r1, #111	; 0x6f
 8012abc:	bf14      	ite	ne
 8012abe:	220a      	movne	r2, #10
 8012ac0:	2208      	moveq	r2, #8
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ac8:	6865      	ldr	r5, [r4, #4]
 8012aca:	60a5      	str	r5, [r4, #8]
 8012acc:	2d00      	cmp	r5, #0
 8012ace:	f2c0 8095 	blt.w	8012bfc <_printf_i+0x20c>
 8012ad2:	6821      	ldr	r1, [r4, #0]
 8012ad4:	f021 0104 	bic.w	r1, r1, #4
 8012ad8:	6021      	str	r1, [r4, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d13d      	bne.n	8012b5a <_printf_i+0x16a>
 8012ade:	2d00      	cmp	r5, #0
 8012ae0:	f040 808e 	bne.w	8012c00 <_printf_i+0x210>
 8012ae4:	4665      	mov	r5, ip
 8012ae6:	2a08      	cmp	r2, #8
 8012ae8:	d10b      	bne.n	8012b02 <_printf_i+0x112>
 8012aea:	6823      	ldr	r3, [r4, #0]
 8012aec:	07db      	lsls	r3, r3, #31
 8012aee:	d508      	bpl.n	8012b02 <_printf_i+0x112>
 8012af0:	6923      	ldr	r3, [r4, #16]
 8012af2:	6862      	ldr	r2, [r4, #4]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	bfde      	ittt	le
 8012af8:	2330      	movle	r3, #48	; 0x30
 8012afa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012afe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b02:	ebac 0305 	sub.w	r3, ip, r5
 8012b06:	6123      	str	r3, [r4, #16]
 8012b08:	f8cd 8000 	str.w	r8, [sp]
 8012b0c:	463b      	mov	r3, r7
 8012b0e:	aa03      	add	r2, sp, #12
 8012b10:	4621      	mov	r1, r4
 8012b12:	4630      	mov	r0, r6
 8012b14:	f7ff fef6 	bl	8012904 <_printf_common>
 8012b18:	3001      	adds	r0, #1
 8012b1a:	d14d      	bne.n	8012bb8 <_printf_i+0x1c8>
 8012b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b20:	b005      	add	sp, #20
 8012b22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b26:	4839      	ldr	r0, [pc, #228]	; (8012c0c <_printf_i+0x21c>)
 8012b28:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012b2c:	6813      	ldr	r3, [r2, #0]
 8012b2e:	6821      	ldr	r1, [r4, #0]
 8012b30:	1d1d      	adds	r5, r3, #4
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	6015      	str	r5, [r2, #0]
 8012b36:	060a      	lsls	r2, r1, #24
 8012b38:	d50b      	bpl.n	8012b52 <_printf_i+0x162>
 8012b3a:	07ca      	lsls	r2, r1, #31
 8012b3c:	bf44      	itt	mi
 8012b3e:	f041 0120 	orrmi.w	r1, r1, #32
 8012b42:	6021      	strmi	r1, [r4, #0]
 8012b44:	b91b      	cbnz	r3, 8012b4e <_printf_i+0x15e>
 8012b46:	6822      	ldr	r2, [r4, #0]
 8012b48:	f022 0220 	bic.w	r2, r2, #32
 8012b4c:	6022      	str	r2, [r4, #0]
 8012b4e:	2210      	movs	r2, #16
 8012b50:	e7b7      	b.n	8012ac2 <_printf_i+0xd2>
 8012b52:	064d      	lsls	r5, r1, #25
 8012b54:	bf48      	it	mi
 8012b56:	b29b      	uxthmi	r3, r3
 8012b58:	e7ef      	b.n	8012b3a <_printf_i+0x14a>
 8012b5a:	4665      	mov	r5, ip
 8012b5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012b60:	fb02 3311 	mls	r3, r2, r1, r3
 8012b64:	5cc3      	ldrb	r3, [r0, r3]
 8012b66:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012b6a:	460b      	mov	r3, r1
 8012b6c:	2900      	cmp	r1, #0
 8012b6e:	d1f5      	bne.n	8012b5c <_printf_i+0x16c>
 8012b70:	e7b9      	b.n	8012ae6 <_printf_i+0xf6>
 8012b72:	6813      	ldr	r3, [r2, #0]
 8012b74:	6825      	ldr	r5, [r4, #0]
 8012b76:	6961      	ldr	r1, [r4, #20]
 8012b78:	1d18      	adds	r0, r3, #4
 8012b7a:	6010      	str	r0, [r2, #0]
 8012b7c:	0628      	lsls	r0, r5, #24
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	d501      	bpl.n	8012b86 <_printf_i+0x196>
 8012b82:	6019      	str	r1, [r3, #0]
 8012b84:	e002      	b.n	8012b8c <_printf_i+0x19c>
 8012b86:	066a      	lsls	r2, r5, #25
 8012b88:	d5fb      	bpl.n	8012b82 <_printf_i+0x192>
 8012b8a:	8019      	strh	r1, [r3, #0]
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	6123      	str	r3, [r4, #16]
 8012b90:	4665      	mov	r5, ip
 8012b92:	e7b9      	b.n	8012b08 <_printf_i+0x118>
 8012b94:	6813      	ldr	r3, [r2, #0]
 8012b96:	1d19      	adds	r1, r3, #4
 8012b98:	6011      	str	r1, [r2, #0]
 8012b9a:	681d      	ldr	r5, [r3, #0]
 8012b9c:	6862      	ldr	r2, [r4, #4]
 8012b9e:	2100      	movs	r1, #0
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f7ed fb65 	bl	8000270 <memchr>
 8012ba6:	b108      	cbz	r0, 8012bac <_printf_i+0x1bc>
 8012ba8:	1b40      	subs	r0, r0, r5
 8012baa:	6060      	str	r0, [r4, #4]
 8012bac:	6863      	ldr	r3, [r4, #4]
 8012bae:	6123      	str	r3, [r4, #16]
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bb6:	e7a7      	b.n	8012b08 <_printf_i+0x118>
 8012bb8:	6923      	ldr	r3, [r4, #16]
 8012bba:	462a      	mov	r2, r5
 8012bbc:	4639      	mov	r1, r7
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	47c0      	blx	r8
 8012bc2:	3001      	adds	r0, #1
 8012bc4:	d0aa      	beq.n	8012b1c <_printf_i+0x12c>
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	079b      	lsls	r3, r3, #30
 8012bca:	d413      	bmi.n	8012bf4 <_printf_i+0x204>
 8012bcc:	68e0      	ldr	r0, [r4, #12]
 8012bce:	9b03      	ldr	r3, [sp, #12]
 8012bd0:	4298      	cmp	r0, r3
 8012bd2:	bfb8      	it	lt
 8012bd4:	4618      	movlt	r0, r3
 8012bd6:	e7a3      	b.n	8012b20 <_printf_i+0x130>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	464a      	mov	r2, r9
 8012bdc:	4639      	mov	r1, r7
 8012bde:	4630      	mov	r0, r6
 8012be0:	47c0      	blx	r8
 8012be2:	3001      	adds	r0, #1
 8012be4:	d09a      	beq.n	8012b1c <_printf_i+0x12c>
 8012be6:	3501      	adds	r5, #1
 8012be8:	68e3      	ldr	r3, [r4, #12]
 8012bea:	9a03      	ldr	r2, [sp, #12]
 8012bec:	1a9b      	subs	r3, r3, r2
 8012bee:	42ab      	cmp	r3, r5
 8012bf0:	dcf2      	bgt.n	8012bd8 <_printf_i+0x1e8>
 8012bf2:	e7eb      	b.n	8012bcc <_printf_i+0x1dc>
 8012bf4:	2500      	movs	r5, #0
 8012bf6:	f104 0919 	add.w	r9, r4, #25
 8012bfa:	e7f5      	b.n	8012be8 <_printf_i+0x1f8>
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d1ac      	bne.n	8012b5a <_printf_i+0x16a>
 8012c00:	7803      	ldrb	r3, [r0, #0]
 8012c02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c0a:	e76c      	b.n	8012ae6 <_printf_i+0xf6>
 8012c0c:	0801e119 	.word	0x0801e119
 8012c10:	0801e12a 	.word	0x0801e12a

08012c14 <_sbrk_r>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	4c06      	ldr	r4, [pc, #24]	; (8012c30 <_sbrk_r+0x1c>)
 8012c18:	2300      	movs	r3, #0
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	4608      	mov	r0, r1
 8012c1e:	6023      	str	r3, [r4, #0]
 8012c20:	f7ee f808 	bl	8000c34 <_sbrk>
 8012c24:	1c43      	adds	r3, r0, #1
 8012c26:	d102      	bne.n	8012c2e <_sbrk_r+0x1a>
 8012c28:	6823      	ldr	r3, [r4, #0]
 8012c2a:	b103      	cbz	r3, 8012c2e <_sbrk_r+0x1a>
 8012c2c:	602b      	str	r3, [r5, #0]
 8012c2e:	bd38      	pop	{r3, r4, r5, pc}
 8012c30:	200071b8 	.word	0x200071b8

08012c34 <__sread>:
 8012c34:	b510      	push	{r4, lr}
 8012c36:	460c      	mov	r4, r1
 8012c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c3c:	f000 fa48 	bl	80130d0 <_read_r>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	bfab      	itete	ge
 8012c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c46:	89a3      	ldrhlt	r3, [r4, #12]
 8012c48:	181b      	addge	r3, r3, r0
 8012c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c4e:	bfac      	ite	ge
 8012c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c52:	81a3      	strhlt	r3, [r4, #12]
 8012c54:	bd10      	pop	{r4, pc}

08012c56 <__swrite>:
 8012c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c5a:	461f      	mov	r7, r3
 8012c5c:	898b      	ldrh	r3, [r1, #12]
 8012c5e:	05db      	lsls	r3, r3, #23
 8012c60:	4605      	mov	r5, r0
 8012c62:	460c      	mov	r4, r1
 8012c64:	4616      	mov	r6, r2
 8012c66:	d505      	bpl.n	8012c74 <__swrite+0x1e>
 8012c68:	2302      	movs	r3, #2
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c70:	f000 f9b6 	bl	8012fe0 <_lseek_r>
 8012c74:	89a3      	ldrh	r3, [r4, #12]
 8012c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012c7e:	81a3      	strh	r3, [r4, #12]
 8012c80:	4632      	mov	r2, r6
 8012c82:	463b      	mov	r3, r7
 8012c84:	4628      	mov	r0, r5
 8012c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c8a:	f000 b869 	b.w	8012d60 <_write_r>

08012c8e <__sseek>:
 8012c8e:	b510      	push	{r4, lr}
 8012c90:	460c      	mov	r4, r1
 8012c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c96:	f000 f9a3 	bl	8012fe0 <_lseek_r>
 8012c9a:	1c43      	adds	r3, r0, #1
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	bf15      	itete	ne
 8012ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012caa:	81a3      	strheq	r3, [r4, #12]
 8012cac:	bf18      	it	ne
 8012cae:	81a3      	strhne	r3, [r4, #12]
 8012cb0:	bd10      	pop	{r4, pc}

08012cb2 <__sclose>:
 8012cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cb6:	f000 b8d3 	b.w	8012e60 <_close_r>
	...

08012cbc <__swbuf_r>:
 8012cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cbe:	460e      	mov	r6, r1
 8012cc0:	4614      	mov	r4, r2
 8012cc2:	4605      	mov	r5, r0
 8012cc4:	b118      	cbz	r0, 8012cce <__swbuf_r+0x12>
 8012cc6:	6983      	ldr	r3, [r0, #24]
 8012cc8:	b90b      	cbnz	r3, 8012cce <__swbuf_r+0x12>
 8012cca:	f7ff fba1 	bl	8012410 <__sinit>
 8012cce:	4b21      	ldr	r3, [pc, #132]	; (8012d54 <__swbuf_r+0x98>)
 8012cd0:	429c      	cmp	r4, r3
 8012cd2:	d12a      	bne.n	8012d2a <__swbuf_r+0x6e>
 8012cd4:	686c      	ldr	r4, [r5, #4]
 8012cd6:	69a3      	ldr	r3, [r4, #24]
 8012cd8:	60a3      	str	r3, [r4, #8]
 8012cda:	89a3      	ldrh	r3, [r4, #12]
 8012cdc:	071a      	lsls	r2, r3, #28
 8012cde:	d52e      	bpl.n	8012d3e <__swbuf_r+0x82>
 8012ce0:	6923      	ldr	r3, [r4, #16]
 8012ce2:	b363      	cbz	r3, 8012d3e <__swbuf_r+0x82>
 8012ce4:	6923      	ldr	r3, [r4, #16]
 8012ce6:	6820      	ldr	r0, [r4, #0]
 8012ce8:	1ac0      	subs	r0, r0, r3
 8012cea:	6963      	ldr	r3, [r4, #20]
 8012cec:	b2f6      	uxtb	r6, r6
 8012cee:	4283      	cmp	r3, r0
 8012cf0:	4637      	mov	r7, r6
 8012cf2:	dc04      	bgt.n	8012cfe <__swbuf_r+0x42>
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 f948 	bl	8012f8c <_fflush_r>
 8012cfc:	bb28      	cbnz	r0, 8012d4a <__swbuf_r+0x8e>
 8012cfe:	68a3      	ldr	r3, [r4, #8]
 8012d00:	3b01      	subs	r3, #1
 8012d02:	60a3      	str	r3, [r4, #8]
 8012d04:	6823      	ldr	r3, [r4, #0]
 8012d06:	1c5a      	adds	r2, r3, #1
 8012d08:	6022      	str	r2, [r4, #0]
 8012d0a:	701e      	strb	r6, [r3, #0]
 8012d0c:	6963      	ldr	r3, [r4, #20]
 8012d0e:	3001      	adds	r0, #1
 8012d10:	4283      	cmp	r3, r0
 8012d12:	d004      	beq.n	8012d1e <__swbuf_r+0x62>
 8012d14:	89a3      	ldrh	r3, [r4, #12]
 8012d16:	07db      	lsls	r3, r3, #31
 8012d18:	d519      	bpl.n	8012d4e <__swbuf_r+0x92>
 8012d1a:	2e0a      	cmp	r6, #10
 8012d1c:	d117      	bne.n	8012d4e <__swbuf_r+0x92>
 8012d1e:	4621      	mov	r1, r4
 8012d20:	4628      	mov	r0, r5
 8012d22:	f000 f933 	bl	8012f8c <_fflush_r>
 8012d26:	b190      	cbz	r0, 8012d4e <__swbuf_r+0x92>
 8012d28:	e00f      	b.n	8012d4a <__swbuf_r+0x8e>
 8012d2a:	4b0b      	ldr	r3, [pc, #44]	; (8012d58 <__swbuf_r+0x9c>)
 8012d2c:	429c      	cmp	r4, r3
 8012d2e:	d101      	bne.n	8012d34 <__swbuf_r+0x78>
 8012d30:	68ac      	ldr	r4, [r5, #8]
 8012d32:	e7d0      	b.n	8012cd6 <__swbuf_r+0x1a>
 8012d34:	4b09      	ldr	r3, [pc, #36]	; (8012d5c <__swbuf_r+0xa0>)
 8012d36:	429c      	cmp	r4, r3
 8012d38:	bf08      	it	eq
 8012d3a:	68ec      	ldreq	r4, [r5, #12]
 8012d3c:	e7cb      	b.n	8012cd6 <__swbuf_r+0x1a>
 8012d3e:	4621      	mov	r1, r4
 8012d40:	4628      	mov	r0, r5
 8012d42:	f000 f81f 	bl	8012d84 <__swsetup_r>
 8012d46:	2800      	cmp	r0, #0
 8012d48:	d0cc      	beq.n	8012ce4 <__swbuf_r+0x28>
 8012d4a:	f04f 37ff 	mov.w	r7, #4294967295
 8012d4e:	4638      	mov	r0, r7
 8012d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d52:	bf00      	nop
 8012d54:	0801e0c8 	.word	0x0801e0c8
 8012d58:	0801e0e8 	.word	0x0801e0e8
 8012d5c:	0801e0a8 	.word	0x0801e0a8

08012d60 <_write_r>:
 8012d60:	b538      	push	{r3, r4, r5, lr}
 8012d62:	4c07      	ldr	r4, [pc, #28]	; (8012d80 <_write_r+0x20>)
 8012d64:	4605      	mov	r5, r0
 8012d66:	4608      	mov	r0, r1
 8012d68:	4611      	mov	r1, r2
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	6022      	str	r2, [r4, #0]
 8012d6e:	461a      	mov	r2, r3
 8012d70:	f7ed ff0f 	bl	8000b92 <_write>
 8012d74:	1c43      	adds	r3, r0, #1
 8012d76:	d102      	bne.n	8012d7e <_write_r+0x1e>
 8012d78:	6823      	ldr	r3, [r4, #0]
 8012d7a:	b103      	cbz	r3, 8012d7e <_write_r+0x1e>
 8012d7c:	602b      	str	r3, [r5, #0]
 8012d7e:	bd38      	pop	{r3, r4, r5, pc}
 8012d80:	200071b8 	.word	0x200071b8

08012d84 <__swsetup_r>:
 8012d84:	4b32      	ldr	r3, [pc, #200]	; (8012e50 <__swsetup_r+0xcc>)
 8012d86:	b570      	push	{r4, r5, r6, lr}
 8012d88:	681d      	ldr	r5, [r3, #0]
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	b125      	cbz	r5, 8012d9a <__swsetup_r+0x16>
 8012d90:	69ab      	ldr	r3, [r5, #24]
 8012d92:	b913      	cbnz	r3, 8012d9a <__swsetup_r+0x16>
 8012d94:	4628      	mov	r0, r5
 8012d96:	f7ff fb3b 	bl	8012410 <__sinit>
 8012d9a:	4b2e      	ldr	r3, [pc, #184]	; (8012e54 <__swsetup_r+0xd0>)
 8012d9c:	429c      	cmp	r4, r3
 8012d9e:	d10f      	bne.n	8012dc0 <__swsetup_r+0x3c>
 8012da0:	686c      	ldr	r4, [r5, #4]
 8012da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	0715      	lsls	r5, r2, #28
 8012daa:	d42c      	bmi.n	8012e06 <__swsetup_r+0x82>
 8012dac:	06d0      	lsls	r0, r2, #27
 8012dae:	d411      	bmi.n	8012dd4 <__swsetup_r+0x50>
 8012db0:	2209      	movs	r2, #9
 8012db2:	6032      	str	r2, [r6, #0]
 8012db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012db8:	81a3      	strh	r3, [r4, #12]
 8012dba:	f04f 30ff 	mov.w	r0, #4294967295
 8012dbe:	e03e      	b.n	8012e3e <__swsetup_r+0xba>
 8012dc0:	4b25      	ldr	r3, [pc, #148]	; (8012e58 <__swsetup_r+0xd4>)
 8012dc2:	429c      	cmp	r4, r3
 8012dc4:	d101      	bne.n	8012dca <__swsetup_r+0x46>
 8012dc6:	68ac      	ldr	r4, [r5, #8]
 8012dc8:	e7eb      	b.n	8012da2 <__swsetup_r+0x1e>
 8012dca:	4b24      	ldr	r3, [pc, #144]	; (8012e5c <__swsetup_r+0xd8>)
 8012dcc:	429c      	cmp	r4, r3
 8012dce:	bf08      	it	eq
 8012dd0:	68ec      	ldreq	r4, [r5, #12]
 8012dd2:	e7e6      	b.n	8012da2 <__swsetup_r+0x1e>
 8012dd4:	0751      	lsls	r1, r2, #29
 8012dd6:	d512      	bpl.n	8012dfe <__swsetup_r+0x7a>
 8012dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dda:	b141      	cbz	r1, 8012dee <__swsetup_r+0x6a>
 8012ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012de0:	4299      	cmp	r1, r3
 8012de2:	d002      	beq.n	8012dea <__swsetup_r+0x66>
 8012de4:	4630      	mov	r0, r6
 8012de6:	f7ff fba5 	bl	8012534 <_free_r>
 8012dea:	2300      	movs	r3, #0
 8012dec:	6363      	str	r3, [r4, #52]	; 0x34
 8012dee:	89a3      	ldrh	r3, [r4, #12]
 8012df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012df4:	81a3      	strh	r3, [r4, #12]
 8012df6:	2300      	movs	r3, #0
 8012df8:	6063      	str	r3, [r4, #4]
 8012dfa:	6923      	ldr	r3, [r4, #16]
 8012dfc:	6023      	str	r3, [r4, #0]
 8012dfe:	89a3      	ldrh	r3, [r4, #12]
 8012e00:	f043 0308 	orr.w	r3, r3, #8
 8012e04:	81a3      	strh	r3, [r4, #12]
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	b94b      	cbnz	r3, 8012e1e <__swsetup_r+0x9a>
 8012e0a:	89a3      	ldrh	r3, [r4, #12]
 8012e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e14:	d003      	beq.n	8012e1e <__swsetup_r+0x9a>
 8012e16:	4621      	mov	r1, r4
 8012e18:	4630      	mov	r0, r6
 8012e1a:	f000 f917 	bl	801304c <__smakebuf_r>
 8012e1e:	89a2      	ldrh	r2, [r4, #12]
 8012e20:	f012 0301 	ands.w	r3, r2, #1
 8012e24:	d00c      	beq.n	8012e40 <__swsetup_r+0xbc>
 8012e26:	2300      	movs	r3, #0
 8012e28:	60a3      	str	r3, [r4, #8]
 8012e2a:	6963      	ldr	r3, [r4, #20]
 8012e2c:	425b      	negs	r3, r3
 8012e2e:	61a3      	str	r3, [r4, #24]
 8012e30:	6923      	ldr	r3, [r4, #16]
 8012e32:	b953      	cbnz	r3, 8012e4a <__swsetup_r+0xc6>
 8012e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e38:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012e3c:	d1ba      	bne.n	8012db4 <__swsetup_r+0x30>
 8012e3e:	bd70      	pop	{r4, r5, r6, pc}
 8012e40:	0792      	lsls	r2, r2, #30
 8012e42:	bf58      	it	pl
 8012e44:	6963      	ldrpl	r3, [r4, #20]
 8012e46:	60a3      	str	r3, [r4, #8]
 8012e48:	e7f2      	b.n	8012e30 <__swsetup_r+0xac>
 8012e4a:	2000      	movs	r0, #0
 8012e4c:	e7f7      	b.n	8012e3e <__swsetup_r+0xba>
 8012e4e:	bf00      	nop
 8012e50:	20000018 	.word	0x20000018
 8012e54:	0801e0c8 	.word	0x0801e0c8
 8012e58:	0801e0e8 	.word	0x0801e0e8
 8012e5c:	0801e0a8 	.word	0x0801e0a8

08012e60 <_close_r>:
 8012e60:	b538      	push	{r3, r4, r5, lr}
 8012e62:	4c06      	ldr	r4, [pc, #24]	; (8012e7c <_close_r+0x1c>)
 8012e64:	2300      	movs	r3, #0
 8012e66:	4605      	mov	r5, r0
 8012e68:	4608      	mov	r0, r1
 8012e6a:	6023      	str	r3, [r4, #0]
 8012e6c:	f7ed fead 	bl	8000bca <_close>
 8012e70:	1c43      	adds	r3, r0, #1
 8012e72:	d102      	bne.n	8012e7a <_close_r+0x1a>
 8012e74:	6823      	ldr	r3, [r4, #0]
 8012e76:	b103      	cbz	r3, 8012e7a <_close_r+0x1a>
 8012e78:	602b      	str	r3, [r5, #0]
 8012e7a:	bd38      	pop	{r3, r4, r5, pc}
 8012e7c:	200071b8 	.word	0x200071b8

08012e80 <__sflush_r>:
 8012e80:	898a      	ldrh	r2, [r1, #12]
 8012e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e86:	4605      	mov	r5, r0
 8012e88:	0710      	lsls	r0, r2, #28
 8012e8a:	460c      	mov	r4, r1
 8012e8c:	d458      	bmi.n	8012f40 <__sflush_r+0xc0>
 8012e8e:	684b      	ldr	r3, [r1, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	dc05      	bgt.n	8012ea0 <__sflush_r+0x20>
 8012e94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	dc02      	bgt.n	8012ea0 <__sflush_r+0x20>
 8012e9a:	2000      	movs	r0, #0
 8012e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ea2:	2e00      	cmp	r6, #0
 8012ea4:	d0f9      	beq.n	8012e9a <__sflush_r+0x1a>
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012eac:	682f      	ldr	r7, [r5, #0]
 8012eae:	6a21      	ldr	r1, [r4, #32]
 8012eb0:	602b      	str	r3, [r5, #0]
 8012eb2:	d032      	beq.n	8012f1a <__sflush_r+0x9a>
 8012eb4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012eb6:	89a3      	ldrh	r3, [r4, #12]
 8012eb8:	075a      	lsls	r2, r3, #29
 8012eba:	d505      	bpl.n	8012ec8 <__sflush_r+0x48>
 8012ebc:	6863      	ldr	r3, [r4, #4]
 8012ebe:	1ac0      	subs	r0, r0, r3
 8012ec0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ec2:	b10b      	cbz	r3, 8012ec8 <__sflush_r+0x48>
 8012ec4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ec6:	1ac0      	subs	r0, r0, r3
 8012ec8:	2300      	movs	r3, #0
 8012eca:	4602      	mov	r2, r0
 8012ecc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ece:	6a21      	ldr	r1, [r4, #32]
 8012ed0:	4628      	mov	r0, r5
 8012ed2:	47b0      	blx	r6
 8012ed4:	1c43      	adds	r3, r0, #1
 8012ed6:	89a3      	ldrh	r3, [r4, #12]
 8012ed8:	d106      	bne.n	8012ee8 <__sflush_r+0x68>
 8012eda:	6829      	ldr	r1, [r5, #0]
 8012edc:	291d      	cmp	r1, #29
 8012ede:	d848      	bhi.n	8012f72 <__sflush_r+0xf2>
 8012ee0:	4a29      	ldr	r2, [pc, #164]	; (8012f88 <__sflush_r+0x108>)
 8012ee2:	40ca      	lsrs	r2, r1
 8012ee4:	07d6      	lsls	r6, r2, #31
 8012ee6:	d544      	bpl.n	8012f72 <__sflush_r+0xf2>
 8012ee8:	2200      	movs	r2, #0
 8012eea:	6062      	str	r2, [r4, #4]
 8012eec:	04d9      	lsls	r1, r3, #19
 8012eee:	6922      	ldr	r2, [r4, #16]
 8012ef0:	6022      	str	r2, [r4, #0]
 8012ef2:	d504      	bpl.n	8012efe <__sflush_r+0x7e>
 8012ef4:	1c42      	adds	r2, r0, #1
 8012ef6:	d101      	bne.n	8012efc <__sflush_r+0x7c>
 8012ef8:	682b      	ldr	r3, [r5, #0]
 8012efa:	b903      	cbnz	r3, 8012efe <__sflush_r+0x7e>
 8012efc:	6560      	str	r0, [r4, #84]	; 0x54
 8012efe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f00:	602f      	str	r7, [r5, #0]
 8012f02:	2900      	cmp	r1, #0
 8012f04:	d0c9      	beq.n	8012e9a <__sflush_r+0x1a>
 8012f06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f0a:	4299      	cmp	r1, r3
 8012f0c:	d002      	beq.n	8012f14 <__sflush_r+0x94>
 8012f0e:	4628      	mov	r0, r5
 8012f10:	f7ff fb10 	bl	8012534 <_free_r>
 8012f14:	2000      	movs	r0, #0
 8012f16:	6360      	str	r0, [r4, #52]	; 0x34
 8012f18:	e7c0      	b.n	8012e9c <__sflush_r+0x1c>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	47b0      	blx	r6
 8012f20:	1c41      	adds	r1, r0, #1
 8012f22:	d1c8      	bne.n	8012eb6 <__sflush_r+0x36>
 8012f24:	682b      	ldr	r3, [r5, #0]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d0c5      	beq.n	8012eb6 <__sflush_r+0x36>
 8012f2a:	2b1d      	cmp	r3, #29
 8012f2c:	d001      	beq.n	8012f32 <__sflush_r+0xb2>
 8012f2e:	2b16      	cmp	r3, #22
 8012f30:	d101      	bne.n	8012f36 <__sflush_r+0xb6>
 8012f32:	602f      	str	r7, [r5, #0]
 8012f34:	e7b1      	b.n	8012e9a <__sflush_r+0x1a>
 8012f36:	89a3      	ldrh	r3, [r4, #12]
 8012f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f3c:	81a3      	strh	r3, [r4, #12]
 8012f3e:	e7ad      	b.n	8012e9c <__sflush_r+0x1c>
 8012f40:	690f      	ldr	r7, [r1, #16]
 8012f42:	2f00      	cmp	r7, #0
 8012f44:	d0a9      	beq.n	8012e9a <__sflush_r+0x1a>
 8012f46:	0793      	lsls	r3, r2, #30
 8012f48:	680e      	ldr	r6, [r1, #0]
 8012f4a:	bf08      	it	eq
 8012f4c:	694b      	ldreq	r3, [r1, #20]
 8012f4e:	600f      	str	r7, [r1, #0]
 8012f50:	bf18      	it	ne
 8012f52:	2300      	movne	r3, #0
 8012f54:	eba6 0807 	sub.w	r8, r6, r7
 8012f58:	608b      	str	r3, [r1, #8]
 8012f5a:	f1b8 0f00 	cmp.w	r8, #0
 8012f5e:	dd9c      	ble.n	8012e9a <__sflush_r+0x1a>
 8012f60:	4643      	mov	r3, r8
 8012f62:	463a      	mov	r2, r7
 8012f64:	6a21      	ldr	r1, [r4, #32]
 8012f66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f68:	4628      	mov	r0, r5
 8012f6a:	47b0      	blx	r6
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	dc06      	bgt.n	8012f7e <__sflush_r+0xfe>
 8012f70:	89a3      	ldrh	r3, [r4, #12]
 8012f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f76:	81a3      	strh	r3, [r4, #12]
 8012f78:	f04f 30ff 	mov.w	r0, #4294967295
 8012f7c:	e78e      	b.n	8012e9c <__sflush_r+0x1c>
 8012f7e:	4407      	add	r7, r0
 8012f80:	eba8 0800 	sub.w	r8, r8, r0
 8012f84:	e7e9      	b.n	8012f5a <__sflush_r+0xda>
 8012f86:	bf00      	nop
 8012f88:	20400001 	.word	0x20400001

08012f8c <_fflush_r>:
 8012f8c:	b538      	push	{r3, r4, r5, lr}
 8012f8e:	690b      	ldr	r3, [r1, #16]
 8012f90:	4605      	mov	r5, r0
 8012f92:	460c      	mov	r4, r1
 8012f94:	b1db      	cbz	r3, 8012fce <_fflush_r+0x42>
 8012f96:	b118      	cbz	r0, 8012fa0 <_fflush_r+0x14>
 8012f98:	6983      	ldr	r3, [r0, #24]
 8012f9a:	b90b      	cbnz	r3, 8012fa0 <_fflush_r+0x14>
 8012f9c:	f7ff fa38 	bl	8012410 <__sinit>
 8012fa0:	4b0c      	ldr	r3, [pc, #48]	; (8012fd4 <_fflush_r+0x48>)
 8012fa2:	429c      	cmp	r4, r3
 8012fa4:	d109      	bne.n	8012fba <_fflush_r+0x2e>
 8012fa6:	686c      	ldr	r4, [r5, #4]
 8012fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012fac:	b17b      	cbz	r3, 8012fce <_fflush_r+0x42>
 8012fae:	4621      	mov	r1, r4
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fb6:	f7ff bf63 	b.w	8012e80 <__sflush_r>
 8012fba:	4b07      	ldr	r3, [pc, #28]	; (8012fd8 <_fflush_r+0x4c>)
 8012fbc:	429c      	cmp	r4, r3
 8012fbe:	d101      	bne.n	8012fc4 <_fflush_r+0x38>
 8012fc0:	68ac      	ldr	r4, [r5, #8]
 8012fc2:	e7f1      	b.n	8012fa8 <_fflush_r+0x1c>
 8012fc4:	4b05      	ldr	r3, [pc, #20]	; (8012fdc <_fflush_r+0x50>)
 8012fc6:	429c      	cmp	r4, r3
 8012fc8:	bf08      	it	eq
 8012fca:	68ec      	ldreq	r4, [r5, #12]
 8012fcc:	e7ec      	b.n	8012fa8 <_fflush_r+0x1c>
 8012fce:	2000      	movs	r0, #0
 8012fd0:	bd38      	pop	{r3, r4, r5, pc}
 8012fd2:	bf00      	nop
 8012fd4:	0801e0c8 	.word	0x0801e0c8
 8012fd8:	0801e0e8 	.word	0x0801e0e8
 8012fdc:	0801e0a8 	.word	0x0801e0a8

08012fe0 <_lseek_r>:
 8012fe0:	b538      	push	{r3, r4, r5, lr}
 8012fe2:	4c07      	ldr	r4, [pc, #28]	; (8013000 <_lseek_r+0x20>)
 8012fe4:	4605      	mov	r5, r0
 8012fe6:	4608      	mov	r0, r1
 8012fe8:	4611      	mov	r1, r2
 8012fea:	2200      	movs	r2, #0
 8012fec:	6022      	str	r2, [r4, #0]
 8012fee:	461a      	mov	r2, r3
 8012ff0:	f7ed fe12 	bl	8000c18 <_lseek>
 8012ff4:	1c43      	adds	r3, r0, #1
 8012ff6:	d102      	bne.n	8012ffe <_lseek_r+0x1e>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	b103      	cbz	r3, 8012ffe <_lseek_r+0x1e>
 8012ffc:	602b      	str	r3, [r5, #0]
 8012ffe:	bd38      	pop	{r3, r4, r5, pc}
 8013000:	200071b8 	.word	0x200071b8

08013004 <__swhatbuf_r>:
 8013004:	b570      	push	{r4, r5, r6, lr}
 8013006:	460e      	mov	r6, r1
 8013008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801300c:	2900      	cmp	r1, #0
 801300e:	b096      	sub	sp, #88	; 0x58
 8013010:	4614      	mov	r4, r2
 8013012:	461d      	mov	r5, r3
 8013014:	da07      	bge.n	8013026 <__swhatbuf_r+0x22>
 8013016:	2300      	movs	r3, #0
 8013018:	602b      	str	r3, [r5, #0]
 801301a:	89b3      	ldrh	r3, [r6, #12]
 801301c:	061a      	lsls	r2, r3, #24
 801301e:	d410      	bmi.n	8013042 <__swhatbuf_r+0x3e>
 8013020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013024:	e00e      	b.n	8013044 <__swhatbuf_r+0x40>
 8013026:	466a      	mov	r2, sp
 8013028:	f000 f864 	bl	80130f4 <_fstat_r>
 801302c:	2800      	cmp	r0, #0
 801302e:	dbf2      	blt.n	8013016 <__swhatbuf_r+0x12>
 8013030:	9a01      	ldr	r2, [sp, #4]
 8013032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801303a:	425a      	negs	r2, r3
 801303c:	415a      	adcs	r2, r3
 801303e:	602a      	str	r2, [r5, #0]
 8013040:	e7ee      	b.n	8013020 <__swhatbuf_r+0x1c>
 8013042:	2340      	movs	r3, #64	; 0x40
 8013044:	2000      	movs	r0, #0
 8013046:	6023      	str	r3, [r4, #0]
 8013048:	b016      	add	sp, #88	; 0x58
 801304a:	bd70      	pop	{r4, r5, r6, pc}

0801304c <__smakebuf_r>:
 801304c:	898b      	ldrh	r3, [r1, #12]
 801304e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013050:	079d      	lsls	r5, r3, #30
 8013052:	4606      	mov	r6, r0
 8013054:	460c      	mov	r4, r1
 8013056:	d507      	bpl.n	8013068 <__smakebuf_r+0x1c>
 8013058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801305c:	6023      	str	r3, [r4, #0]
 801305e:	6123      	str	r3, [r4, #16]
 8013060:	2301      	movs	r3, #1
 8013062:	6163      	str	r3, [r4, #20]
 8013064:	b002      	add	sp, #8
 8013066:	bd70      	pop	{r4, r5, r6, pc}
 8013068:	ab01      	add	r3, sp, #4
 801306a:	466a      	mov	r2, sp
 801306c:	f7ff ffca 	bl	8013004 <__swhatbuf_r>
 8013070:	9900      	ldr	r1, [sp, #0]
 8013072:	4605      	mov	r5, r0
 8013074:	4630      	mov	r0, r6
 8013076:	f7ff faab 	bl	80125d0 <_malloc_r>
 801307a:	b948      	cbnz	r0, 8013090 <__smakebuf_r+0x44>
 801307c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013080:	059a      	lsls	r2, r3, #22
 8013082:	d4ef      	bmi.n	8013064 <__smakebuf_r+0x18>
 8013084:	f023 0303 	bic.w	r3, r3, #3
 8013088:	f043 0302 	orr.w	r3, r3, #2
 801308c:	81a3      	strh	r3, [r4, #12]
 801308e:	e7e3      	b.n	8013058 <__smakebuf_r+0xc>
 8013090:	4b0d      	ldr	r3, [pc, #52]	; (80130c8 <__smakebuf_r+0x7c>)
 8013092:	62b3      	str	r3, [r6, #40]	; 0x28
 8013094:	89a3      	ldrh	r3, [r4, #12]
 8013096:	6020      	str	r0, [r4, #0]
 8013098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801309c:	81a3      	strh	r3, [r4, #12]
 801309e:	9b00      	ldr	r3, [sp, #0]
 80130a0:	6163      	str	r3, [r4, #20]
 80130a2:	9b01      	ldr	r3, [sp, #4]
 80130a4:	6120      	str	r0, [r4, #16]
 80130a6:	b15b      	cbz	r3, 80130c0 <__smakebuf_r+0x74>
 80130a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130ac:	4630      	mov	r0, r6
 80130ae:	f000 f833 	bl	8013118 <_isatty_r>
 80130b2:	b128      	cbz	r0, 80130c0 <__smakebuf_r+0x74>
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	f023 0303 	bic.w	r3, r3, #3
 80130ba:	f043 0301 	orr.w	r3, r3, #1
 80130be:	81a3      	strh	r3, [r4, #12]
 80130c0:	89a3      	ldrh	r3, [r4, #12]
 80130c2:	431d      	orrs	r5, r3
 80130c4:	81a5      	strh	r5, [r4, #12]
 80130c6:	e7cd      	b.n	8013064 <__smakebuf_r+0x18>
 80130c8:	080123d9 	.word	0x080123d9

080130cc <__malloc_lock>:
 80130cc:	4770      	bx	lr

080130ce <__malloc_unlock>:
 80130ce:	4770      	bx	lr

080130d0 <_read_r>:
 80130d0:	b538      	push	{r3, r4, r5, lr}
 80130d2:	4c07      	ldr	r4, [pc, #28]	; (80130f0 <_read_r+0x20>)
 80130d4:	4605      	mov	r5, r0
 80130d6:	4608      	mov	r0, r1
 80130d8:	4611      	mov	r1, r2
 80130da:	2200      	movs	r2, #0
 80130dc:	6022      	str	r2, [r4, #0]
 80130de:	461a      	mov	r2, r3
 80130e0:	f7ed fd3a 	bl	8000b58 <_read>
 80130e4:	1c43      	adds	r3, r0, #1
 80130e6:	d102      	bne.n	80130ee <_read_r+0x1e>
 80130e8:	6823      	ldr	r3, [r4, #0]
 80130ea:	b103      	cbz	r3, 80130ee <_read_r+0x1e>
 80130ec:	602b      	str	r3, [r5, #0]
 80130ee:	bd38      	pop	{r3, r4, r5, pc}
 80130f0:	200071b8 	.word	0x200071b8

080130f4 <_fstat_r>:
 80130f4:	b538      	push	{r3, r4, r5, lr}
 80130f6:	4c07      	ldr	r4, [pc, #28]	; (8013114 <_fstat_r+0x20>)
 80130f8:	2300      	movs	r3, #0
 80130fa:	4605      	mov	r5, r0
 80130fc:	4608      	mov	r0, r1
 80130fe:	4611      	mov	r1, r2
 8013100:	6023      	str	r3, [r4, #0]
 8013102:	f7ed fd6e 	bl	8000be2 <_fstat>
 8013106:	1c43      	adds	r3, r0, #1
 8013108:	d102      	bne.n	8013110 <_fstat_r+0x1c>
 801310a:	6823      	ldr	r3, [r4, #0]
 801310c:	b103      	cbz	r3, 8013110 <_fstat_r+0x1c>
 801310e:	602b      	str	r3, [r5, #0]
 8013110:	bd38      	pop	{r3, r4, r5, pc}
 8013112:	bf00      	nop
 8013114:	200071b8 	.word	0x200071b8

08013118 <_isatty_r>:
 8013118:	b538      	push	{r3, r4, r5, lr}
 801311a:	4c06      	ldr	r4, [pc, #24]	; (8013134 <_isatty_r+0x1c>)
 801311c:	2300      	movs	r3, #0
 801311e:	4605      	mov	r5, r0
 8013120:	4608      	mov	r0, r1
 8013122:	6023      	str	r3, [r4, #0]
 8013124:	f7ed fd6d 	bl	8000c02 <_isatty>
 8013128:	1c43      	adds	r3, r0, #1
 801312a:	d102      	bne.n	8013132 <_isatty_r+0x1a>
 801312c:	6823      	ldr	r3, [r4, #0]
 801312e:	b103      	cbz	r3, 8013132 <_isatty_r+0x1a>
 8013130:	602b      	str	r3, [r5, #0]
 8013132:	bd38      	pop	{r3, r4, r5, pc}
 8013134:	200071b8 	.word	0x200071b8

08013138 <_init>:
 8013138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801313a:	bf00      	nop
 801313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801313e:	bc08      	pop	{r3}
 8013140:	469e      	mov	lr, r3
 8013142:	4770      	bx	lr

08013144 <_fini>:
 8013144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013146:	bf00      	nop
 8013148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801314a:	bc08      	pop	{r3}
 801314c:	469e      	mov	lr, r3
 801314e:	4770      	bx	lr
