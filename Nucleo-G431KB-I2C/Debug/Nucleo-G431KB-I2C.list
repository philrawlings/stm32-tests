
Nucleo-G431KB-I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004458  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004658  08004658  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004660  08004660  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004660  08004660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08004674  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08004674  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caac  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aaa  00000000  00000000  0002cae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  0002e598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c9b0  00000000  00000000  0002fc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a20f  00000000  00000000  0004c620  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5435  00000000  00000000  0005682f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010bc64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  0010bce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004618 	.word	0x08004618

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004618 	.word	0x08004618

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b092      	sub	sp, #72	; 0x48
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fb38 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f8a9 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f999 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800052a:	f000 f94b 	bl	80007c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800052e:	f000 f909 	bl	8000744 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	uint16_t eepromAddress = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint8_t addressBytes[2];
	addressBytes[0]= eepromAddress >> 8; // High byte
 8000536:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	b29b      	uxth	r3, r3
 800053c:	b2db      	uxtb	r3, r3
 800053e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	addressBytes[1]= eepromAddress & 0xFF; // Low Byte
 8000542:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	uint8_t writeBuf[6];
	writeBuf[0] = addressBytes[0];
 800054a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800054e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	writeBuf[1] = addressBytes[1];
 8000552:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000556:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	writeBuf[2] = 0x41;
 800055a:	2341      	movs	r3, #65	; 0x41
 800055c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	writeBuf[3] = 0x42;
 8000560:	2342      	movs	r3, #66	; 0x42
 8000562:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	writeBuf[4] = 0x43;
 8000566:	2343      	movs	r3, #67	; 0x43
 8000568:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	writeBuf[5] = 0x44;
 800056c:	2344      	movs	r3, #68	; 0x44
 800056e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	ret = HAL_I2C_Master_Transmit(&hi2c1, EEPROM_WRITE_ADDR, writeBuf, 6, HAL_MAX_DELAY);
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	b299      	uxth	r1, r3
 8000576:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2306      	movs	r3, #6
 8000582:	483a      	ldr	r0, [pc, #232]	; (800066c <main+0x154>)
 8000584:	f000 fed6 	bl	8001334 <HAL_I2C_Master_Transmit>
 8000588:	4603      	mov	r3, r0
 800058a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (ret == HAL_ERROR)
 800058e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000592:	2b01      	cmp	r3, #1
 8000594:	d103      	bne.n	800059e <main+0x86>
	  i2cError = HAL_I2C_GetError(&hi2c1);
 8000596:	4835      	ldr	r0, [pc, #212]	; (800066c <main+0x154>)
 8000598:	f001 f8d2 	bl	8001740 <HAL_I2C_GetError>
 800059c:	6378      	str	r0, [r7, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPIO_PinState pinState = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fded 	bl	8001184 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	  if (!pinState)
 80005b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d14f      	bne.n	8000658 <main+0x140>
	  {
		  HAL_I2C_ModeTypeDef mode = HAL_I2C_GetMode(&hi2c1);
 80005b8:	482c      	ldr	r0, [pc, #176]	; (800066c <main+0x154>)
 80005ba:	f001 f8b3 	bl	8001724 <HAL_I2C_GetMode>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(&hi2c1);
 80005c4:	4829      	ldr	r0, [pc, #164]	; (800066c <main+0x154>)
 80005c6:	f001 f89f 	bl	8001708 <HAL_I2C_GetState>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

		  ret = HAL_I2C_Master_Transmit(&hi2c1, EEPROM_WRITE_ADDR, addressBytes, 2, HAL_MAX_DELAY);
 80005d0:	23a0      	movs	r3, #160	; 0xa0
 80005d2:	b299      	uxth	r1, r3
 80005d4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2302      	movs	r3, #2
 80005e0:	4822      	ldr	r0, [pc, #136]	; (800066c <main+0x154>)
 80005e2:	f000 fea7 	bl	8001334 <HAL_I2C_Master_Transmit>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		  if (ret == HAL_ERROR)
 80005ec:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d103      	bne.n	80005fc <main+0xe4>
			  i2cError = HAL_I2C_GetError(&hi2c1);
 80005f4:	481d      	ldr	r0, [pc, #116]	; (800066c <main+0x154>)
 80005f6:	f001 f8a3 	bl	8001740 <HAL_I2C_GetError>
 80005fa:	6378      	str	r0, [r7, #52]	; 0x34

		  uint8_t buf[32];
		  ret = HAL_I2C_Master_Receive(&hi2c1, EEPROM_READ_ADDR, buf, 32, 1000);
 80005fc:	23a1      	movs	r3, #161	; 0xa1
 80005fe:	b299      	uxth	r1, r3
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2320      	movs	r3, #32
 800060a:	4818      	ldr	r0, [pc, #96]	; (800066c <main+0x154>)
 800060c:	f000 ff86 	bl	800151c <HAL_I2C_Master_Receive>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		  if (ret == HAL_ERROR)
 8000616:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800061a:	2b01      	cmp	r3, #1
 800061c:	d103      	bne.n	8000626 <main+0x10e>
			  i2cError = HAL_I2C_GetError(&hi2c1);
 800061e:	4813      	ldr	r0, [pc, #76]	; (800066c <main+0x154>)
 8000620:	f001 f88e 	bl	8001740 <HAL_I2C_GetError>
 8000624:	6378      	str	r0, [r7, #52]	; 0x34

		  HAL_UART_Transmit(&huart2, (uint8_t*)buf, 4, HAL_MAX_DELAY);
 8000626:	1d39      	adds	r1, r7, #4
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2204      	movs	r2, #4
 800062e:	4810      	ldr	r0, [pc, #64]	; (8000670 <main+0x158>)
 8000630:	f002 fb22 	bl	8002c78 <HAL_UART_Transmit>

		  for (int i = 0; i < 10; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000638:	e00a      	b.n	8000650 <main+0x138>
			  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x15c>)
 8000640:	f000 fdd0 	bl	80011e4 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8000644:	2064      	movs	r0, #100	; 0x64
 8000646:	f000 fb15 	bl	8000c74 <HAL_Delay>
		  for (int i = 0; i < 10; i++) {
 800064a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800064c:	3301      	adds	r3, #1
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000652:	2b09      	cmp	r3, #9
 8000654:	ddf1      	ble.n	800063a <main+0x122>
 8000656:	e004      	b.n	8000662 <main+0x14a>
		  }
	  }
	  else {
		  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <main+0x15c>)
 800065e:	f000 fdc1 	bl	80011e4 <HAL_GPIO_TogglePin>
	  }
	  HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f000 fb05 	bl	8000c74 <HAL_Delay>
  {
 800066a:	e798      	b.n	800059e <main+0x86>
 800066c:	20000028 	.word	0x20000028
 8000670:	20000074 	.word	0x20000074
 8000674:	48000400 	.word	0x48000400

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b0a4      	sub	sp, #144	; 0x90
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000682:	2238      	movs	r2, #56	; 0x38
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 ffbe 	bl	8004608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2244      	movs	r2, #68	; 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ffb0 	bl	8004608 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f001 facd 	bl	8001c48 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2340      	movs	r3, #64	; 0x40
 80006ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006c4:	2304      	movs	r3, #4
 80006c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006c8:	2355      	movs	r3, #85	; 0x55
 80006ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fb53 	bl	8001d90 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f902 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2303      	movs	r3, #3
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000708:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800070c:	2108      	movs	r1, #8
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fe56 	bl	80023c0 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071a:	f000 f8ed 	bl	80008f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800071e:	2342      	movs	r3, #66	; 0x42
 8000720:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f002 f863 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000738:	f000 f8de 	bl	80008f8 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3790      	adds	r7, #144	; 0x90
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	f000 fd49 	bl	8001216 <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 f8b5 	bl	80008f8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000792:	f001 f9c1 	bl	8001b18 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 f8ac 	bl	80008f8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C1_Init+0x74>)
 80007a4:	f001 fa03 	bl	8001bae <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 f8a3 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40005400 	.word	0x40005400
 80007c0:	30a0a7fb 	.word	0x30a0a7fb

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <MX_USART2_UART_Init+0x94>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_USART2_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART2_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART2_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080c:	4811      	ldr	r0, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x90>)
 800080e:	f002 f9e3 	bl	8002bd8 <HAL_UART_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000818:	f000 f86e 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800081c:	2100      	movs	r1, #0
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_USART2_UART_Init+0x90>)
 8000820:	f003 fde9 	bl	80043f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800082a:	f000 f865 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x90>)
 8000832:	f003 fe1e 	bl	8004472 <HAL_UARTEx_SetRxFifoThreshold>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800083c:	f000 f85c 	bl	80008f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_USART2_UART_Init+0x90>)
 8000842:	f003 fd9f 	bl	8004384 <HAL_UARTEx_DisableFifoMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 f854 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000074 	.word	0x20000074
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_GPIO_Init+0x94>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_GPIO_Init+0x94>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_GPIO_Init+0x98>)
 80008aa:	f000 fc83 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	4619      	mov	r1, r3
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f000 fadb 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <MX_GPIO_Init+0x98>)
 80008e4:	f000 facc 	bl	8000e80 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000400 	.word	0x48000400

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000912:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000916:	6093      	str	r3, [r2, #8]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40007000 	.word	0x40007000

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	; (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	; 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	; 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800095e:	f7ff ffd3 	bl	8000908 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <HAL_I2C_MspInit+0xb8>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d145      	bne.n	8000a1e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a25      	ldr	r2, [pc, #148]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c8:	2312      	movs	r3, #18
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d4:	2304      	movs	r3, #4
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fa4d 	bl	8000e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <HAL_I2C_MspInit+0xc0>)
 8000a02:	f000 fa3d 	bl	8000e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_I2C_MspInit+0xbc>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a1e:	bf00      	nop
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x7c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d128      	bne.n	8000aa8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6593      	str	r3, [r2, #88]	; 0x58
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000a86:	230c      	movs	r3, #12
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a96:	2307      	movs	r3, #7
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa4:	f000 f9ec 	bl	8000e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f894 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <SystemInit+0x28>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <SystemInit+0x28>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SystemInit+0x28>)
 8000b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480d      	ldr	r0, [pc, #52]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490e      	ldr	r1, [pc, #56]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0b      	ldr	r4, [pc, #44]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b6a:	f7ff ffd3 	bl	8000b14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f003 fd27 	bl	80045c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fcd1 	bl	8000518 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   r0, =_estack
 8000b78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	08004668 	.word	0x08004668
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	20000104 	.word	0x20000104

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>

08000b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f93d 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff feb8 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_InitTick+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d022      	beq.n	8000c1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <HAL_InitTick+0x68>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000be4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f93a 	bl	8000e66 <HAL_SYSTICK_Config>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10f      	bne.n	8000c18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b0f      	cmp	r3, #15
 8000bfc:	d809      	bhi.n	8000c12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	f04f 30ff 	mov.w	r0, #4294967295
 8000c06:	f000 f914 	bl	8000e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x70>)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	e007      	b.n	8000c22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	e004      	b.n	8000c22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e001      	b.n	8000c22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x20>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	20000100 	.word	0x20000100
 8000c58:	20000008 	.word	0x20000008

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000100 	.word	0x20000100

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d004      	beq.n	8000c98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_Delay+0x40>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c98:	bf00      	nop
 8000c9a:	f7ff ffdf 	bl	8000c5c <HAL_GetTick>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d8f7      	bhi.n	8000c9a <HAL_Delay+0x26>
  {
  }
}
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff47 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff5e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ffb2 	bl	8000dd8 <SysTick_Config>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e8e:	e15a      	b.n	8001146 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 814c 	beq.w	8001140 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d00b      	beq.n	8000ec8 <HAL_GPIO_Init+0x48>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d007      	beq.n	8000ec8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ebc:	2b11      	cmp	r3, #17
 8000ebe:	d003      	beq.n	8000ec8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b12      	cmp	r3, #18
 8000ec6:	d130      	bne.n	8000f2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efe:	2201      	movs	r2, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	091b      	lsrs	r3, r3, #4
 8000f14:	f003 0201 	and.w	r2, r3, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0xea>
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b12      	cmp	r3, #18
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80a6 	beq.w	8001140 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff4:	4b5b      	ldr	r3, [pc, #364]	; (8001164 <HAL_GPIO_Init+0x2e4>)
 8000ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff8:	4a5a      	ldr	r2, [pc, #360]	; (8001164 <HAL_GPIO_Init+0x2e4>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8001000:	4b58      	ldr	r3, [pc, #352]	; (8001164 <HAL_GPIO_Init+0x2e4>)
 8001002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800100c:	4a56      	ldr	r2, [pc, #344]	; (8001168 <HAL_GPIO_Init+0x2e8>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001036:	d01f      	beq.n	8001078 <HAL_GPIO_Init+0x1f8>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a4c      	ldr	r2, [pc, #304]	; (800116c <HAL_GPIO_Init+0x2ec>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d019      	beq.n	8001074 <HAL_GPIO_Init+0x1f4>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a4b      	ldr	r2, [pc, #300]	; (8001170 <HAL_GPIO_Init+0x2f0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d013      	beq.n	8001070 <HAL_GPIO_Init+0x1f0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a4a      	ldr	r2, [pc, #296]	; (8001174 <HAL_GPIO_Init+0x2f4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d00d      	beq.n	800106c <HAL_GPIO_Init+0x1ec>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a49      	ldr	r2, [pc, #292]	; (8001178 <HAL_GPIO_Init+0x2f8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d007      	beq.n	8001068 <HAL_GPIO_Init+0x1e8>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a48      	ldr	r2, [pc, #288]	; (800117c <HAL_GPIO_Init+0x2fc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d101      	bne.n	8001064 <HAL_GPIO_Init+0x1e4>
 8001060:	2305      	movs	r3, #5
 8001062:	e00a      	b.n	800107a <HAL_GPIO_Init+0x1fa>
 8001064:	2306      	movs	r3, #6
 8001066:	e008      	b.n	800107a <HAL_GPIO_Init+0x1fa>
 8001068:	2304      	movs	r3, #4
 800106a:	e006      	b.n	800107a <HAL_GPIO_Init+0x1fa>
 800106c:	2303      	movs	r3, #3
 800106e:	e004      	b.n	800107a <HAL_GPIO_Init+0x1fa>
 8001070:	2302      	movs	r3, #2
 8001072:	e002      	b.n	800107a <HAL_GPIO_Init+0x1fa>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <HAL_GPIO_Init+0x1fa>
 8001078:	2300      	movs	r3, #0
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	f002 0203 	and.w	r2, r2, #3
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	4093      	lsls	r3, r2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108a:	4937      	ldr	r1, [pc, #220]	; (8001168 <HAL_GPIO_Init+0x2e8>)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <HAL_GPIO_Init+0x300>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010bc:	4a30      	ldr	r2, [pc, #192]	; (8001180 <HAL_GPIO_Init+0x300>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x300>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <HAL_GPIO_Init+0x300>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <HAL_GPIO_Init+0x300>)
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <HAL_GPIO_Init+0x300>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x300>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_GPIO_Init+0x300>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	f47f ae9d 	bne.w	8000e90 <HAL_GPIO_Init+0x10>
  }
}
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800
 8001174:	48000c00 	.word	0x48000c00
 8001178:	48001000 	.word	0x48001000
 800117c:	48001400 	.word	0x48001400
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001202:	e002      	b.n	800120a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001204:	887a      	ldrh	r2, [r7, #2]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e081      	b.n	800132c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d106      	bne.n	8001242 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fb97 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2224      	movs	r2, #36	; 0x24
 8001246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0201 	bic.w	r2, r2, #1
 8001258:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001266:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001276:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d107      	bne.n	8001290 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	e006      	b.n	800129e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800129c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d104      	bne.n	80012b0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	ea42 0103 	orr.w	r1, r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	021a      	lsls	r2, r3, #8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69d9      	ldr	r1, [r3, #28]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2220      	movs	r2, #32
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af02      	add	r7, sp, #8
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	461a      	mov	r2, r3
 8001340:	460b      	mov	r3, r1
 8001342:	817b      	strh	r3, [r7, #10]
 8001344:	4613      	mov	r3, r2
 8001346:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b20      	cmp	r3, #32
 8001352:	f040 80da 	bne.w	800150a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_I2C_Master_Transmit+0x30>
 8001360:	2302      	movs	r3, #2
 8001362:	e0d3      	b.n	800150c <HAL_I2C_Master_Transmit+0x1d8>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800136c:	f7ff fc76 	bl	8000c5c <HAL_GetTick>
 8001370:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2319      	movs	r3, #25
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fa0e 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e0be      	b.n	800150c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2221      	movs	r2, #33	; 0x21
 8001392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2210      	movs	r2, #16
 800139a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	893a      	ldrh	r2, [r7, #8]
 80013ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	2bff      	cmp	r3, #255	; 0xff
 80013be:	d90e      	bls.n	80013de <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	22ff      	movs	r2, #255	; 0xff
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	8979      	ldrh	r1, [r7, #10]
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <HAL_I2C_Master_Transmit+0x1e0>)
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 fb70 	bl	8001abc <I2C_TransferConfig>
 80013dc:	e06c      	b.n	80014b8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	4b48      	ldr	r3, [pc, #288]	; (8001514 <HAL_I2C_Master_Transmit+0x1e0>)
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 fb5f 	bl	8001abc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80013fe:	e05b      	b.n	80014b8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	6a39      	ldr	r1, [r7, #32]
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fa0b 	bl	8001820 <I2C_WaitOnTXISFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e07b      	b.n	800150c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d034      	beq.n	80014b8 <HAL_I2C_Master_Transmit+0x184>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001452:	2b00      	cmp	r3, #0
 8001454:	d130      	bne.n	80014b8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	2200      	movs	r2, #0
 800145e:	2180      	movs	r1, #128	; 0x80
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f000 f99d 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e04d      	b.n	800150c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d90e      	bls.n	8001498 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001484:	b2da      	uxtb	r2, r3
 8001486:	8979      	ldrh	r1, [r7, #10]
 8001488:	2300      	movs	r3, #0
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f000 fb13 	bl	8001abc <I2C_TransferConfig>
 8001496:	e00f      	b.n	80014b8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	8979      	ldrh	r1, [r7, #10]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f000 fb02 	bl	8001abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d19e      	bne.n	8001400 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	6a39      	ldr	r1, [r7, #32]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f9ea 	bl	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e01a      	b.n	800150c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2220      	movs	r2, #32
 80014dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_I2C_Master_Transmit+0x1e4>)
 80014ea:	400b      	ands	r3, r1
 80014ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	80002000 	.word	0x80002000
 8001518:	fe00e800 	.word	0xfe00e800

0800151c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af02      	add	r7, sp, #8
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	460b      	mov	r3, r1
 800152a:	817b      	strh	r3, [r7, #10]
 800152c:	4613      	mov	r3, r2
 800152e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b20      	cmp	r3, #32
 800153a:	f040 80db 	bne.w	80016f4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_I2C_Master_Receive+0x30>
 8001548:	2302      	movs	r3, #2
 800154a:	e0d4      	b.n	80016f6 <HAL_I2C_Master_Receive+0x1da>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001554:	f7ff fb82 	bl	8000c5c <HAL_GetTick>
 8001558:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2319      	movs	r3, #25
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f91a 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0bf      	b.n	80016f6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2222      	movs	r2, #34	; 0x22
 800157a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2210      	movs	r2, #16
 8001582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2bff      	cmp	r3, #255	; 0xff
 80015a6:	d90e      	bls.n	80015c6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	8979      	ldrh	r1, [r7, #10]
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_I2C_Master_Receive+0x1e4>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fa7c 	bl	8001abc <I2C_TransferConfig>
 80015c4:	e06d      	b.n	80016a2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	8979      	ldrh	r1, [r7, #10]
 80015d8:	4b49      	ldr	r3, [pc, #292]	; (8001700 <HAL_I2C_Master_Receive+0x1e4>)
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fa6b 	bl	8001abc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80015e6:	e05c      	b.n	80016a2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	6a39      	ldr	r1, [r7, #32]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f993 	bl	8001918 <I2C_WaitOnRXNEFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e07c      	b.n	80016f6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001632:	b29b      	uxth	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	d034      	beq.n	80016a2 <HAL_I2C_Master_Receive+0x186>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	d130      	bne.n	80016a2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	2200      	movs	r2, #0
 8001648:	2180      	movs	r1, #128	; 0x80
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f8a8 	bl	80017a0 <I2C_WaitOnFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e04d      	b.n	80016f6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	2bff      	cmp	r3, #255	; 0xff
 8001662:	d90e      	bls.n	8001682 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	22ff      	movs	r2, #255	; 0xff
 8001668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166e:	b2da      	uxtb	r2, r3
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 fa1e 	bl	8001abc <I2C_TransferConfig>
 8001680:	e00f      	b.n	80016a2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	b2da      	uxtb	r2, r3
 8001692:	8979      	ldrh	r1, [r7, #10]
 8001694:	2300      	movs	r3, #0
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f000 fa0d 	bl	8001abc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d19d      	bne.n	80015e8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	6a39      	ldr	r1, [r7, #32]
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f000 f8f5 	bl	80018a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e01a      	b.n	80016f6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2220      	movs	r2, #32
 80016c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6859      	ldr	r1, [r3, #4]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <HAL_I2C_Master_Receive+0x1e8>)
 80016d4:	400b      	ands	r3, r1
 80016d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2220      	movs	r2, #32
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e000      	b.n	80016f6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80016f4:	2302      	movs	r3, #2
  }
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	80002400 	.word	0x80002400
 8001704:	fe00e800 	.word	0xfe00e800

08001708 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001716:	b2db      	uxtb	r3, r3
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001732:	b2db      	uxtb	r3, r3
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
* @retval I2C Error Code
*/
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b02      	cmp	r3, #2
 800176c:	d103      	bne.n	8001776 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2200      	movs	r2, #0
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	d007      	beq.n	8001794 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	619a      	str	r2, [r3, #24]
  }
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b0:	e022      	b.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d01e      	beq.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ba:	f7ff fa4f 	bl	8000c5c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d302      	bcc.n	80017d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d113      	bne.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d4:	f043 0220 	orr.w	r2, r3, #32
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e00f      	b.n	8001818 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	699a      	ldr	r2, [r3, #24]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4013      	ands	r3, r2
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	429a      	cmp	r2, r3
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	429a      	cmp	r2, r3
 8001814:	d0cd      	beq.n	80017b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800182c:	e02c      	b.n	8001888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 f8dc 	bl	80019f0 <I2C_IsAcknowledgeFailed>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e02a      	b.n	8001898 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d01e      	beq.n	8001888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800184a:	f7ff fa07 	bl	8000c5c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d302      	bcc.n	8001860 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d113      	bne.n	8001888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001864:	f043 0220 	orr.w	r2, r3, #32
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e007      	b.n	8001898 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b02      	cmp	r3, #2
 8001894:	d1cb      	bne.n	800182e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ac:	e028      	b.n	8001900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f000 f89c 	bl	80019f0 <I2C_IsAcknowledgeFailed>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e026      	b.n	8001910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018c2:	f7ff f9cb 	bl	8000c5c <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d302      	bcc.n	80018d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d113      	bne.n	8001900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f043 0220 	orr.w	r2, r3, #32
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e007      	b.n	8001910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	2b20      	cmp	r3, #32
 800190c:	d1cf      	bne.n	80018ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001924:	e055      	b.n	80019d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f860 	bl	80019f0 <I2C_IsAcknowledgeFailed>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e053      	b.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d129      	bne.n	800199c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b04      	cmp	r3, #4
 8001954:	d105      	bne.n	8001962 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e03f      	b.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2220      	movs	r2, #32
 8001968:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6859      	ldr	r1, [r3, #4]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b1d      	ldr	r3, [pc, #116]	; (80019ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001976:	400b      	ands	r3, r1
 8001978:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2220      	movs	r2, #32
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e022      	b.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199c:	f7ff f95e 	bl	8000c5c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d302      	bcc.n	80019b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f043 0220 	orr.w	r2, r3, #32
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e007      	b.n	80019e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d1a2      	bne.n	8001926 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	fe00e800 	.word	0xfe00e800

080019f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d151      	bne.n	8001aae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a0a:	e022      	b.n	8001a52 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a12:	d01e      	beq.n	8001a52 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a14:	f7ff f922 	bl	8000c5c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d302      	bcc.n	8001a2a <I2C_IsAcknowledgeFailed+0x3a>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d113      	bne.n	8001a52 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f043 0220 	orr.w	r2, r3, #32
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e02e      	b.n	8001ab0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d1d5      	bne.n	8001a0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2210      	movs	r2, #16
 8001a66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe71 	bl	8001758 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6859      	ldr	r1, [r3, #4]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <I2C_IsAcknowledgeFailed+0xc8>)
 8001a82:	400b      	ands	r3, r1
 8001a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f043 0204 	orr.w	r2, r3, #4
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	fe00e800 	.word	0xfe00e800

08001abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	817b      	strh	r3, [r7, #10]
 8001aca:	4613      	mov	r3, r2
 8001acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	0d5b      	lsrs	r3, r3, #21
 8001ad8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <I2C_TransferConfig+0x58>)
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	ea02 0103 	and.w	r1, r2, r3
 8001ae6:	897b      	ldrh	r3, [r7, #10]
 8001ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	03ff63ff 	.word	0x03ff63ff

08001b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d138      	bne.n	8001ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e032      	b.n	8001ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	; 0x24
 8001b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0201 	orr.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e000      	b.n	8001ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b20      	cmp	r3, #32
 8001bc2:	d139      	bne.n	8001c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e033      	b.n	8001c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2224      	movs	r2, #36	; 0x24
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c38:	2302      	movs	r3, #2
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d141      	bne.n	8001cda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c56:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c62:	d131      	bne.n	8001cc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c6a:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	4b43      	ldr	r3, [pc, #268]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c7c:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c84:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2232      	movs	r2, #50	; 0x32
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	4a3f      	ldr	r2, [pc, #252]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	0c9b      	lsrs	r3, r3, #18
 8001c96:	3301      	adds	r3, #1
 8001c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c9a:	e002      	b.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d102      	bne.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f2      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cb6:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc2:	d158      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e057      	b.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cce:	4a2d      	ldr	r2, [pc, #180]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cd8:	e04d      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d141      	bne.n	8001d66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cee:	d131      	bne.n	8001d54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf6:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2232      	movs	r2, #50	; 0x32
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	0c9b      	lsrs	r3, r3, #18
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d26:	e002      	b.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3a:	d102      	bne.n	8001d42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f2      	bne.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4e:	d112      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e011      	b.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d64:	e007      	b.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40007000 	.word	0x40007000
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	431bde83 	.word	0x431bde83

08001d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e308      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d075      	beq.n	8001e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dae:	4ba3      	ldr	r3, [pc, #652]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db8:	4ba0      	ldr	r3, [pc, #640]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d102      	bne.n	8001dce <HAL_RCC_OscConfig+0x3e>
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d002      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x44>
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d10b      	bne.n	8001dec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	4b99      	ldr	r3, [pc, #612]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d05b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x108>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d157      	bne.n	8001e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e2e3      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d106      	bne.n	8001e04 <HAL_RCC_OscConfig+0x74>
 8001df6:	4b91      	ldr	r3, [pc, #580]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a90      	ldr	r2, [pc, #576]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e01d      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x98>
 8001e0e:	4b8b      	ldr	r3, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a8a      	ldr	r2, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a87      	ldr	r2, [pc, #540]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0xb0>
 8001e28:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a83      	ldr	r2, [pc, #524]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b81      	ldr	r3, [pc, #516]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a80      	ldr	r2, [pc, #512]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e48:	f7fe ff08 	bl	8000c5c <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e50:	f7fe ff04 	bl	8000c5c <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b64      	cmp	r3, #100	; 0x64
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e2a8      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0xc0>
 8001e6e:	e014      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe fef4 	bl	8000c5c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e78:	f7fe fef0 	bl	8000c5c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b64      	cmp	r3, #100	; 0x64
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e294      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e8a:	4b6c      	ldr	r3, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0xe8>
 8001e96:	e000      	b.n	8001e9a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d075      	beq.n	8001f92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea6:	4b65      	ldr	r3, [pc, #404]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb0:	4b62      	ldr	r3, [pc, #392]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x136>
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_OscConfig+0x13c>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d11f      	bne.n	8001f0c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x154>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e267      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b55      	ldr	r3, [pc, #340]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	061b      	lsls	r3, r3, #24
 8001ef2:	4952      	ldr	r1, [pc, #328]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ef8:	4b51      	ldr	r3, [pc, #324]	; (8002040 <HAL_RCC_OscConfig+0x2b0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fe61 	bl	8000bc4 <HAL_InitTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d043      	beq.n	8001f90 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e253      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	4b49      	ldr	r3, [pc, #292]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a48      	ldr	r2, [pc, #288]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe9c 	bl	8000c5c <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7fe fe98 	bl	8000c5c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e23c      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	061b      	lsls	r3, r3, #24
 8001f54:	4939      	ldr	r1, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
 8001f5a:	e01a      	b.n	8001f92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5c:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a36      	ldr	r2, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe fe78 	bl	8000c5c <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7fe fe74 	bl	8000c5c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e218      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f82:	4b2e      	ldr	r3, [pc, #184]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1e0>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d03c      	beq.n	8002018 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7fe fe51 	bl	8000c5c <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7fe fe4d 	bl	8000c5c <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1f1      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0ef      	beq.n	8001fbe <HAL_RCC_OscConfig+0x22e>
 8001fde:	e01b      	b.n	8002018 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe6:	4a15      	ldr	r2, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe fe34 	bl	8000c5c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7fe fe30 	bl	8000c5c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1d4      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1ef      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80ab 	beq.w	800217c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <HAL_RCC_OscConfig+0x2ac>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_RCC_OscConfig+0x2b4>
 8002036:	2301      	movs	r3, #1
 8002038:	e005      	b.n	8002046 <HAL_RCC_OscConfig+0x2b6>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	20000004 	.word	0x20000004
 8002044:	2300      	movs	r3, #0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00d      	beq.n	8002066 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	4baf      	ldr	r3, [pc, #700]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4aae      	ldr	r2, [pc, #696]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
 8002056:	4bac      	ldr	r3, [pc, #688]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002062:	2301      	movs	r3, #1
 8002064:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002066:	4ba9      	ldr	r3, [pc, #676]	; (800230c <HAL_RCC_OscConfig+0x57c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002072:	4ba6      	ldr	r3, [pc, #664]	; (800230c <HAL_RCC_OscConfig+0x57c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4aa5      	ldr	r2, [pc, #660]	; (800230c <HAL_RCC_OscConfig+0x57c>)
 8002078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207e:	f7fe fded 	bl	8000c5c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fde9 	bl	8000c5c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e18d      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002098:	4b9c      	ldr	r3, [pc, #624]	; (800230c <HAL_RCC_OscConfig+0x57c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d108      	bne.n	80020be <HAL_RCC_OscConfig+0x32e>
 80020ac:	4b96      	ldr	r3, [pc, #600]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a95      	ldr	r2, [pc, #596]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020bc:	e024      	b.n	8002108 <HAL_RCC_OscConfig+0x378>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d110      	bne.n	80020e8 <HAL_RCC_OscConfig+0x358>
 80020c6:	4b90      	ldr	r3, [pc, #576]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	4a8e      	ldr	r2, [pc, #568]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d6:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	4a8a      	ldr	r2, [pc, #552]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e6:	e00f      	b.n	8002108 <HAL_RCC_OscConfig+0x378>
 80020e8:	4b87      	ldr	r3, [pc, #540]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a86      	ldr	r2, [pc, #536]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f8:	4b83      	ldr	r3, [pc, #524]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a82      	ldr	r2, [pc, #520]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d016      	beq.n	800213e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002110:	f7fe fda4 	bl	8000c5c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	e00a      	b.n	800212e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fda0 	bl	8000c5c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e142      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0ed      	beq.n	8002118 <HAL_RCC_OscConfig+0x388>
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe fd8d 	bl	8000c5c <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7fe fd89 	bl	8000c5c <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	f241 3288 	movw	r2, #5000	; 0x1388
 8002154:	4293      	cmp	r3, r2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e12b      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ed      	bne.n	8002146 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002170:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a64      	ldr	r2, [pc, #400]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002190:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002196:	4a5c      	ldr	r2, [pc, #368]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fd5c 	bl	8000c5c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021a8:	f7fe fd58 	bl	8000c5c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0fc      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ba:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80021bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x418>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80021cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe fd3f 	bl	8000c5c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021e2:	f7fe fd3b 	bl	8000c5c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e0df      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80021f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 80d3 	beq.w	80023b2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b0c      	cmp	r3, #12
 8002216:	f000 808d 	beq.w	8002334 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d15a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a38      	ldr	r2, [pc, #224]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7fe fd15 	bl	8000c5c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe fd11 	bl	8000c5c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0b5      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x580>)
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6a11      	ldr	r1, [r2, #32]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002264:	3a01      	subs	r2, #1
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800226e:	0212      	lsls	r2, r2, #8
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002276:	0852      	lsrs	r2, r2, #1
 8002278:	3a01      	subs	r2, #1
 800227a:	0552      	lsls	r2, r2, #21
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002282:	0852      	lsrs	r2, r2, #1
 8002284:	3a01      	subs	r2, #1
 8002286:	0652      	lsls	r2, r2, #25
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800228e:	06d2      	lsls	r2, r2, #27
 8002290:	430a      	orrs	r2, r1
 8002292:	491d      	ldr	r1, [pc, #116]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 8002294:	4313      	orrs	r3, r2
 8002296:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b0:	f7fe fcd4 	bl	8000c5c <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fcd0 	bl	8000c5c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e074      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x528>
 80022d6:	e06c      	b.n	80023b2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0a      	ldr	r2, [pc, #40]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_RCC_OscConfig+0x578>)
 80022f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7fe fcac 	bl	8000c5c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002306:	e00e      	b.n	8002326 <HAL_RCC_OscConfig+0x596>
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
 8002310:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7fe fca2 	bl	8000c5c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e046      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_RCC_OscConfig+0x62c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x584>
 8002332:	e03e      	b.n	80023b2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e039      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_RCC_OscConfig+0x62c>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	429a      	cmp	r2, r3
 8002352:	d12c      	bne.n	80023ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	3b01      	subs	r3, #1
 8002360:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d123      	bne.n	80023ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002370:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d11b      	bne.n	80023ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002380:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d113      	bne.n	80023ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002396:	429a      	cmp	r2, r3
 8002398:	d109      	bne.n	80023ae <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	3b01      	subs	r3, #1
 80023a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3720      	adds	r7, #32
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e11e      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b91      	ldr	r3, [pc, #580]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b8e      	ldr	r3, [pc, #568]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	498c      	ldr	r1, [pc, #560]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b8a      	ldr	r3, [pc, #552]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e106      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d073      	beq.n	80024fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d129      	bne.n	8002470 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241c:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0f4      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800242c:	f000 f99e 	bl	800276c <RCC_GetSysClockFreqFromPLLSource>
 8002430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4a7c      	ldr	r2, [pc, #496]	; (8002628 <HAL_RCC_ClockConfig+0x268>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d93f      	bls.n	80024ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800243a:	4b7a      	ldr	r3, [pc, #488]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800244e:	2b00      	cmp	r3, #0
 8002450:	d033      	beq.n	80024ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d12f      	bne.n	80024ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002462:	4a70      	ldr	r2, [pc, #448]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 8002464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002468:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e024      	b.n	80024ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002478:	4b6a      	ldr	r3, [pc, #424]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0c6      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0be      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002498:	f000 f8ce 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 800249c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4a61      	ldr	r2, [pc, #388]	; (8002628 <HAL_RCC_ClockConfig+0x268>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d909      	bls.n	80024ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024a6:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ae:	4a5d      	ldr	r2, [pc, #372]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80024b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4957      	ldr	r1, [pc, #348]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fbc6 	bl	8000c5c <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fbc2 	bl	8000c5c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e095      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002514:	4b43      	ldr	r3, [pc, #268]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a42      	ldr	r2, [pc, #264]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800251a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0308 	and.w	r3, r3, #8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800252c:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002534:	4a3b      	ldr	r2, [pc, #236]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 8002536:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800253a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253c:	4b39      	ldr	r3, [pc, #228]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4936      	ldr	r1, [pc, #216]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
 800254e:	e008      	b.n	8002562 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b80      	cmp	r3, #128	; 0x80
 8002554:	d105      	bne.n	8002562 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002556:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4a32      	ldr	r2, [pc, #200]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 800255c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002560:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d21d      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 020f 	bic.w	r2, r3, #15
 8002578:	4929      	ldr	r1, [pc, #164]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002580:	f7fe fb6c 	bl	8000c5c <HAL_GetTick>
 8002584:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	e00a      	b.n	800259e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002588:	f7fe fb68 	bl	8000c5c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	f241 3288 	movw	r2, #5000	; 0x1388
 8002596:	4293      	cmp	r3, r2
 8002598:	d901      	bls.n	800259e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e03b      	b.n	8002616 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1ed      	bne.n	8002588 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4917      	ldr	r1, [pc, #92]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490f      	ldr	r1, [pc, #60]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ea:	f000 f825 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80025ee:	4601      	mov	r1, r0
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <HAL_RCC_ClockConfig+0x264>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_RCC_ClockConfig+0x26c>)
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	fa21 f303 	lsr.w	r3, r1, r3
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_RCC_ClockConfig+0x270>)
 8002608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x274>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fad8 	bl	8000bc4 <HAL_InitTick>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40022000 	.word	0x40022000
 8002624:	40021000 	.word	0x40021000
 8002628:	04c4b400 	.word	0x04c4b400
 800262c:	08004640 	.word	0x08004640
 8002630:	20000000 	.word	0x20000000
 8002634:	20000004 	.word	0x20000004

08002638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d102      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	e047      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d102      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	e03e      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d136      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3301      	adds	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d10c      	bne.n	80026a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800268c:	4a1a      	ldr	r2, [pc, #104]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002696:	68d2      	ldr	r2, [r2, #12]
 8002698:	0a12      	lsrs	r2, r2, #8
 800269a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
      break;
 80026a4:	e00c      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026a6:	4a13      	ldr	r2, [pc, #76]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	4a10      	ldr	r2, [pc, #64]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	0a12      	lsrs	r2, r2, #8
 80026b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026b8:	fb02 f303 	mul.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
      break;
 80026be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0e5b      	lsrs	r3, r3, #25
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	3301      	adds	r3, #1
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	e001      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026dc:	2300      	movs	r3, #0
 80026de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026e0:	693b      	ldr	r3, [r7, #16]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002718:	f7ff fff0 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271c:	4601      	mov	r1, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08004650 	.word	0x08004650

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002744:	f7ff ffda 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002748:	4601      	mov	r1, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	08004650 	.word	0x08004650

0800276c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3301      	adds	r3, #1
 8002788:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d10c      	bne.n	80027aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279a:	68d2      	ldr	r2, [r2, #12]
 800279c:	0a12      	lsrs	r2, r2, #8
 800279e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
    break;
 80027a8:	e00c      	b.n	80027c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4a0e      	ldr	r2, [pc, #56]	; (80027ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027b4:	68d2      	ldr	r2, [r2, #12]
 80027b6:	0a12      	lsrs	r2, r2, #8
 80027b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027bc:	fb02 f303 	mul.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
    break;
 80027c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0e5b      	lsrs	r3, r3, #25
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	371c      	adds	r7, #28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	40021000 	.word	0x40021000
 80027f0:	007a1200 	.word	0x007a1200
 80027f4:	00f42400 	.word	0x00f42400

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002800:	2300      	movs	r3, #0
 8002802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002804:	2300      	movs	r3, #0
 8002806:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8098 	beq.w	8002946 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b40      	ldr	r3, [pc, #256]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282a:	4a3f      	ldr	r2, [pc, #252]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
 8002832:	4b3d      	ldr	r3, [pc, #244]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002842:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a39      	ldr	r2, [pc, #228]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800284e:	f7fe fa05 	bl	8000c5c <HAL_GetTick>
 8002852:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002854:	e009      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002856:	f7fe fa01 	bl	8000c5c <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d902      	bls.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	74fb      	strb	r3, [r7, #19]
        break;
 8002868:	e005      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800286a:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ef      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d159      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800287c:	4b2a      	ldr	r3, [pc, #168]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002886:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d01e      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	d019      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002898:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c4:	4a18      	ldr	r2, [pc, #96]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe f9c1 	bl	8000c5c <HAL_GetTick>
 80028da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028dc:	e00b      	b.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe f9bd 	bl	8000c5c <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d902      	bls.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	74fb      	strb	r3, [r7, #19]
            break;
 80028f4:	e006      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ec      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290a:	4b07      	ldr	r3, [pc, #28]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002920:	e008      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002922:	7cfb      	ldrb	r3, [r7, #19]
 8002924:	74bb      	strb	r3, [r7, #18]
 8002926:	e005      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002934:	7c7b      	ldrb	r3, [r7, #17]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4ba6      	ldr	r3, [pc, #664]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	4aa5      	ldr	r2, [pc, #660]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002952:	4ba0      	ldr	r3, [pc, #640]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f023 0203 	bic.w	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	499c      	ldr	r1, [pc, #624]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002974:	4b97      	ldr	r3, [pc, #604]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 020c 	bic.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4994      	ldr	r1, [pc, #592]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002996:	4b8f      	ldr	r3, [pc, #572]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	498b      	ldr	r1, [pc, #556]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b8:	4b86      	ldr	r3, [pc, #536]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	4983      	ldr	r1, [pc, #524]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029da:	4b7e      	ldr	r3, [pc, #504]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	497a      	ldr	r1, [pc, #488]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029fc:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4972      	ldr	r1, [pc, #456]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a1e:	4b6d      	ldr	r3, [pc, #436]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	4969      	ldr	r1, [pc, #420]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4961      	ldr	r1, [pc, #388]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a62:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	4958      	ldr	r1, [pc, #352]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	4950      	ldr	r1, [pc, #320]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d015      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002abc:	4b45      	ldr	r3, [pc, #276]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	4942      	ldr	r1, [pc, #264]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d015      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002af4:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4934      	ldr	r1, [pc, #208]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b12:	d105      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b14:	4b2f      	ldr	r3, [pc, #188]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a2e      	ldr	r2, [pc, #184]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	4926      	ldr	r1, [pc, #152]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b64:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	4918      	ldr	r1, [pc, #96]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b82:	d105      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d015      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e042      	b.n	8002c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fd ff19 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2224      	movs	r2, #36	; 0x24
 8002c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0201 	bic.w	r2, r2, #1
 8002c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8c4 	bl	8002da8 <UART_SetConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e022      	b.n	8002c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f001 fa72 	bl	800411c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f001 faf9 	bl	8004260 <UART_CheckIdleState>
 8002c6e:	4603      	mov	r3, r0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	; 0x28
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	4613      	mov	r3, r2
 8002c86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	f040 8083 	bne.w	8002d9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_UART_Transmit+0x28>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e07b      	b.n	8002d9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Transmit+0x3a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e074      	b.n	8002d9c <HAL_UART_Transmit+0x124>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002cca:	f7fd ffc7 	bl	8000c5c <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce8:	d108      	bne.n	8002cfc <HAL_UART_Transmit+0x84>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	e003      	b.n	8002d04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d04:	e02c      	b.n	8002d60 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f001 faed 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e03d      	b.n	8002d9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e007      	b.n	8002d4e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1cc      	bne.n	8002d06 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2200      	movs	r2, #0
 8002d74:	2140      	movs	r1, #64	; 0x40
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f001 faba 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e00a      	b.n	8002d9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e000      	b.n	8002d9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2302      	movs	r3, #2
  }
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	0000      	movs	r0, r0
	...

08002da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002dac:	b08a      	sub	sp, #40	; 0x28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4ba4      	ldr	r3, [pc, #656]	; (8003078 <UART_SetConfig+0x2d0>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a99      	ldr	r2, [pc, #612]	; (800307c <UART_SetConfig+0x2d4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e20:	4313      	orrs	r3, r2
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6812      	ldr	r2, [r2, #0]
 8002e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	f023 010f 	bic.w	r1, r3, #15
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a8a      	ldr	r2, [pc, #552]	; (8003080 <UART_SetConfig+0x2d8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d126      	bne.n	8002eaa <UART_SetConfig+0x102>
 8002e5c:	4b89      	ldr	r3, [pc, #548]	; (8003084 <UART_SetConfig+0x2dc>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d81a      	bhi.n	8002ea0 <UART_SetConfig+0xf8>
 8002e6a:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <UART_SetConfig+0xc8>)
 8002e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e91 	.word	0x08002e91
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e99 	.word	0x08002e99
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e86:	e0d6      	b.n	8003036 <UART_SetConfig+0x28e>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8e:	e0d2      	b.n	8003036 <UART_SetConfig+0x28e>
 8002e90:	2304      	movs	r3, #4
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e0ce      	b.n	8003036 <UART_SetConfig+0x28e>
 8002e98:	2308      	movs	r3, #8
 8002e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9e:	e0ca      	b.n	8003036 <UART_SetConfig+0x28e>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea6:	bf00      	nop
 8002ea8:	e0c5      	b.n	8003036 <UART_SetConfig+0x28e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a76      	ldr	r2, [pc, #472]	; (8003088 <UART_SetConfig+0x2e0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d138      	bne.n	8002f26 <UART_SetConfig+0x17e>
 8002eb4:	4b73      	ldr	r3, [pc, #460]	; (8003084 <UART_SetConfig+0x2dc>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d82c      	bhi.n	8002f1c <UART_SetConfig+0x174>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <UART_SetConfig+0x120>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002f1d 	.word	0x08002f1d
 8002ed0:	08002f1d 	.word	0x08002f1d
 8002ed4:	08002f1d 	.word	0x08002f1d
 8002ed8:	08002f0d 	.word	0x08002f0d
 8002edc:	08002f1d 	.word	0x08002f1d
 8002ee0:	08002f1d 	.word	0x08002f1d
 8002ee4:	08002f1d 	.word	0x08002f1d
 8002ee8:	08002f05 	.word	0x08002f05
 8002eec:	08002f1d 	.word	0x08002f1d
 8002ef0:	08002f1d 	.word	0x08002f1d
 8002ef4:	08002f1d 	.word	0x08002f1d
 8002ef8:	08002f15 	.word	0x08002f15
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	e098      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f04:	2302      	movs	r3, #2
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0a:	e094      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f12:	e090      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f14:	2308      	movs	r3, #8
 8002f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1a:	e08c      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f1c:	2310      	movs	r3, #16
 8002f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f22:	bf00      	nop
 8002f24:	e087      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a58      	ldr	r2, [pc, #352]	; (800308c <UART_SetConfig+0x2e4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d125      	bne.n	8002f7c <UART_SetConfig+0x1d4>
 8002f30:	4b54      	ldr	r3, [pc, #336]	; (8003084 <UART_SetConfig+0x2dc>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d011      	beq.n	8002f62 <UART_SetConfig+0x1ba>
 8002f3e:	2b10      	cmp	r3, #16
 8002f40:	d802      	bhi.n	8002f48 <UART_SetConfig+0x1a0>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <UART_SetConfig+0x1aa>
 8002f46:	e014      	b.n	8002f72 <UART_SetConfig+0x1ca>
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d006      	beq.n	8002f5a <UART_SetConfig+0x1b2>
 8002f4c:	2b30      	cmp	r3, #48	; 0x30
 8002f4e:	d00c      	beq.n	8002f6a <UART_SetConfig+0x1c2>
 8002f50:	e00f      	b.n	8002f72 <UART_SetConfig+0x1ca>
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f58:	e06d      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f60:	e069      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f62:	2304      	movs	r3, #4
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f68:	e065      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f70:	e061      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f72:	2310      	movs	r3, #16
 8002f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f78:	bf00      	nop
 8002f7a:	e05c      	b.n	8003036 <UART_SetConfig+0x28e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a43      	ldr	r2, [pc, #268]	; (8003090 <UART_SetConfig+0x2e8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d125      	bne.n	8002fd2 <UART_SetConfig+0x22a>
 8002f86:	4b3f      	ldr	r3, [pc, #252]	; (8003084 <UART_SetConfig+0x2dc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f90:	2b40      	cmp	r3, #64	; 0x40
 8002f92:	d011      	beq.n	8002fb8 <UART_SetConfig+0x210>
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d802      	bhi.n	8002f9e <UART_SetConfig+0x1f6>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0x200>
 8002f9c:	e014      	b.n	8002fc8 <UART_SetConfig+0x220>
 8002f9e:	2b80      	cmp	r3, #128	; 0x80
 8002fa0:	d006      	beq.n	8002fb0 <UART_SetConfig+0x208>
 8002fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8002fa4:	d00c      	beq.n	8002fc0 <UART_SetConfig+0x218>
 8002fa6:	e00f      	b.n	8002fc8 <UART_SetConfig+0x220>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e042      	b.n	8003036 <UART_SetConfig+0x28e>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e03e      	b.n	8003036 <UART_SetConfig+0x28e>
 8002fb8:	2304      	movs	r3, #4
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e03a      	b.n	8003036 <UART_SetConfig+0x28e>
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e036      	b.n	8003036 <UART_SetConfig+0x28e>
 8002fc8:	2310      	movs	r3, #16
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	bf00      	nop
 8002fd0:	e031      	b.n	8003036 <UART_SetConfig+0x28e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a29      	ldr	r2, [pc, #164]	; (800307c <UART_SetConfig+0x2d4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d129      	bne.n	8003030 <UART_SetConfig+0x288>
 8002fdc:	4b29      	ldr	r3, [pc, #164]	; (8003084 <UART_SetConfig+0x2dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fea:	d014      	beq.n	8003016 <UART_SetConfig+0x26e>
 8002fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff0:	d802      	bhi.n	8002ff8 <UART_SetConfig+0x250>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <UART_SetConfig+0x25e>
 8002ff6:	e016      	b.n	8003026 <UART_SetConfig+0x27e>
 8002ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffc:	d007      	beq.n	800300e <UART_SetConfig+0x266>
 8002ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003002:	d00c      	beq.n	800301e <UART_SetConfig+0x276>
 8003004:	e00f      	b.n	8003026 <UART_SetConfig+0x27e>
 8003006:	2300      	movs	r3, #0
 8003008:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300c:	e013      	b.n	8003036 <UART_SetConfig+0x28e>
 800300e:	2302      	movs	r3, #2
 8003010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003014:	e00f      	b.n	8003036 <UART_SetConfig+0x28e>
 8003016:	2304      	movs	r3, #4
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301c:	e00b      	b.n	8003036 <UART_SetConfig+0x28e>
 800301e:	2308      	movs	r3, #8
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003024:	e007      	b.n	8003036 <UART_SetConfig+0x28e>
 8003026:	2310      	movs	r3, #16
 8003028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302c:	bf00      	nop
 800302e:	e002      	b.n	8003036 <UART_SetConfig+0x28e>
 8003030:	2310      	movs	r3, #16
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a10      	ldr	r2, [pc, #64]	; (800307c <UART_SetConfig+0x2d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	f040 842e 	bne.w	800389e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003046:	2b08      	cmp	r3, #8
 8003048:	f200 8169 	bhi.w	800331e <UART_SetConfig+0x576>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0x2ac>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003095 	.word	0x08003095
 8003058:	0800331f 	.word	0x0800331f
 800305c:	08003137 	.word	0x08003137
 8003060:	0800331f 	.word	0x0800331f
 8003064:	080031cf 	.word	0x080031cf
 8003068:	0800331f 	.word	0x0800331f
 800306c:	0800331f 	.word	0x0800331f
 8003070:	0800331f 	.word	0x0800331f
 8003074:	08003271 	.word	0x08003271
 8003078:	cfff69f3 	.word	0xcfff69f3
 800307c:	40008000 	.word	0x40008000
 8003080:	40013800 	.word	0x40013800
 8003084:	40021000 	.word	0x40021000
 8003088:	40004400 	.word	0x40004400
 800308c:	40004800 	.word	0x40004800
 8003090:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003094:	f7ff fb3e 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d044      	beq.n	800312c <UART_SetConfig+0x384>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d03e      	beq.n	8003128 <UART_SetConfig+0x380>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d038      	beq.n	8003124 <UART_SetConfig+0x37c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d032      	beq.n	8003120 <UART_SetConfig+0x378>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d02c      	beq.n	800311c <UART_SetConfig+0x374>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d026      	beq.n	8003118 <UART_SetConfig+0x370>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d020      	beq.n	8003114 <UART_SetConfig+0x36c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d01a      	beq.n	8003110 <UART_SetConfig+0x368>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d014      	beq.n	800310c <UART_SetConfig+0x364>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	2b09      	cmp	r3, #9
 80030e8:	d00e      	beq.n	8003108 <UART_SetConfig+0x360>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b0a      	cmp	r3, #10
 80030f0:	d008      	beq.n	8003104 <UART_SetConfig+0x35c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	2b0b      	cmp	r3, #11
 80030f8:	d102      	bne.n	8003100 <UART_SetConfig+0x358>
 80030fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fe:	e016      	b.n	800312e <UART_SetConfig+0x386>
 8003100:	2301      	movs	r3, #1
 8003102:	e014      	b.n	800312e <UART_SetConfig+0x386>
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	e012      	b.n	800312e <UART_SetConfig+0x386>
 8003108:	2340      	movs	r3, #64	; 0x40
 800310a:	e010      	b.n	800312e <UART_SetConfig+0x386>
 800310c:	2320      	movs	r3, #32
 800310e:	e00e      	b.n	800312e <UART_SetConfig+0x386>
 8003110:	2310      	movs	r3, #16
 8003112:	e00c      	b.n	800312e <UART_SetConfig+0x386>
 8003114:	230c      	movs	r3, #12
 8003116:	e00a      	b.n	800312e <UART_SetConfig+0x386>
 8003118:	230a      	movs	r3, #10
 800311a:	e008      	b.n	800312e <UART_SetConfig+0x386>
 800311c:	2308      	movs	r3, #8
 800311e:	e006      	b.n	800312e <UART_SetConfig+0x386>
 8003120:	2306      	movs	r3, #6
 8003122:	e004      	b.n	800312e <UART_SetConfig+0x386>
 8003124:	2304      	movs	r3, #4
 8003126:	e002      	b.n	800312e <UART_SetConfig+0x386>
 8003128:	2302      	movs	r3, #2
 800312a:	e000      	b.n	800312e <UART_SetConfig+0x386>
 800312c:	2301      	movs	r3, #1
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
        break;
 8003134:	e0f6      	b.n	8003324 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b00      	cmp	r3, #0
 800313c:	d044      	beq.n	80031c8 <UART_SetConfig+0x420>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b01      	cmp	r3, #1
 8003144:	d03e      	beq.n	80031c4 <UART_SetConfig+0x41c>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b02      	cmp	r3, #2
 800314c:	d038      	beq.n	80031c0 <UART_SetConfig+0x418>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b03      	cmp	r3, #3
 8003154:	d032      	beq.n	80031bc <UART_SetConfig+0x414>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2b04      	cmp	r3, #4
 800315c:	d02c      	beq.n	80031b8 <UART_SetConfig+0x410>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b05      	cmp	r3, #5
 8003164:	d026      	beq.n	80031b4 <UART_SetConfig+0x40c>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b06      	cmp	r3, #6
 800316c:	d020      	beq.n	80031b0 <UART_SetConfig+0x408>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b07      	cmp	r3, #7
 8003174:	d01a      	beq.n	80031ac <UART_SetConfig+0x404>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2b08      	cmp	r3, #8
 800317c:	d014      	beq.n	80031a8 <UART_SetConfig+0x400>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2b09      	cmp	r3, #9
 8003184:	d00e      	beq.n	80031a4 <UART_SetConfig+0x3fc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d008      	beq.n	80031a0 <UART_SetConfig+0x3f8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	2b0b      	cmp	r3, #11
 8003194:	d102      	bne.n	800319c <UART_SetConfig+0x3f4>
 8003196:	f24f 4324 	movw	r3, #62500	; 0xf424
 800319a:	e016      	b.n	80031ca <UART_SetConfig+0x422>
 800319c:	4ba1      	ldr	r3, [pc, #644]	; (8003424 <UART_SetConfig+0x67c>)
 800319e:	e014      	b.n	80031ca <UART_SetConfig+0x422>
 80031a0:	4ba1      	ldr	r3, [pc, #644]	; (8003428 <UART_SetConfig+0x680>)
 80031a2:	e012      	b.n	80031ca <UART_SetConfig+0x422>
 80031a4:	4ba1      	ldr	r3, [pc, #644]	; (800342c <UART_SetConfig+0x684>)
 80031a6:	e010      	b.n	80031ca <UART_SetConfig+0x422>
 80031a8:	4ba1      	ldr	r3, [pc, #644]	; (8003430 <UART_SetConfig+0x688>)
 80031aa:	e00e      	b.n	80031ca <UART_SetConfig+0x422>
 80031ac:	4ba1      	ldr	r3, [pc, #644]	; (8003434 <UART_SetConfig+0x68c>)
 80031ae:	e00c      	b.n	80031ca <UART_SetConfig+0x422>
 80031b0:	4ba1      	ldr	r3, [pc, #644]	; (8003438 <UART_SetConfig+0x690>)
 80031b2:	e00a      	b.n	80031ca <UART_SetConfig+0x422>
 80031b4:	4ba1      	ldr	r3, [pc, #644]	; (800343c <UART_SetConfig+0x694>)
 80031b6:	e008      	b.n	80031ca <UART_SetConfig+0x422>
 80031b8:	4ba1      	ldr	r3, [pc, #644]	; (8003440 <UART_SetConfig+0x698>)
 80031ba:	e006      	b.n	80031ca <UART_SetConfig+0x422>
 80031bc:	4ba1      	ldr	r3, [pc, #644]	; (8003444 <UART_SetConfig+0x69c>)
 80031be:	e004      	b.n	80031ca <UART_SetConfig+0x422>
 80031c0:	4ba1      	ldr	r3, [pc, #644]	; (8003448 <UART_SetConfig+0x6a0>)
 80031c2:	e002      	b.n	80031ca <UART_SetConfig+0x422>
 80031c4:	4ba1      	ldr	r3, [pc, #644]	; (800344c <UART_SetConfig+0x6a4>)
 80031c6:	e000      	b.n	80031ca <UART_SetConfig+0x422>
 80031c8:	4b96      	ldr	r3, [pc, #600]	; (8003424 <UART_SetConfig+0x67c>)
 80031ca:	617b      	str	r3, [r7, #20]
        break;
 80031cc:	e0aa      	b.n	8003324 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80031ce:	f7ff fa33 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d044      	beq.n	8003266 <UART_SetConfig+0x4be>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d03e      	beq.n	8003262 <UART_SetConfig+0x4ba>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d038      	beq.n	800325e <UART_SetConfig+0x4b6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d032      	beq.n	800325a <UART_SetConfig+0x4b2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d02c      	beq.n	8003256 <UART_SetConfig+0x4ae>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b05      	cmp	r3, #5
 8003202:	d026      	beq.n	8003252 <UART_SetConfig+0x4aa>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b06      	cmp	r3, #6
 800320a:	d020      	beq.n	800324e <UART_SetConfig+0x4a6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b07      	cmp	r3, #7
 8003212:	d01a      	beq.n	800324a <UART_SetConfig+0x4a2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2b08      	cmp	r3, #8
 800321a:	d014      	beq.n	8003246 <UART_SetConfig+0x49e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b09      	cmp	r3, #9
 8003222:	d00e      	beq.n	8003242 <UART_SetConfig+0x49a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b0a      	cmp	r3, #10
 800322a:	d008      	beq.n	800323e <UART_SetConfig+0x496>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b0b      	cmp	r3, #11
 8003232:	d102      	bne.n	800323a <UART_SetConfig+0x492>
 8003234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003238:	e016      	b.n	8003268 <UART_SetConfig+0x4c0>
 800323a:	2301      	movs	r3, #1
 800323c:	e014      	b.n	8003268 <UART_SetConfig+0x4c0>
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	e012      	b.n	8003268 <UART_SetConfig+0x4c0>
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	e010      	b.n	8003268 <UART_SetConfig+0x4c0>
 8003246:	2320      	movs	r3, #32
 8003248:	e00e      	b.n	8003268 <UART_SetConfig+0x4c0>
 800324a:	2310      	movs	r3, #16
 800324c:	e00c      	b.n	8003268 <UART_SetConfig+0x4c0>
 800324e:	230c      	movs	r3, #12
 8003250:	e00a      	b.n	8003268 <UART_SetConfig+0x4c0>
 8003252:	230a      	movs	r3, #10
 8003254:	e008      	b.n	8003268 <UART_SetConfig+0x4c0>
 8003256:	2308      	movs	r3, #8
 8003258:	e006      	b.n	8003268 <UART_SetConfig+0x4c0>
 800325a:	2306      	movs	r3, #6
 800325c:	e004      	b.n	8003268 <UART_SetConfig+0x4c0>
 800325e:	2304      	movs	r3, #4
 8003260:	e002      	b.n	8003268 <UART_SetConfig+0x4c0>
 8003262:	2302      	movs	r3, #2
 8003264:	e000      	b.n	8003268 <UART_SetConfig+0x4c0>
 8003266:	2301      	movs	r3, #1
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
        break;
 800326e:	e059      	b.n	8003324 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	2b00      	cmp	r3, #0
 8003276:	d04e      	beq.n	8003316 <UART_SetConfig+0x56e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	2b01      	cmp	r3, #1
 800327e:	d047      	beq.n	8003310 <UART_SetConfig+0x568>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b02      	cmp	r3, #2
 8003286:	d040      	beq.n	800330a <UART_SetConfig+0x562>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2b03      	cmp	r3, #3
 800328e:	d039      	beq.n	8003304 <UART_SetConfig+0x55c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b04      	cmp	r3, #4
 8003296:	d032      	beq.n	80032fe <UART_SetConfig+0x556>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b05      	cmp	r3, #5
 800329e:	d02b      	beq.n	80032f8 <UART_SetConfig+0x550>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d024      	beq.n	80032f2 <UART_SetConfig+0x54a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b07      	cmp	r3, #7
 80032ae:	d01d      	beq.n	80032ec <UART_SetConfig+0x544>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d016      	beq.n	80032e6 <UART_SetConfig+0x53e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d00f      	beq.n	80032e0 <UART_SetConfig+0x538>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	2b0a      	cmp	r3, #10
 80032c6:	d008      	beq.n	80032da <UART_SetConfig+0x532>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	2b0b      	cmp	r3, #11
 80032ce:	d101      	bne.n	80032d4 <UART_SetConfig+0x52c>
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	e022      	b.n	800331a <UART_SetConfig+0x572>
 80032d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d8:	e01f      	b.n	800331a <UART_SetConfig+0x572>
 80032da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032de:	e01c      	b.n	800331a <UART_SetConfig+0x572>
 80032e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e4:	e019      	b.n	800331a <UART_SetConfig+0x572>
 80032e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ea:	e016      	b.n	800331a <UART_SetConfig+0x572>
 80032ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032f0:	e013      	b.n	800331a <UART_SetConfig+0x572>
 80032f2:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80032f6:	e010      	b.n	800331a <UART_SetConfig+0x572>
 80032f8:	f640 43cc 	movw	r3, #3276	; 0xccc
 80032fc:	e00d      	b.n	800331a <UART_SetConfig+0x572>
 80032fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003302:	e00a      	b.n	800331a <UART_SetConfig+0x572>
 8003304:	f241 5355 	movw	r3, #5461	; 0x1555
 8003308:	e007      	b.n	800331a <UART_SetConfig+0x572>
 800330a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800330e:	e004      	b.n	800331a <UART_SetConfig+0x572>
 8003310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003314:	e001      	b.n	800331a <UART_SetConfig+0x572>
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	617b      	str	r3, [r7, #20]
        break;
 800331c:	e002      	b.n	8003324 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	76fb      	strb	r3, [r7, #27]
        break;
 8003322:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 86cd 	beq.w	80040c6 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	d305      	bcc.n	8003348 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	d903      	bls.n	8003350 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	76fb      	strb	r3, [r7, #27]
 800334c:	f000 bebb 	b.w	80040c6 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8003350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003354:	2b08      	cmp	r3, #8
 8003356:	f200 828d 	bhi.w	8003874 <UART_SetConfig+0xacc>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <UART_SetConfig+0x5b8>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003385 	.word	0x08003385
 8003364:	08003875 	.word	0x08003875
 8003368:	080034ef 	.word	0x080034ef
 800336c:	08003875 	.word	0x08003875
 8003370:	080035e5 	.word	0x080035e5
 8003374:	08003875 	.word	0x08003875
 8003378:	08003875 	.word	0x08003875
 800337c:	08003875 	.word	0x08003875
 8003380:	08003723 	.word	0x08003723
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7ff f9c6 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003388:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4618      	mov	r0, r3
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	2b00      	cmp	r3, #0
 8003398:	d07d      	beq.n	8003496 <UART_SetConfig+0x6ee>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d074      	beq.n	800348c <UART_SetConfig+0x6e4>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d06b      	beq.n	8003482 <UART_SetConfig+0x6da>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d062      	beq.n	8003478 <UART_SetConfig+0x6d0>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d059      	beq.n	800346e <UART_SetConfig+0x6c6>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d050      	beq.n	8003464 <UART_SetConfig+0x6bc>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d047      	beq.n	800345a <UART_SetConfig+0x6b2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b07      	cmp	r3, #7
 80033d0:	d03e      	beq.n	8003450 <UART_SetConfig+0x6a8>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d01f      	beq.n	800341a <UART_SetConfig+0x672>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b09      	cmp	r3, #9
 80033e0:	d016      	beq.n	8003410 <UART_SetConfig+0x668>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	2b0a      	cmp	r3, #10
 80033e8:	d00d      	beq.n	8003406 <UART_SetConfig+0x65e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	2b0b      	cmp	r3, #11
 80033f0:	d104      	bne.n	80033fc <UART_SetConfig+0x654>
 80033f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f6:	f04f 0400 	mov.w	r4, #0
 80033fa:	e050      	b.n	800349e <UART_SetConfig+0x6f6>
 80033fc:	f04f 0301 	mov.w	r3, #1
 8003400:	f04f 0400 	mov.w	r4, #0
 8003404:	e04b      	b.n	800349e <UART_SetConfig+0x6f6>
 8003406:	f04f 0380 	mov.w	r3, #128	; 0x80
 800340a:	f04f 0400 	mov.w	r4, #0
 800340e:	e046      	b.n	800349e <UART_SetConfig+0x6f6>
 8003410:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003414:	f04f 0400 	mov.w	r4, #0
 8003418:	e041      	b.n	800349e <UART_SetConfig+0x6f6>
 800341a:	f04f 0320 	mov.w	r3, #32
 800341e:	f04f 0400 	mov.w	r4, #0
 8003422:	e03c      	b.n	800349e <UART_SetConfig+0x6f6>
 8003424:	00f42400 	.word	0x00f42400
 8003428:	0001e848 	.word	0x0001e848
 800342c:	0003d090 	.word	0x0003d090
 8003430:	0007a120 	.word	0x0007a120
 8003434:	000f4240 	.word	0x000f4240
 8003438:	00145855 	.word	0x00145855
 800343c:	00186a00 	.word	0x00186a00
 8003440:	001e8480 	.word	0x001e8480
 8003444:	0028b0aa 	.word	0x0028b0aa
 8003448:	003d0900 	.word	0x003d0900
 800344c:	007a1200 	.word	0x007a1200
 8003450:	f04f 0310 	mov.w	r3, #16
 8003454:	f04f 0400 	mov.w	r4, #0
 8003458:	e021      	b.n	800349e <UART_SetConfig+0x6f6>
 800345a:	f04f 030c 	mov.w	r3, #12
 800345e:	f04f 0400 	mov.w	r4, #0
 8003462:	e01c      	b.n	800349e <UART_SetConfig+0x6f6>
 8003464:	f04f 030a 	mov.w	r3, #10
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	e017      	b.n	800349e <UART_SetConfig+0x6f6>
 800346e:	f04f 0308 	mov.w	r3, #8
 8003472:	f04f 0400 	mov.w	r4, #0
 8003476:	e012      	b.n	800349e <UART_SetConfig+0x6f6>
 8003478:	f04f 0306 	mov.w	r3, #6
 800347c:	f04f 0400 	mov.w	r4, #0
 8003480:	e00d      	b.n	800349e <UART_SetConfig+0x6f6>
 8003482:	f04f 0304 	mov.w	r3, #4
 8003486:	f04f 0400 	mov.w	r4, #0
 800348a:	e008      	b.n	800349e <UART_SetConfig+0x6f6>
 800348c:	f04f 0302 	mov.w	r3, #2
 8003490:	f04f 0400 	mov.w	r4, #0
 8003494:	e003      	b.n	800349e <UART_SetConfig+0x6f6>
 8003496:	f04f 0301 	mov.w	r3, #1
 800349a:	f04f 0400 	mov.w	r4, #0
 800349e:	461a      	mov	r2, r3
 80034a0:	4623      	mov	r3, r4
 80034a2:	f7fc feb9 	bl	8000218 <__aeabi_uldivmod>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	4619      	mov	r1, r3
 80034ac:	4622      	mov	r2, r4
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f04f 0400 	mov.w	r4, #0
 80034b6:	0214      	lsls	r4, r2, #8
 80034b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80034bc:	020b      	lsls	r3, r1, #8
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6852      	ldr	r2, [r2, #4]
 80034c2:	0852      	lsrs	r2, r2, #1
 80034c4:	4611      	mov	r1, r2
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	eb13 0b01 	adds.w	fp, r3, r1
 80034ce:	eb44 0c02 	adc.w	ip, r4, r2
 80034d2:	4658      	mov	r0, fp
 80034d4:	4661      	mov	r1, ip
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f04f 0400 	mov.w	r4, #0
 80034de:	461a      	mov	r2, r3
 80034e0:	4623      	mov	r3, r4
 80034e2:	f7fc fe99 	bl	8000218 <__aeabi_uldivmod>
 80034e6:	4603      	mov	r3, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	61fb      	str	r3, [r7, #28]
            break;
 80034ec:	e1c5      	b.n	800387a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d05b      	beq.n	80035ae <UART_SetConfig+0x806>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d053      	beq.n	80035a6 <UART_SetConfig+0x7fe>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b02      	cmp	r3, #2
 8003504:	d04b      	beq.n	800359e <UART_SetConfig+0x7f6>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	2b03      	cmp	r3, #3
 800350c:	d043      	beq.n	8003596 <UART_SetConfig+0x7ee>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b04      	cmp	r3, #4
 8003514:	d03b      	beq.n	800358e <UART_SetConfig+0x7e6>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b05      	cmp	r3, #5
 800351c:	d033      	beq.n	8003586 <UART_SetConfig+0x7de>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b06      	cmp	r3, #6
 8003524:	d02b      	beq.n	800357e <UART_SetConfig+0x7d6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2b07      	cmp	r3, #7
 800352c:	d023      	beq.n	8003576 <UART_SetConfig+0x7ce>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	2b08      	cmp	r3, #8
 8003534:	d01b      	beq.n	800356e <UART_SetConfig+0x7c6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b09      	cmp	r3, #9
 800353c:	d013      	beq.n	8003566 <UART_SetConfig+0x7be>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	2b0a      	cmp	r3, #10
 8003544:	d00b      	beq.n	800355e <UART_SetConfig+0x7b6>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b0b      	cmp	r3, #11
 800354c:	d103      	bne.n	8003556 <UART_SetConfig+0x7ae>
 800354e:	4bae      	ldr	r3, [pc, #696]	; (8003808 <UART_SetConfig+0xa60>)
 8003550:	f04f 0400 	mov.w	r4, #0
 8003554:	e02e      	b.n	80035b4 <UART_SetConfig+0x80c>
 8003556:	4bad      	ldr	r3, [pc, #692]	; (800380c <UART_SetConfig+0xa64>)
 8003558:	f04f 0400 	mov.w	r4, #0
 800355c:	e02a      	b.n	80035b4 <UART_SetConfig+0x80c>
 800355e:	4bac      	ldr	r3, [pc, #688]	; (8003810 <UART_SetConfig+0xa68>)
 8003560:	f04f 0400 	mov.w	r4, #0
 8003564:	e026      	b.n	80035b4 <UART_SetConfig+0x80c>
 8003566:	4bab      	ldr	r3, [pc, #684]	; (8003814 <UART_SetConfig+0xa6c>)
 8003568:	f04f 0400 	mov.w	r4, #0
 800356c:	e022      	b.n	80035b4 <UART_SetConfig+0x80c>
 800356e:	4baa      	ldr	r3, [pc, #680]	; (8003818 <UART_SetConfig+0xa70>)
 8003570:	f04f 0400 	mov.w	r4, #0
 8003574:	e01e      	b.n	80035b4 <UART_SetConfig+0x80c>
 8003576:	4ba9      	ldr	r3, [pc, #676]	; (800381c <UART_SetConfig+0xa74>)
 8003578:	f04f 0400 	mov.w	r4, #0
 800357c:	e01a      	b.n	80035b4 <UART_SetConfig+0x80c>
 800357e:	a49e      	add	r4, pc, #632	; (adr r4, 80037f8 <UART_SetConfig+0xa50>)
 8003580:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003584:	e016      	b.n	80035b4 <UART_SetConfig+0x80c>
 8003586:	4ba6      	ldr	r3, [pc, #664]	; (8003820 <UART_SetConfig+0xa78>)
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	e012      	b.n	80035b4 <UART_SetConfig+0x80c>
 800358e:	4ba5      	ldr	r3, [pc, #660]	; (8003824 <UART_SetConfig+0xa7c>)
 8003590:	f04f 0400 	mov.w	r4, #0
 8003594:	e00e      	b.n	80035b4 <UART_SetConfig+0x80c>
 8003596:	a49a      	add	r4, pc, #616	; (adr r4, 8003800 <UART_SetConfig+0xa58>)
 8003598:	e9d4 3400 	ldrd	r3, r4, [r4]
 800359c:	e00a      	b.n	80035b4 <UART_SetConfig+0x80c>
 800359e:	4ba2      	ldr	r3, [pc, #648]	; (8003828 <UART_SetConfig+0xa80>)
 80035a0:	f04f 0400 	mov.w	r4, #0
 80035a4:	e006      	b.n	80035b4 <UART_SetConfig+0x80c>
 80035a6:	4ba1      	ldr	r3, [pc, #644]	; (800382c <UART_SetConfig+0xa84>)
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	e002      	b.n	80035b4 <UART_SetConfig+0x80c>
 80035ae:	4b97      	ldr	r3, [pc, #604]	; (800380c <UART_SetConfig+0xa64>)
 80035b0:	f04f 0400 	mov.w	r4, #0
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6852      	ldr	r2, [r2, #4]
 80035b8:	0852      	lsrs	r2, r2, #1
 80035ba:	4611      	mov	r1, r2
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	eb13 0b01 	adds.w	fp, r3, r1
 80035c4:	eb44 0c02 	adc.w	ip, r4, r2
 80035c8:	4658      	mov	r0, fp
 80035ca:	4661      	mov	r1, ip
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f04f 0400 	mov.w	r4, #0
 80035d4:	461a      	mov	r2, r3
 80035d6:	4623      	mov	r3, r4
 80035d8:	f7fc fe1e 	bl	8000218 <__aeabi_uldivmod>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	61fb      	str	r3, [r7, #28]
            break;
 80035e2:	e14a      	b.n	800387a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80035e4:	f7ff f828 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 80035e8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d067      	beq.n	80036ca <UART_SetConfig+0x922>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d05e      	beq.n	80036c0 <UART_SetConfig+0x918>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	2b02      	cmp	r3, #2
 8003608:	d055      	beq.n	80036b6 <UART_SetConfig+0x90e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b03      	cmp	r3, #3
 8003610:	d04c      	beq.n	80036ac <UART_SetConfig+0x904>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b04      	cmp	r3, #4
 8003618:	d043      	beq.n	80036a2 <UART_SetConfig+0x8fa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	2b05      	cmp	r3, #5
 8003620:	d03a      	beq.n	8003698 <UART_SetConfig+0x8f0>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b06      	cmp	r3, #6
 8003628:	d031      	beq.n	800368e <UART_SetConfig+0x8e6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	2b07      	cmp	r3, #7
 8003630:	d028      	beq.n	8003684 <UART_SetConfig+0x8dc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b08      	cmp	r3, #8
 8003638:	d01f      	beq.n	800367a <UART_SetConfig+0x8d2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	2b09      	cmp	r3, #9
 8003640:	d016      	beq.n	8003670 <UART_SetConfig+0x8c8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b0a      	cmp	r3, #10
 8003648:	d00d      	beq.n	8003666 <UART_SetConfig+0x8be>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	2b0b      	cmp	r3, #11
 8003650:	d104      	bne.n	800365c <UART_SetConfig+0x8b4>
 8003652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003656:	f04f 0400 	mov.w	r4, #0
 800365a:	e03a      	b.n	80036d2 <UART_SetConfig+0x92a>
 800365c:	f04f 0301 	mov.w	r3, #1
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	e035      	b.n	80036d2 <UART_SetConfig+0x92a>
 8003666:	f04f 0380 	mov.w	r3, #128	; 0x80
 800366a:	f04f 0400 	mov.w	r4, #0
 800366e:	e030      	b.n	80036d2 <UART_SetConfig+0x92a>
 8003670:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	e02b      	b.n	80036d2 <UART_SetConfig+0x92a>
 800367a:	f04f 0320 	mov.w	r3, #32
 800367e:	f04f 0400 	mov.w	r4, #0
 8003682:	e026      	b.n	80036d2 <UART_SetConfig+0x92a>
 8003684:	f04f 0310 	mov.w	r3, #16
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	e021      	b.n	80036d2 <UART_SetConfig+0x92a>
 800368e:	f04f 030c 	mov.w	r3, #12
 8003692:	f04f 0400 	mov.w	r4, #0
 8003696:	e01c      	b.n	80036d2 <UART_SetConfig+0x92a>
 8003698:	f04f 030a 	mov.w	r3, #10
 800369c:	f04f 0400 	mov.w	r4, #0
 80036a0:	e017      	b.n	80036d2 <UART_SetConfig+0x92a>
 80036a2:	f04f 0308 	mov.w	r3, #8
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	e012      	b.n	80036d2 <UART_SetConfig+0x92a>
 80036ac:	f04f 0306 	mov.w	r3, #6
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	e00d      	b.n	80036d2 <UART_SetConfig+0x92a>
 80036b6:	f04f 0304 	mov.w	r3, #4
 80036ba:	f04f 0400 	mov.w	r4, #0
 80036be:	e008      	b.n	80036d2 <UART_SetConfig+0x92a>
 80036c0:	f04f 0302 	mov.w	r3, #2
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	e003      	b.n	80036d2 <UART_SetConfig+0x92a>
 80036ca:	f04f 0301 	mov.w	r3, #1
 80036ce:	f04f 0400 	mov.w	r4, #0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4623      	mov	r3, r4
 80036d6:	f7fc fd9f 	bl	8000218 <__aeabi_uldivmod>
 80036da:	4603      	mov	r3, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	4619      	mov	r1, r3
 80036e0:	4622      	mov	r2, r4
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	f04f 0400 	mov.w	r4, #0
 80036ea:	0214      	lsls	r4, r2, #8
 80036ec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036f0:	020b      	lsls	r3, r1, #8
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6852      	ldr	r2, [r2, #4]
 80036f6:	0852      	lsrs	r2, r2, #1
 80036f8:	4611      	mov	r1, r2
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	eb13 0b01 	adds.w	fp, r3, r1
 8003702:	eb44 0c02 	adc.w	ip, r4, r2
 8003706:	4658      	mov	r0, fp
 8003708:	4661      	mov	r1, ip
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f04f 0400 	mov.w	r4, #0
 8003712:	461a      	mov	r2, r3
 8003714:	4623      	mov	r3, r4
 8003716:	f7fc fd7f 	bl	8000218 <__aeabi_uldivmod>
 800371a:	4603      	mov	r3, r0
 800371c:	460c      	mov	r4, r1
 800371e:	61fb      	str	r3, [r7, #28]
            break;
 8003720:	e0ab      	b.n	800387a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8088 	beq.w	800383c <UART_SetConfig+0xa94>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	2b01      	cmp	r3, #1
 8003732:	d05b      	beq.n	80037ec <UART_SetConfig+0xa44>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b02      	cmp	r3, #2
 800373a:	d052      	beq.n	80037e2 <UART_SetConfig+0xa3a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	2b03      	cmp	r3, #3
 8003742:	d04a      	beq.n	80037da <UART_SetConfig+0xa32>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2b04      	cmp	r3, #4
 800374a:	d041      	beq.n	80037d0 <UART_SetConfig+0xa28>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	2b05      	cmp	r3, #5
 8003752:	d039      	beq.n	80037c8 <UART_SetConfig+0xa20>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2b06      	cmp	r3, #6
 800375a:	d031      	beq.n	80037c0 <UART_SetConfig+0xa18>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2b07      	cmp	r3, #7
 8003762:	d028      	beq.n	80037b6 <UART_SetConfig+0xa0e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	2b08      	cmp	r3, #8
 800376a:	d01f      	beq.n	80037ac <UART_SetConfig+0xa04>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003770:	2b09      	cmp	r3, #9
 8003772:	d016      	beq.n	80037a2 <UART_SetConfig+0x9fa>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2b0a      	cmp	r3, #10
 800377a:	d00d      	beq.n	8003798 <UART_SetConfig+0x9f0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b0b      	cmp	r3, #11
 8003782:	d104      	bne.n	800378e <UART_SetConfig+0x9e6>
 8003784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003788:	f04f 0400 	mov.w	r4, #0
 800378c:	e05a      	b.n	8003844 <UART_SetConfig+0xa9c>
 800378e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003792:	f04f 0400 	mov.w	r4, #0
 8003796:	e055      	b.n	8003844 <UART_SetConfig+0xa9c>
 8003798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800379c:	f04f 0400 	mov.w	r4, #0
 80037a0:	e050      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	e04b      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037b0:	f04f 0400 	mov.w	r4, #0
 80037b4:	e046      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80037ba:	f04f 0400 	mov.w	r4, #0
 80037be:	e041      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <UART_SetConfig+0xa88>)
 80037c2:	f04f 0400 	mov.w	r4, #0
 80037c6:	e03d      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <UART_SetConfig+0xa8c>)
 80037ca:	f04f 0400 	mov.w	r4, #0
 80037ce:	e039      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037d4:	f04f 0400 	mov.w	r4, #0
 80037d8:	e034      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <UART_SetConfig+0xa90>)
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	e030      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	e02b      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037f0:	f04f 0400 	mov.w	r4, #0
 80037f4:	e026      	b.n	8003844 <UART_SetConfig+0xa9c>
 80037f6:	bf00      	nop
 80037f8:	14585500 	.word	0x14585500
 80037fc:	00000000 	.word	0x00000000
 8003800:	28b0aa00 	.word	0x28b0aa00
 8003804:	00000000 	.word	0x00000000
 8003808:	00f42400 	.word	0x00f42400
 800380c:	f4240000 	.word	0xf4240000
 8003810:	01e84800 	.word	0x01e84800
 8003814:	03d09000 	.word	0x03d09000
 8003818:	07a12000 	.word	0x07a12000
 800381c:	0f424000 	.word	0x0f424000
 8003820:	186a0000 	.word	0x186a0000
 8003824:	1e848000 	.word	0x1e848000
 8003828:	3d090000 	.word	0x3d090000
 800382c:	7a120000 	.word	0x7a120000
 8003830:	000aaa00 	.word	0x000aaa00
 8003834:	000ccc00 	.word	0x000ccc00
 8003838:	00155500 	.word	0x00155500
 800383c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6852      	ldr	r2, [r2, #4]
 8003848:	0852      	lsrs	r2, r2, #1
 800384a:	4611      	mov	r1, r2
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	eb13 0b01 	adds.w	fp, r3, r1
 8003854:	eb44 0c02 	adc.w	ip, r4, r2
 8003858:	4658      	mov	r0, fp
 800385a:	4661      	mov	r1, ip
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f04f 0400 	mov.w	r4, #0
 8003864:	461a      	mov	r2, r3
 8003866:	4623      	mov	r3, r4
 8003868:	f7fc fcd6 	bl	8000218 <__aeabi_uldivmod>
 800386c:	4603      	mov	r3, r0
 800386e:	460c      	mov	r4, r1
 8003870:	61fb      	str	r3, [r7, #28]
            break;
 8003872:	e002      	b.n	800387a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	76fb      	strb	r3, [r7, #27]
            break;
 8003878:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003880:	d309      	bcc.n	8003896 <UART_SetConfig+0xaee>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003888:	d205      	bcs.n	8003896 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	f000 bc18 	b.w	80040c6 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	76fb      	strb	r3, [r7, #27]
 800389a:	f000 bc14 	b.w	80040c6 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a6:	f040 8204 	bne.w	8003cb2 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 80038aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	f200 81df 	bhi.w	8003c72 <UART_SetConfig+0xeca>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <UART_SetConfig+0xb14>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038e1 	.word	0x080038e1
 80038c0:	08003999 	.word	0x08003999
 80038c4:	08003a51 	.word	0x08003a51
 80038c8:	08003c73 	.word	0x08003c73
 80038cc:	08003af9 	.word	0x08003af9
 80038d0:	08003c73 	.word	0x08003c73
 80038d4:	08003c73 	.word	0x08003c73
 80038d8:	08003c73 	.word	0x08003c73
 80038dc:	08003bb1 	.word	0x08003bb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e0:	f7fe ff18 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80038e4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d044      	beq.n	8003978 <UART_SetConfig+0xbd0>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d03e      	beq.n	8003974 <UART_SetConfig+0xbcc>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d038      	beq.n	8003970 <UART_SetConfig+0xbc8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	2b03      	cmp	r3, #3
 8003904:	d032      	beq.n	800396c <UART_SetConfig+0xbc4>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	2b04      	cmp	r3, #4
 800390c:	d02c      	beq.n	8003968 <UART_SetConfig+0xbc0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	2b05      	cmp	r3, #5
 8003914:	d026      	beq.n	8003964 <UART_SetConfig+0xbbc>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2b06      	cmp	r3, #6
 800391c:	d020      	beq.n	8003960 <UART_SetConfig+0xbb8>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2b07      	cmp	r3, #7
 8003924:	d01a      	beq.n	800395c <UART_SetConfig+0xbb4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2b08      	cmp	r3, #8
 800392c:	d014      	beq.n	8003958 <UART_SetConfig+0xbb0>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2b09      	cmp	r3, #9
 8003934:	d00e      	beq.n	8003954 <UART_SetConfig+0xbac>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	2b0a      	cmp	r3, #10
 800393c:	d008      	beq.n	8003950 <UART_SetConfig+0xba8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b0b      	cmp	r3, #11
 8003944:	d102      	bne.n	800394c <UART_SetConfig+0xba4>
 8003946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800394a:	e016      	b.n	800397a <UART_SetConfig+0xbd2>
 800394c:	2301      	movs	r3, #1
 800394e:	e014      	b.n	800397a <UART_SetConfig+0xbd2>
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	e012      	b.n	800397a <UART_SetConfig+0xbd2>
 8003954:	2340      	movs	r3, #64	; 0x40
 8003956:	e010      	b.n	800397a <UART_SetConfig+0xbd2>
 8003958:	2320      	movs	r3, #32
 800395a:	e00e      	b.n	800397a <UART_SetConfig+0xbd2>
 800395c:	2310      	movs	r3, #16
 800395e:	e00c      	b.n	800397a <UART_SetConfig+0xbd2>
 8003960:	230c      	movs	r3, #12
 8003962:	e00a      	b.n	800397a <UART_SetConfig+0xbd2>
 8003964:	230a      	movs	r3, #10
 8003966:	e008      	b.n	800397a <UART_SetConfig+0xbd2>
 8003968:	2308      	movs	r3, #8
 800396a:	e006      	b.n	800397a <UART_SetConfig+0xbd2>
 800396c:	2306      	movs	r3, #6
 800396e:	e004      	b.n	800397a <UART_SetConfig+0xbd2>
 8003970:	2304      	movs	r3, #4
 8003972:	e002      	b.n	800397a <UART_SetConfig+0xbd2>
 8003974:	2302      	movs	r3, #2
 8003976:	e000      	b.n	800397a <UART_SetConfig+0xbd2>
 8003978:	2301      	movs	r3, #1
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	005a      	lsls	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	61fb      	str	r3, [r7, #28]
        break;
 8003996:	e16f      	b.n	8003c78 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003998:	f7fe fed2 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 800399c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d044      	beq.n	8003a30 <UART_SetConfig+0xc88>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d03e      	beq.n	8003a2c <UART_SetConfig+0xc84>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d038      	beq.n	8003a28 <UART_SetConfig+0xc80>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d032      	beq.n	8003a24 <UART_SetConfig+0xc7c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d02c      	beq.n	8003a20 <UART_SetConfig+0xc78>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d026      	beq.n	8003a1c <UART_SetConfig+0xc74>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d020      	beq.n	8003a18 <UART_SetConfig+0xc70>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2b07      	cmp	r3, #7
 80039dc:	d01a      	beq.n	8003a14 <UART_SetConfig+0xc6c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d014      	beq.n	8003a10 <UART_SetConfig+0xc68>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d00e      	beq.n	8003a0c <UART_SetConfig+0xc64>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b0a      	cmp	r3, #10
 80039f4:	d008      	beq.n	8003a08 <UART_SetConfig+0xc60>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2b0b      	cmp	r3, #11
 80039fc:	d102      	bne.n	8003a04 <UART_SetConfig+0xc5c>
 80039fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a02:	e016      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e014      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	e012      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a0c:	2340      	movs	r3, #64	; 0x40
 8003a0e:	e010      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a10:	2320      	movs	r3, #32
 8003a12:	e00e      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a14:	2310      	movs	r3, #16
 8003a16:	e00c      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	e00a      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a1c:	230a      	movs	r3, #10
 8003a1e:	e008      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a20:	2308      	movs	r3, #8
 8003a22:	e006      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a24:	2306      	movs	r3, #6
 8003a26:	e004      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	e002      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e000      	b.n	8003a32 <UART_SetConfig+0xc8a>
 8003a30:	2301      	movs	r3, #1
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	005a      	lsls	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	441a      	add	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	61fb      	str	r3, [r7, #28]
        break;
 8003a4e:	e113      	b.n	8003c78 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d043      	beq.n	8003ae0 <UART_SetConfig+0xd38>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d03d      	beq.n	8003adc <UART_SetConfig+0xd34>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d037      	beq.n	8003ad8 <UART_SetConfig+0xd30>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d031      	beq.n	8003ad4 <UART_SetConfig+0xd2c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d02b      	beq.n	8003ad0 <UART_SetConfig+0xd28>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	d025      	beq.n	8003acc <UART_SetConfig+0xd24>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d01f      	beq.n	8003ac8 <UART_SetConfig+0xd20>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	d019      	beq.n	8003ac4 <UART_SetConfig+0xd1c>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d013      	beq.n	8003ac0 <UART_SetConfig+0xd18>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b09      	cmp	r3, #9
 8003a9e:	d00d      	beq.n	8003abc <UART_SetConfig+0xd14>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2b0a      	cmp	r3, #10
 8003aa6:	d007      	beq.n	8003ab8 <UART_SetConfig+0xd10>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	2b0b      	cmp	r3, #11
 8003aae:	d101      	bne.n	8003ab4 <UART_SetConfig+0xd0c>
 8003ab0:	4b8d      	ldr	r3, [pc, #564]	; (8003ce8 <UART_SetConfig+0xf40>)
 8003ab2:	e016      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ab4:	4b8d      	ldr	r3, [pc, #564]	; (8003cec <UART_SetConfig+0xf44>)
 8003ab6:	e014      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ab8:	4b8d      	ldr	r3, [pc, #564]	; (8003cf0 <UART_SetConfig+0xf48>)
 8003aba:	e012      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003abc:	4b8d      	ldr	r3, [pc, #564]	; (8003cf4 <UART_SetConfig+0xf4c>)
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ac0:	4b8d      	ldr	r3, [pc, #564]	; (8003cf8 <UART_SetConfig+0xf50>)
 8003ac2:	e00e      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ac4:	4b8d      	ldr	r3, [pc, #564]	; (8003cfc <UART_SetConfig+0xf54>)
 8003ac6:	e00c      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ac8:	4b8d      	ldr	r3, [pc, #564]	; (8003d00 <UART_SetConfig+0xf58>)
 8003aca:	e00a      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003acc:	4b8d      	ldr	r3, [pc, #564]	; (8003d04 <UART_SetConfig+0xf5c>)
 8003ace:	e008      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ad0:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <UART_SetConfig+0xf60>)
 8003ad2:	e006      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ad4:	4b8d      	ldr	r3, [pc, #564]	; (8003d0c <UART_SetConfig+0xf64>)
 8003ad6:	e004      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ad8:	4b8d      	ldr	r3, [pc, #564]	; (8003d10 <UART_SetConfig+0xf68>)
 8003ada:	e002      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003adc:	4b8d      	ldr	r3, [pc, #564]	; (8003d14 <UART_SetConfig+0xf6c>)
 8003ade:	e000      	b.n	8003ae2 <UART_SetConfig+0xd3a>
 8003ae0:	4b82      	ldr	r3, [pc, #520]	; (8003cec <UART_SetConfig+0xf44>)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6852      	ldr	r2, [r2, #4]
 8003ae6:	0852      	lsrs	r2, r2, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	61fb      	str	r3, [r7, #28]
        break;
 8003af6:	e0bf      	b.n	8003c78 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af8:	f7fe fd9e 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8003afc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d044      	beq.n	8003b90 <UART_SetConfig+0xde8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d03e      	beq.n	8003b8c <UART_SetConfig+0xde4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d038      	beq.n	8003b88 <UART_SetConfig+0xde0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d032      	beq.n	8003b84 <UART_SetConfig+0xddc>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d02c      	beq.n	8003b80 <UART_SetConfig+0xdd8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d026      	beq.n	8003b7c <UART_SetConfig+0xdd4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d020      	beq.n	8003b78 <UART_SetConfig+0xdd0>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b07      	cmp	r3, #7
 8003b3c:	d01a      	beq.n	8003b74 <UART_SetConfig+0xdcc>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d014      	beq.n	8003b70 <UART_SetConfig+0xdc8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b09      	cmp	r3, #9
 8003b4c:	d00e      	beq.n	8003b6c <UART_SetConfig+0xdc4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b0a      	cmp	r3, #10
 8003b54:	d008      	beq.n	8003b68 <UART_SetConfig+0xdc0>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b0b      	cmp	r3, #11
 8003b5c:	d102      	bne.n	8003b64 <UART_SetConfig+0xdbc>
 8003b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b62:	e016      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e014      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	e012      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b6c:	2340      	movs	r3, #64	; 0x40
 8003b6e:	e010      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b70:	2320      	movs	r3, #32
 8003b72:	e00e      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b74:	2310      	movs	r3, #16
 8003b76:	e00c      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b78:	230c      	movs	r3, #12
 8003b7a:	e00a      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b7c:	230a      	movs	r3, #10
 8003b7e:	e008      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b80:	2308      	movs	r3, #8
 8003b82:	e006      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b84:	2306      	movs	r3, #6
 8003b86:	e004      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	e002      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e000      	b.n	8003b92 <UART_SetConfig+0xdea>
 8003b90:	2301      	movs	r3, #1
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	005a      	lsls	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	61fb      	str	r3, [r7, #28]
        break;
 8003bae:	e063      	b.n	8003c78 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d04f      	beq.n	8003c58 <UART_SetConfig+0xeb0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d048      	beq.n	8003c52 <UART_SetConfig+0xeaa>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d041      	beq.n	8003c4c <UART_SetConfig+0xea4>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d03a      	beq.n	8003c46 <UART_SetConfig+0xe9e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d033      	beq.n	8003c40 <UART_SetConfig+0xe98>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2b05      	cmp	r3, #5
 8003bde:	d02c      	beq.n	8003c3a <UART_SetConfig+0xe92>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	2b06      	cmp	r3, #6
 8003be6:	d025      	beq.n	8003c34 <UART_SetConfig+0xe8c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b07      	cmp	r3, #7
 8003bee:	d01e      	beq.n	8003c2e <UART_SetConfig+0xe86>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d017      	beq.n	8003c28 <UART_SetConfig+0xe80>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d010      	beq.n	8003c22 <UART_SetConfig+0xe7a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b0a      	cmp	r3, #10
 8003c06:	d009      	beq.n	8003c1c <UART_SetConfig+0xe74>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2b0b      	cmp	r3, #11
 8003c0e:	d102      	bne.n	8003c16 <UART_SetConfig+0xe6e>
 8003c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c14:	e022      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c1a:	e01f      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c20:	e01c      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c26:	e019      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c2c:	e016      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c32:	e013      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c34:	f241 5354 	movw	r3, #5460	; 0x1554
 8003c38:	e010      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c3a:	f641 1398 	movw	r3, #6552	; 0x1998
 8003c3e:	e00d      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c44:	e00a      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c46:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003c4a:	e007      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c50:	e004      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c56:	e001      	b.n	8003c5c <UART_SetConfig+0xeb4>
 8003c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6852      	ldr	r2, [r2, #4]
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	441a      	add	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
        break;
 8003c70:	e002      	b.n	8003c78 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	76fb      	strb	r3, [r7, #27]
        break;
 8003c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b0f      	cmp	r3, #15
 8003c7c:	d916      	bls.n	8003cac <UART_SetConfig+0xf04>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d212      	bcs.n	8003cac <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f023 030f 	bic.w	r3, r3, #15
 8003c8e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	89fa      	ldrh	r2, [r7, #14]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	e20c      	b.n	80040c6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e209      	b.n	80040c6 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8003cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	f200 81f4 	bhi.w	80040a4 <UART_SetConfig+0x12fc>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0xf1c>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003dcf 	.word	0x08003dcf
 8003ccc:	08003e85 	.word	0x08003e85
 8003cd0:	080040a5 	.word	0x080040a5
 8003cd4:	08003f2f 	.word	0x08003f2f
 8003cd8:	080040a5 	.word	0x080040a5
 8003cdc:	080040a5 	.word	0x080040a5
 8003ce0:	080040a5 	.word	0x080040a5
 8003ce4:	08003fe5 	.word	0x08003fe5
 8003ce8:	0001e848 	.word	0x0001e848
 8003cec:	01e84800 	.word	0x01e84800
 8003cf0:	0003d090 	.word	0x0003d090
 8003cf4:	0007a120 	.word	0x0007a120
 8003cf8:	000f4240 	.word	0x000f4240
 8003cfc:	001e8480 	.word	0x001e8480
 8003d00:	0028b0aa 	.word	0x0028b0aa
 8003d04:	0030d400 	.word	0x0030d400
 8003d08:	003d0900 	.word	0x003d0900
 8003d0c:	00516154 	.word	0x00516154
 8003d10:	007a1200 	.word	0x007a1200
 8003d14:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7fe fcfc 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d044      	beq.n	8003db0 <UART_SetConfig+0x1008>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d03e      	beq.n	8003dac <UART_SetConfig+0x1004>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d038      	beq.n	8003da8 <UART_SetConfig+0x1000>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d032      	beq.n	8003da4 <UART_SetConfig+0xffc>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d02c      	beq.n	8003da0 <UART_SetConfig+0xff8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d026      	beq.n	8003d9c <UART_SetConfig+0xff4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d020      	beq.n	8003d98 <UART_SetConfig+0xff0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	d01a      	beq.n	8003d94 <UART_SetConfig+0xfec>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d014      	beq.n	8003d90 <UART_SetConfig+0xfe8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	2b09      	cmp	r3, #9
 8003d6c:	d00e      	beq.n	8003d8c <UART_SetConfig+0xfe4>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b0a      	cmp	r3, #10
 8003d74:	d008      	beq.n	8003d88 <UART_SetConfig+0xfe0>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b0b      	cmp	r3, #11
 8003d7c:	d102      	bne.n	8003d84 <UART_SetConfig+0xfdc>
 8003d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d82:	e016      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e014      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	e012      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d8c:	2340      	movs	r3, #64	; 0x40
 8003d8e:	e010      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d90:	2320      	movs	r3, #32
 8003d92:	e00e      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d94:	2310      	movs	r3, #16
 8003d96:	e00c      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d98:	230c      	movs	r3, #12
 8003d9a:	e00a      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003d9c:	230a      	movs	r3, #10
 8003d9e:	e008      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003da0:	2308      	movs	r3, #8
 8003da2:	e006      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003da4:	2306      	movs	r3, #6
 8003da6:	e004      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003da8:	2304      	movs	r3, #4
 8003daa:	e002      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e000      	b.n	8003db2 <UART_SetConfig+0x100a>
 8003db0:	2301      	movs	r3, #1
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	441a      	add	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	61fb      	str	r3, [r7, #28]
        break;
 8003dcc:	e16d      	b.n	80040aa <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dce:	f7fe fcb7 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8003dd2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d044      	beq.n	8003e66 <UART_SetConfig+0x10be>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d03e      	beq.n	8003e62 <UART_SetConfig+0x10ba>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d038      	beq.n	8003e5e <UART_SetConfig+0x10b6>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d032      	beq.n	8003e5a <UART_SetConfig+0x10b2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d02c      	beq.n	8003e56 <UART_SetConfig+0x10ae>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d026      	beq.n	8003e52 <UART_SetConfig+0x10aa>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	2b06      	cmp	r3, #6
 8003e0a:	d020      	beq.n	8003e4e <UART_SetConfig+0x10a6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b07      	cmp	r3, #7
 8003e12:	d01a      	beq.n	8003e4a <UART_SetConfig+0x10a2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d014      	beq.n	8003e46 <UART_SetConfig+0x109e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	d00e      	beq.n	8003e42 <UART_SetConfig+0x109a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b0a      	cmp	r3, #10
 8003e2a:	d008      	beq.n	8003e3e <UART_SetConfig+0x1096>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2b0b      	cmp	r3, #11
 8003e32:	d102      	bne.n	8003e3a <UART_SetConfig+0x1092>
 8003e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e38:	e016      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e014      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	e012      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e42:	2340      	movs	r3, #64	; 0x40
 8003e44:	e010      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e46:	2320      	movs	r3, #32
 8003e48:	e00e      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	e00c      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e4e:	230c      	movs	r3, #12
 8003e50:	e00a      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e52:	230a      	movs	r3, #10
 8003e54:	e008      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e56:	2308      	movs	r3, #8
 8003e58:	e006      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e5a:	2306      	movs	r3, #6
 8003e5c:	e004      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e5e:	2304      	movs	r3, #4
 8003e60:	e002      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e62:	2302      	movs	r3, #2
 8003e64:	e000      	b.n	8003e68 <UART_SetConfig+0x10c0>
 8003e66:	2301      	movs	r3, #1
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	61fb      	str	r3, [r7, #28]
        break;
 8003e82:	e112      	b.n	80040aa <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d044      	beq.n	8003f16 <UART_SetConfig+0x116e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d03e      	beq.n	8003f12 <UART_SetConfig+0x116a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d038      	beq.n	8003f0e <UART_SetConfig+0x1166>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d032      	beq.n	8003f0a <UART_SetConfig+0x1162>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d02c      	beq.n	8003f06 <UART_SetConfig+0x115e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d026      	beq.n	8003f02 <UART_SetConfig+0x115a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d020      	beq.n	8003efe <UART_SetConfig+0x1156>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	2b07      	cmp	r3, #7
 8003ec2:	d01a      	beq.n	8003efa <UART_SetConfig+0x1152>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d014      	beq.n	8003ef6 <UART_SetConfig+0x114e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	2b09      	cmp	r3, #9
 8003ed2:	d00e      	beq.n	8003ef2 <UART_SetConfig+0x114a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b0a      	cmp	r3, #10
 8003eda:	d008      	beq.n	8003eee <UART_SetConfig+0x1146>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	2b0b      	cmp	r3, #11
 8003ee2:	d102      	bne.n	8003eea <UART_SetConfig+0x1142>
 8003ee4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ee8:	e016      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003eea:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <UART_SetConfig+0x1348>)
 8003eec:	e014      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003eee:	4b81      	ldr	r3, [pc, #516]	; (80040f4 <UART_SetConfig+0x134c>)
 8003ef0:	e012      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003ef2:	4b81      	ldr	r3, [pc, #516]	; (80040f8 <UART_SetConfig+0x1350>)
 8003ef4:	e010      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003ef6:	4b81      	ldr	r3, [pc, #516]	; (80040fc <UART_SetConfig+0x1354>)
 8003ef8:	e00e      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003efa:	4b81      	ldr	r3, [pc, #516]	; (8004100 <UART_SetConfig+0x1358>)
 8003efc:	e00c      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003efe:	4b81      	ldr	r3, [pc, #516]	; (8004104 <UART_SetConfig+0x135c>)
 8003f00:	e00a      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003f02:	4b81      	ldr	r3, [pc, #516]	; (8004108 <UART_SetConfig+0x1360>)
 8003f04:	e008      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003f06:	4b81      	ldr	r3, [pc, #516]	; (800410c <UART_SetConfig+0x1364>)
 8003f08:	e006      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003f0a:	4b81      	ldr	r3, [pc, #516]	; (8004110 <UART_SetConfig+0x1368>)
 8003f0c:	e004      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003f0e:	4b81      	ldr	r3, [pc, #516]	; (8004114 <UART_SetConfig+0x136c>)
 8003f10:	e002      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003f12:	4b81      	ldr	r3, [pc, #516]	; (8004118 <UART_SetConfig+0x1370>)
 8003f14:	e000      	b.n	8003f18 <UART_SetConfig+0x1170>
 8003f16:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <UART_SetConfig+0x1348>)
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6852      	ldr	r2, [r2, #4]
 8003f1c:	0852      	lsrs	r2, r2, #1
 8003f1e:	441a      	add	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e0bd      	b.n	80040aa <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe fb83 	bl	8002638 <HAL_RCC_GetSysClockFreq>
 8003f32:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d044      	beq.n	8003fc6 <UART_SetConfig+0x121e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d03e      	beq.n	8003fc2 <UART_SetConfig+0x121a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d038      	beq.n	8003fbe <UART_SetConfig+0x1216>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d032      	beq.n	8003fba <UART_SetConfig+0x1212>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d02c      	beq.n	8003fb6 <UART_SetConfig+0x120e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d026      	beq.n	8003fb2 <UART_SetConfig+0x120a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d020      	beq.n	8003fae <UART_SetConfig+0x1206>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b07      	cmp	r3, #7
 8003f72:	d01a      	beq.n	8003faa <UART_SetConfig+0x1202>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d014      	beq.n	8003fa6 <UART_SetConfig+0x11fe>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b09      	cmp	r3, #9
 8003f82:	d00e      	beq.n	8003fa2 <UART_SetConfig+0x11fa>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b0a      	cmp	r3, #10
 8003f8a:	d008      	beq.n	8003f9e <UART_SetConfig+0x11f6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b0b      	cmp	r3, #11
 8003f92:	d102      	bne.n	8003f9a <UART_SetConfig+0x11f2>
 8003f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f98:	e016      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e014      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003f9e:	2380      	movs	r3, #128	; 0x80
 8003fa0:	e012      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	e010      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	e00e      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003faa:	2310      	movs	r3, #16
 8003fac:	e00c      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fae:	230c      	movs	r3, #12
 8003fb0:	e00a      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fb2:	230a      	movs	r3, #10
 8003fb4:	e008      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	e006      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e004      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	e002      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e000      	b.n	8003fc8 <UART_SetConfig+0x1220>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	61fb      	str	r3, [r7, #28]
        break;
 8003fe2:	e062      	b.n	80040aa <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d04e      	beq.n	800408a <UART_SetConfig+0x12e2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d047      	beq.n	8004084 <UART_SetConfig+0x12dc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d040      	beq.n	800407e <UART_SetConfig+0x12d6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	2b03      	cmp	r3, #3
 8004002:	d039      	beq.n	8004078 <UART_SetConfig+0x12d0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b04      	cmp	r3, #4
 800400a:	d032      	beq.n	8004072 <UART_SetConfig+0x12ca>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2b05      	cmp	r3, #5
 8004012:	d02b      	beq.n	800406c <UART_SetConfig+0x12c4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	2b06      	cmp	r3, #6
 800401a:	d024      	beq.n	8004066 <UART_SetConfig+0x12be>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b07      	cmp	r3, #7
 8004022:	d01d      	beq.n	8004060 <UART_SetConfig+0x12b8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b08      	cmp	r3, #8
 800402a:	d016      	beq.n	800405a <UART_SetConfig+0x12b2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b09      	cmp	r3, #9
 8004032:	d00f      	beq.n	8004054 <UART_SetConfig+0x12ac>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b0a      	cmp	r3, #10
 800403a:	d008      	beq.n	800404e <UART_SetConfig+0x12a6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b0b      	cmp	r3, #11
 8004042:	d101      	bne.n	8004048 <UART_SetConfig+0x12a0>
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	e022      	b.n	800408e <UART_SetConfig+0x12e6>
 8004048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404c:	e01f      	b.n	800408e <UART_SetConfig+0x12e6>
 800404e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004052:	e01c      	b.n	800408e <UART_SetConfig+0x12e6>
 8004054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004058:	e019      	b.n	800408e <UART_SetConfig+0x12e6>
 800405a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405e:	e016      	b.n	800408e <UART_SetConfig+0x12e6>
 8004060:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004064:	e013      	b.n	800408e <UART_SetConfig+0x12e6>
 8004066:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x12e6>
 800406c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x12e6>
 8004072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004076:	e00a      	b.n	800408e <UART_SetConfig+0x12e6>
 8004078:	f241 5355 	movw	r3, #5461	; 0x1555
 800407c:	e007      	b.n	800408e <UART_SetConfig+0x12e6>
 800407e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004082:	e004      	b.n	800408e <UART_SetConfig+0x12e6>
 8004084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004088:	e001      	b.n	800408e <UART_SetConfig+0x12e6>
 800408a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6852      	ldr	r2, [r2, #4]
 8004092:	0852      	lsrs	r2, r2, #1
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	fbb2 f3f3 	udiv	r3, r2, r3
 800409e:	b29b      	uxth	r3, r3
 80040a0:	61fb      	str	r3, [r7, #28]
        break;
 80040a2:	e002      	b.n	80040aa <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	76fb      	strb	r3, [r7, #27]
        break;
 80040a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b0f      	cmp	r3, #15
 80040ae:	d908      	bls.n	80040c2 <UART_SetConfig+0x131a>
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b6:	d204      	bcs.n	80040c2 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	e001      	b.n	80040c6 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80040e2:	7efb      	ldrb	r3, [r7, #27]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3728      	adds	r7, #40	; 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	00f42400 	.word	0x00f42400
 80040f4:	0001e848 	.word	0x0001e848
 80040f8:	0003d090 	.word	0x0003d090
 80040fc:	0007a120 	.word	0x0007a120
 8004100:	000f4240 	.word	0x000f4240
 8004104:	00145855 	.word	0x00145855
 8004108:	00186a00 	.word	0x00186a00
 800410c:	001e8480 	.word	0x001e8480
 8004110:	0028b0aa 	.word	0x0028b0aa
 8004114:	003d0900 	.word	0x003d0900
 8004118:	007a1200 	.word	0x007a1200

0800411c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01a      	beq.n	8004232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d10a      	bne.n	8004232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	605a      	str	r2, [r3, #4]
  }
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af02      	add	r7, sp, #8
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004270:	f7fc fcf4 	bl	8000c5c <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b08      	cmp	r3, #8
 8004282:	d10e      	bne.n	80042a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004284:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f82c 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e022      	b.n	80042e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d10e      	bne.n	80042ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f816 	bl	80042f0 <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e00c      	b.n	80042e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004300:	e02c      	b.n	800435c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d028      	beq.n	800435c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430a:	f7fc fca7 	bl	8000c5c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	429a      	cmp	r2, r3
 8004318:	d302      	bcc.n	8004320 <UART_WaitOnFlagUntilTimeout+0x30>
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11d      	bne.n	800435c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800432e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e00f      	b.n	800437c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4013      	ands	r3, r2
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	429a      	cmp	r2, r3
 8004378:	d0c3      	beq.n	8004302 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_UARTEx_DisableFifoMode+0x16>
 8004396:	2302      	movs	r3, #2
 8004398:	e027      	b.n	80043ea <HAL_UARTEx_DisableFifoMode+0x66>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2224      	movs	r2, #36	; 0x24
 80043a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800440a:	2302      	movs	r3, #2
 800440c:	e02d      	b.n	800446a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2224      	movs	r2, #36	; 0x24
 800441a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0201 	bic.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f850 	bl	80044f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004486:	2302      	movs	r3, #2
 8004488:	e02d      	b.n	80044e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2224      	movs	r2, #36	; 0x24
 8004496:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f812 	bl	80044f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80044f8:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004502:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004506:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <UARTEx_SetNbDataToProcess+0xcc>)
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004510:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004518:	2b00      	cmp	r3, #0
 800451a:	d108      	bne.n	800452e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800452c:	e03d      	b.n	80045aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800452e:	2308      	movs	r3, #8
 8004530:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004532:	2308      	movs	r3, #8
 8004534:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	0e5b      	lsrs	r3, r3, #25
 800453e:	b2db      	uxtb	r3, r3
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	0f5b      	lsrs	r3, r3, #29
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004556:	7fbb      	ldrb	r3, [r7, #30]
 8004558:	7f3a      	ldrb	r2, [r7, #28]
 800455a:	f107 0120 	add.w	r1, r7, #32
 800455e:	440a      	add	r2, r1
 8004560:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004564:	fb02 f303 	mul.w	r3, r2, r3
 8004568:	7f3a      	ldrb	r2, [r7, #28]
 800456a:	f107 0120 	add.w	r1, r7, #32
 800456e:	440a      	add	r2, r1
 8004570:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004574:	fb93 f3f2 	sdiv	r3, r3, r2
 8004578:	b29a      	uxth	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004580:	7ffb      	ldrb	r3, [r7, #31]
 8004582:	7f7a      	ldrb	r2, [r7, #29]
 8004584:	f107 0120 	add.w	r1, r7, #32
 8004588:	440a      	add	r2, r1
 800458a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	7f7a      	ldrb	r2, [r7, #29]
 8004594:	f107 0120 	add.w	r1, r7, #32
 8004598:	440a      	add	r2, r1
 800459a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800459e:	fb93 f3f2 	sdiv	r3, r3, r2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045aa:	bf00      	nop
 80045ac:	3724      	adds	r7, #36	; 0x24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	08004630 	.word	0x08004630
 80045bc:	08004638 	.word	0x08004638

080045c0 <__libc_init_array>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	4e0d      	ldr	r6, [pc, #52]	; (80045f8 <__libc_init_array+0x38>)
 80045c4:	4c0d      	ldr	r4, [pc, #52]	; (80045fc <__libc_init_array+0x3c>)
 80045c6:	1ba4      	subs	r4, r4, r6
 80045c8:	10a4      	asrs	r4, r4, #2
 80045ca:	2500      	movs	r5, #0
 80045cc:	42a5      	cmp	r5, r4
 80045ce:	d109      	bne.n	80045e4 <__libc_init_array+0x24>
 80045d0:	4e0b      	ldr	r6, [pc, #44]	; (8004600 <__libc_init_array+0x40>)
 80045d2:	4c0c      	ldr	r4, [pc, #48]	; (8004604 <__libc_init_array+0x44>)
 80045d4:	f000 f820 	bl	8004618 <_init>
 80045d8:	1ba4      	subs	r4, r4, r6
 80045da:	10a4      	asrs	r4, r4, #2
 80045dc:	2500      	movs	r5, #0
 80045de:	42a5      	cmp	r5, r4
 80045e0:	d105      	bne.n	80045ee <__libc_init_array+0x2e>
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045e8:	4798      	blx	r3
 80045ea:	3501      	adds	r5, #1
 80045ec:	e7ee      	b.n	80045cc <__libc_init_array+0xc>
 80045ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80045f2:	4798      	blx	r3
 80045f4:	3501      	adds	r5, #1
 80045f6:	e7f2      	b.n	80045de <__libc_init_array+0x1e>
 80045f8:	08004660 	.word	0x08004660
 80045fc:	08004660 	.word	0x08004660
 8004600:	08004660 	.word	0x08004660
 8004604:	08004664 	.word	0x08004664

08004608 <memset>:
 8004608:	4402      	add	r2, r0
 800460a:	4603      	mov	r3, r0
 800460c:	4293      	cmp	r3, r2
 800460e:	d100      	bne.n	8004612 <memset+0xa>
 8004610:	4770      	bx	lr
 8004612:	f803 1b01 	strb.w	r1, [r3], #1
 8004616:	e7f9      	b.n	800460c <memset+0x4>

08004618 <_init>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr

08004624 <_fini>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	bf00      	nop
 8004628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800462a:	bc08      	pop	{r3}
 800462c:	469e      	mov	lr, r3
 800462e:	4770      	bx	lr
